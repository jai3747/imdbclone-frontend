{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js\",\n  _s = $RefreshSig$();\n// // // import React, { useEffect, useState, useCallback } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import { api } from \"./config/api.config\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import {\n// // //   TextField,\n// // //   Button,\n// // //   FormControl,\n// // //   InputLabel,\n// // //   MenuItem,\n// // //   Select,\n// // //   CircularProgress,\n// // //   Alert,\n// // //   Container,\n// // //   Box,\n// // //   Typography,\n// // //   Chip,\n// // //   OutlinedInput,\n// // //   FormHelperText,\n// // //   Paper,\n// // //   IconButton,\n// // //   Tooltip\n// // // } from \"@mui/material\";\n// // // import { Info as InfoIcon } from '@mui/icons-material';\n\n// // // const ITEM_HEIGHT = 48;\n// // // const ITEM_PADDING_TOP = 8;\n// // // const MenuProps = {\n// // //   PaperProps: {\n// // //     style: {\n// // //       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n// // //       width: 250,\n// // //     },\n// // //   },\n// // // };\n\n// // // const ALLOWED_IMAGE_SOURCES = [\n// // //   {\n// // //     domain: 'imgur.com',\n// // //     example: 'https://i.imgur.com/example.jpg',\n// // //     description: 'Imgur'\n// // //   },\n// // //   {\n// // //     domain: 'upload.wikimedia.org',\n// // //     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n// // //     description: 'Wikimedia Commons'\n// // //   },\n// // //   {\n// // //     domain: 'images.unsplash.com',\n// // //     example: 'https://images.unsplash.com/photo-example.jpg',\n// // //     description: 'Unsplash'\n// // //   },\n// // //   {\n// // //     domain: 'res.cloudinary.com',\n// // //     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n// // //     description: 'Cloudinary'\n// // //   },\n// // //   {\n// // //     domain: 'drive.google.com',\n// // //     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n// // //     description: 'Google Drive (public links only)'\n// // //   }\n// // // ];\n\n// // // // Function to convert Google Drive sharing URL to direct image URL\n// // // const convertGoogleDriveURL = (url) => {\n// // //   try {\n// // //     const urlObj = new URL(url);\n// // //     if (urlObj.hostname === 'drive.google.com') {\n// // //       if (url.includes('/file/d/')) {\n// // //         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n// // //         if (fileId) {\n// // //           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n// // //         }\n// // //       } else if (url.includes('uc?export=view&id=')) {\n// // //         return url;\n// // //       }\n// // //     }\n// // //     return url;\n// // //   } catch {\n// // //     return url;\n// // //   }\n// // // };\n\n// // // // Function to validate image URL\n// // // const isValidImageUrl = (url) => {\n// // //   try {\n// // //     const convertedUrl = convertGoogleDriveURL(url);\n// // //     const urlObj = new URL(convertedUrl);\n// // //     const hostname = urlObj.hostname;\n\n// // //     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n// // //       hostname === domain || hostname.endsWith(`.${domain}`)\n// // //     );\n\n// // //     const isHttps = urlObj.protocol === 'https:';\n\n// // //     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n// // //       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n// // //       urlObj.hostname.endsWith('cloudinary.com');\n\n// // //     return isAllowedDomain && isHttps && hasImageExtension;\n// // //   } catch {\n// // //     return false;\n// // //   }\n// // // };\n\n// // // // Custom Yup test for image URL validation\n// // // yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n// // //   return this.test('test-valid-image-url', errorMessage, function (value) {\n// // //     const { path, createError } = this;\n// // //     return !value || isValidImageUrl(value) || createError({\n// // //       path,\n// // //       message: errorMessage\n// // //     });\n// // //   });\n// // // });\n\n// // // const movieValidationSchema = yup.object({\n// // //   name: yup\n// // //     .string()\n// // //     .required(\"Movie name is required\")\n// // //     .min(3, \"Movie name must be at least 3 characters\")\n// // //     .max(100, \"Movie name must not exceed 100 characters\")\n// // //     .trim(),\n// // //   desc: yup\n// // //     .string()\n// // //     .required(\"Description is required\")\n// // //     .min(10, \"Description must be at least 10 characters\")\n// // //     .max(2000, \"Description must not exceed 2000 characters\")\n// // //     .trim(),\n// // //   director: yup\n// // //     .string()\n// // //     .required(\"Director name is required\")\n// // //     .min(3, \"Director name must be at least 3 characters\")\n// // //     .max(100, \"Director name must not exceed 100 characters\")\n// // //     .trim(),\n// // //   poster: yup\n// // //     .string()\n// // //     .required(\"Poster URL is required\")\n// // //     .url(\"Must be a valid URL\")\n// // //     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n// // //     .trim(),\n// // //   yearOfRelease: yup\n// // //     .number()\n// // //     .required(\"Release year is required\")\n// // //     .min(1888, \"Year must be 1888 or later\")\n// // //     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n// // //   producer: yup\n// // //     .string()\n// // //     .required(\"Producer selection is required\"),\n// // //   actors: yup\n// // //     .array()\n// // //     .min(1, \"Please select at least one actor\")\n// // //     .max(20, \"Cannot select more than 20 actors\")\n// // //     .required(\"Actor selection is required\")\n// // // });\n\n// // // const AddMovie = () => {\n// // //   const navigate = useNavigate();\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [initialLoading, setInitialLoading] = useState(true);\n// // //   const [error, setError] = useState(null);\n// // //   const [producers, setProducers] = useState([]);\n// // //   const [actors, setActors] = useState([]);\n// // //   const [previewUrl, setPreviewUrl] = useState(\"\");\n// // //   const [imageError, setImageError] = useState(false);\n// // //   const [imageLoading, setImageLoading] = useState(false);\n// // //   const [showImageHelp, setShowImageHelp] = useState(false);\n\n// // //   const validateImageUrl = useCallback(async (url) => {\n// // //     if (!url) return false;\n// // //     const convertedUrl = convertGoogleDriveURL(url);\n// // //     if (!isValidImageUrl(convertedUrl)) return false;\n\n// // //     setImageLoading(true);\n// // //     return new Promise((resolve) => {\n// // //       const img = new Image();\n// // //       img.onload = () => {\n// // //         setImageLoading(false);\n// // //         resolve(true);\n// // //       };\n// // //       img.onerror = () => {\n// // //         setImageLoading(false);\n// // //         resolve(false);\n// // //       };\n// // //       img.src = convertedUrl;\n// // //     });\n// // //   }, []);\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: \"\",\n// // //       desc: \"\",\n// // //       director: \"\",\n// // //       poster: \"\",\n// // //       yearOfRelease: new Date().getFullYear(),\n// // //       producer: \"\",\n// // //       actors: []\n// // //     },\n// // //     validationSchema: movieValidationSchema,\n// // //     onSubmit: async (values) => {\n// // //       try {\n// // //         setLoading(true);\n// // //         setError(null);\n\n// // //         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n\n// // //         const isImageValid = await validateImageUrl(convertedPosterUrl);\n// // //         if (!isImageValid) {\n// // //           formik.setFieldError('poster', 'Unable to load image from this URL');\n// // //           setLoading(false);\n// // //           return;\n// // //         }\n\n// // //         const submitValues = {\n// // //           ...values,\n// // //           poster: convertedPosterUrl\n// // //         };\n\n// // //         await api.movies.add(submitValues);\n// // //         navigate(\"/\");\n// // //       } catch (err) {\n// // //         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n// // //         console.error(\"Add movie error:\", err);\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     }\n// // //   });\n\n// // //   useEffect(() => {\n// // //     loadInitialData();\n// // //   }, []);\n\n// // //   useEffect(() => {\n// // //     const validateAndSetPreview = async () => {\n// // //       const url = formik.values.poster;\n// // //       if (url) {\n// // //         const convertedUrl = convertGoogleDriveURL(url);\n// // //         if (isValidImageUrl(convertedUrl)) {\n// // //           setImageLoading(true);\n// // //           setPreviewUrl(convertedUrl);\n// // //           const isValid = await validateImageUrl(convertedUrl);\n// // //           setImageError(!isValid);\n// // //         } else {\n// // //           setPreviewUrl(\"\");\n// // //           setImageError(false);\n// // //         }\n// // //       }\n// // //     };\n\n// // //     validateAndSetPreview();\n// // //   }, [formik.values.poster, validateImageUrl]);\n\n// // //   const loadInitialData = async () => {\n// // //     try {\n// // //       setInitialLoading(true);\n// // //       const [producersRes, actorsRes] = await Promise.all([\n// // //         api.producers.getAll(),\n// // //         api.actors.getAll()\n// // //       ]);\n// // //       setProducers(producersRes.data);\n// // //       setActors(actorsRes.data);\n// // //     } catch (err) {\n// // //       setError(\"Failed to load producers and actors. Please try again later.\");\n// // //       console.error(\"Load initial data error:\", err);\n// // //     } finally {\n// // //       setInitialLoading(false);\n// // //     }\n// // //   };\n\n// // //   if (initialLoading) {\n// // //     return (\n// // //       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n// // //         <CircularProgress />\n// // //       </Box>\n// // //     );\n// // //   }\n\n// // //   return (\n// // //     <Container maxWidth=\"md\">\n// // //       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n// // //         <Typography variant=\"h4\" gutterBottom>\n// // //           Add New Movie\n// // //         </Typography>\n\n// // //         {error && (\n// // //           <Alert severity=\"error\" sx={{ mb: 2 }}>\n// // //             {error}\n// // //           </Alert>\n// // //         )}\n\n// // //         <Box sx={{ display: 'grid', gap: 2 }}>\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Movie Name\"\n// // //             {...formik.getFieldProps('name')}\n// // //             error={formik.touched.name && Boolean(formik.errors.name)}\n// // //             helperText={formik.touched.name && formik.errors.name}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             multiline\n// // //             rows={4}\n// // //             label=\"Description\"\n// // //             {...formik.getFieldProps('desc')}\n// // //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// // //             helperText={formik.touched.desc && formik.errors.desc}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Director\"\n// // //             {...formik.getFieldProps('director')}\n// // //             error={formik.touched.director && Boolean(formik.errors.director)}\n// // //             helperText={formik.touched.director && formik.errors.director}\n// // //           />\n\n// // //           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n// // //             <Box sx={{ flex: 1 }}>\n// // //               <TextField\n// // //                 fullWidth\n// // //                 label=\"Poster URL\"\n// // //                 {...formik.getFieldProps('poster')}\n// // //                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n// // //                 helperText={\n// // //                   (formik.touched.poster && formik.errors.poster) ||\n// // //                   \"Enter a HTTPS URL from one of the allowed sources\"\n// // //                 }\n// // //                 InputProps={{\n// // //                   endAdornment: (\n// // //                     <Tooltip title=\"Click for allowed image sources\">\n// // //                       <IconButton \n// // //                         size=\"small\" \n// // //                         onClick={() => setShowImageHelp(!showImageHelp)}\n// // //                       >\n// // //                         <InfoIcon />\n// // //                       </IconButton>\n// // //                     </Tooltip>\n// // //                   ),\n// // //                 }}\n// // //               />\n// // //               {showImageHelp && (\n// // //                 <Paper sx={{ mt: 1, p: 2 }}>\n// // //                   <Typography variant=\"subtitle2\" gutterBottom>\n// // //                     Allowed Image Sources:\n// // //                   </Typography>\n// // //                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n// // //                     <Box key={description} sx={{ mb: 1 }}>\n// // //                       <Typography variant=\"body2\" color=\"text.secondary\">\n// // //                         {description}:\n// // //                       </Typography>\n// // //                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n// // //                         Example: {example}\n// // //                       </Typography>\n// // //                     </Box>\n// // //                   ))}\n// // //                 </Paper>\n// // //               )}\n// // //             </Box>\n// // //             {(previewUrl || imageLoading) && (\n// // //               <Paper \n// // //                 elevation={3} \n// // //                 sx={{ \n// // //                   p: 1,\n// // //                   width: 150,\n// // //                   height: 200,\n// // //                   display: 'flex',\n// // //                   alignItems: 'center',\n// // //                   justifyContent: 'center',\n// // //                   backgroundColor: '#f5f5f5'\n// // //                 }}\n// // //               >\n// // //                 {imageLoading ? (\n// // //                   <CircularProgress size={24} />\n// // //                 ) : imageError ? (\n// // //                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n// // //                     Failed to load image\n// // //                   </Typography>\n// // //                 ) : (\n// // //                   <img\n// // //                     src={previewUrl}\n// // //                     alt=\"Poster preview\"\n// // //                     style={{ \n// // //                       maxWidth: '100%',\n// // //                       maxHeight: '100%',\n// // //                       objectFit: 'contain'\n// // //                     }}\n// // //                     onError={() => setImageError(true)}\n// // //                   />\n// // //                 )}\n// // //               </Paper>\n// // //             )}\n// // //           </Box>\n\n// // //           <TextField\n// // //             fullWidth\n// // //             type=\"number\"\n// // //             label=\"Year of Release\"\n// // //             {...formik.getFieldProps('yearOfRelease')}\n// // //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// // //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //           />\n\n// // //           <FormControl \n// // //             fullWidth\n// // //             error={formik.touched.producer && Boolean(formik.errors.producer)}\n// // //           >\n// // //             <InputLabel>Producer</InputLabel>\n// // //             <Select\n// // //               {...formik.getFieldProps('producer')}\n// // //               label=\"Producer\"\n// // //             >\n// // //               {producers.map(producer => (\n// // //                 <MenuItem key={producer._id} value={producer._id}>\n// // //                   {producer.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //             {formik.touched.producer && formik.errors.producer && (\n// // //               <FormHelperText>{formik.errors.producer}</FormHelperText>\n// // //             )}\n// // //           </FormControl>\n\n// // //           <FormControl \n// // //             fullWidth\n// // //             error={formik.touched.actors && Boolean(formik.errors.actors)}\n// // //           >\n// // //             <InputLabel>Actors</InputLabel>\n// // //             <Select\n// // //               multiple\n// // //               {...formik.getFieldProps('actors')}\n// // //               input={<OutlinedInput label=\"Actors\" />}\n// // //               renderValue={(selected) => (\n// // //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n// // //                   {selected.map((value) => (\n// // //                     <Chip\n// // //                       key={value}\n// // //                       label={actors.find(actor => actor._id === value)?.name}\n// // //                       size=\"small\"\n// // //                     />\n// // //                   ))}\n// // //                 </Box>\n// // //               )}\n// // //               MenuProps={MenuProps}\n// // //             >\n// // //               {actors.map(actor => (\n// // //                 <MenuItem key={actor._id} value={actor._id}>\n// // //                   {actor.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //             {formik.touched.actors && formik.errors.actors && (\n// // //               <FormHelperText>{formik.errors.actors}</FormHelperText>\n// // //             )}\n// // //           </FormControl>\n\n// // //           <Button\n// // //             variant=\"contained\"\n// // //             type=\"submit\"\n// // //             disabled={loading}\n// // //             size=\"large\"\n// // //             sx={{ mt: 2 }}\n// // //           >\n// // //             {loading ? (\n// // //               <CircularProgress size={24} sx={{ color: 'white' }} />\n// // //             ) : (\n// // //               'Add Movie'\n// // //             )}\n// // //           </Button>\n// // //         </Box>\n// // //       </Box>\n// // //     </Container>\n// // //   );\n// // // };\n\n// // // export default AddMovie;\n// // import React, { useEffect, useState, useCallback } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import { api } from \"./config/api.config\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import {\n// //   TextField,\n// //   Button,\n// //   FormControl,\n// //   InputLabel,\n// //   MenuItem,\n// //   Select,\n// //   CircularProgress,\n// //   Alert,\n// //   Container,\n// //   Box,\n// //   Typography,\n// //   Chip,\n// //   OutlinedInput,\n// //   FormHelperText,\n// //   Paper,\n// //   IconButton,\n// //   Tooltip\n// // } from \"@mui/material\";\n// // import { Info as InfoIcon } from '@mui/icons-material';\n\n// // const ITEM_HEIGHT = 48;\n// // const ITEM_PADDING_TOP = 8;\n// // const MenuProps = {\n// //   PaperProps: {\n// //     style: {\n// //       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n// //       width: 250,\n// //     },\n// //   },\n// // };\n\n// // const ALLOWED_IMAGE_SOURCES = [\n// //   {\n// //     domain: 'imgur.com',\n// //     example: 'https://i.imgur.com/example.jpg',\n// //     description: 'Imgur'\n// //   },\n// //   {\n// //     domain: 'upload.wikimedia.org',\n// //     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n// //     description: 'Wikimedia Commons'\n// //   },\n// //   {\n// //     domain: 'images.unsplash.com',\n// //     example: 'https://images.unsplash.com/photo-example.jpg',\n// //     description: 'Unsplash'\n// //   },\n// //   {\n// //     domain: 'res.cloudinary.com',\n// //     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n// //     description: 'Cloudinary'\n// //   },\n// //   {\n// //     domain: 'drive.google.com',\n// //     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n// //     description: 'Google Drive (public links only)'\n// //   }\n// // ];\n\n// // // Function to convert Google Drive sharing URL to direct image URL\n// // const convertGoogleDriveURL = (url) => {\n// //   try {\n// //     const urlObj = new URL(url);\n// //     if (urlObj.hostname === 'drive.google.com') {\n// //       if (url.includes('/file/d/')) {\n// //         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n// //         if (fileId) {\n// //           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n// //         }\n// //       } else if (url.includes('uc?export=view&id=')) {\n// //         return url;\n// //       }\n// //     }\n// //     return url;\n// //   } catch {\n// //     return url;\n// //   }\n// // };\n\n// // // Function to validate image URL\n// // const isValidImageUrl = (url) => {\n// //   try {\n// //     const convertedUrl = convertGoogleDriveURL(url);\n// //     const urlObj = new URL(convertedUrl);\n// //     const hostname = urlObj.hostname;\n\n// //     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n// //       hostname === domain || hostname.endsWith(`.${domain}`)\n// //     );\n\n// //     const isHttps = urlObj.protocol === 'https:';\n\n// //     // Allow any image format from Google Drive\n// //     if (hostname === 'drive.google.com') {\n// //       return isAllowedDomain && isHttps;\n// //     }\n\n// //     // For other domains, check for image extensions\n// //     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n// //       urlObj.hostname.endsWith('cloudinary.com');\n\n// //     return isAllowedDomain && isHttps && hasImageExtension;\n// //   } catch {\n// //     return false;\n// //   }\n// // };\n\n// // // Custom Yup test for image URL validation\n// // yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n// //   return this.test('test-valid-image-url', errorMessage, function (value) {\n// //     const { path, createError } = this;\n// //     return !value || isValidImageUrl(value) || createError({\n// //       path,\n// //       message: errorMessage\n// //     });\n// //   });\n// // });\n\n// // const movieValidationSchema = yup.object({\n// //   name: yup\n// //     .string()\n// //     .required(\"Movie name is required\")\n// //     .min(3, \"Movie name must be at least 3 characters\")\n// //     .max(100, \"Movie name must not exceed 100 characters\")\n// //     .trim(),\n// //   desc: yup\n// //     .string()\n// //     .required(\"Description is required\")\n// //     .min(10, \"Description must be at least 10 characters\")\n// //     .max(2000, \"Description must not exceed 2000 characters\")\n// //     .trim(),\n// //   director: yup\n// //     .string()\n// //     .required(\"Director name is required\")\n// //     .min(3, \"Director name must be at least 3 characters\")\n// //     .max(100, \"Director name must not exceed 100 characters\")\n// //     .trim(),\n// //   poster: yup\n// //     .string()\n// //     .required(\"Poster URL is required\")\n// //     .url(\"Must be a valid URL\")\n// //     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n// //     .trim(),\n// //   yearOfRelease: yup\n// //     .number()\n// //     .required(\"Release year is required\")\n// //     .min(1888, \"Year must be 1888 or later\")\n// //     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n// //   producer: yup\n// //     .string()\n// //     .required(\"Producer selection is required\"),\n// //   actors: yup\n// //     .array()\n// //     .min(1, \"Please select at least one actor\")\n// //     .max(20, \"Cannot select more than 20 actors\")\n// //     .required(\"Actor selection is required\")\n// // });\n\n// // const AddMovie = () => {\n// //   const navigate = useNavigate();\n// //   const [loading, setLoading] = useState(false);\n// //   const [initialLoading, setInitialLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [previewUrl, setPreviewUrl] = useState(\"\");\n// //   const [imageError, setImageError] = useState(false);\n// //   const [imageLoading, setImageLoading] = useState(false);\n// //   const [showImageHelp, setShowImageHelp] = useState(false);\n\n// //   const validateImageUrl = useCallback(async (url) => {\n// //     if (!url) return false;\n// //     const convertedUrl = convertGoogleDriveURL(url);\n// //     if (!isValidImageUrl(convertedUrl)) return false;\n\n// //     setImageLoading(true);\n// //     return new Promise((resolve) => {\n// //       const img = new Image();\n// //       img.onload = () => {\n// //         setImageLoading(false);\n// //         resolve(true);\n// //       };\n// //       img.onerror = () => {\n// //         setImageLoading(false);\n// //         resolve(false);\n// //       };\n// //       img.src = convertedUrl;\n// //     });\n// //   }, []);\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: \"\",\n// //       desc: \"\",\n// //       director: \"\",\n// //       poster: \"\",\n// //       yearOfRelease: new Date().getFullYear(),\n// //       producer: \"\",\n// //       actors: []\n// //     },\n// //     validationSchema: movieValidationSchema,\n// //     onSubmit: async (values) => {\n// //       try {\n// //         setLoading(true);\n// //         setError(null);\n\n// //         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n\n// //         const isImageValid = await validateImageUrl(convertedPosterUrl);\n// //         if (!isImageValid) {\n// //           formik.setFieldError('poster', 'Unable to load image from this URL');\n// //           setLoading(false);\n// //           return;\n// //         }\n\n// //         const submitValues = {\n// //           ...values,\n// //           poster: convertedPosterUrl\n// //         };\n\n// //         await api.movies.add(submitValues);\n// //         navigate(\"/\");\n// //       } catch (err) {\n// //         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n// //         console.error(\"Add movie error:\", err);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     }\n// //   });\n\n// //   useEffect(() => {\n// //     loadInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     const validateAndSetPreview = async () => {\n// //       const url = formik.values.poster;\n// //       if (url) {\n// //         const convertedUrl = convertGoogleDriveURL(url);\n// //         if (isValidImageUrl(convertedUrl)) {\n// //           setImageLoading(true);\n// //           setPreviewUrl(convertedUrl);\n// //           const isValid = await validateImageUrl(convertedUrl);\n// //           setImageError(!isValid);\n// //         } else {\n// //           setPreviewUrl(\"\");\n// //           setImageError(false);\n// //         }\n// //       }\n// //     };\n\n// //     validateAndSetPreview();\n// //   }, [formik.values.poster, validateImageUrl]);\n\n// //   const loadInitialData = async () => {\n// //     try {\n// //       setInitialLoading(true);\n// //       const [producersRes, actorsRes] = await Promise.all([\n// //         api.producers.getAll(),\n// //         api.actors.getAll()\n// //       ]);\n// //       setProducers(producersRes.data);\n// //       setActors(actorsRes.data);\n// //     } catch (err) {\n// //       setError(\"Failed to load producers and actors. Please try again later.\");\n// //       console.error(\"Load initial data error:\", err);\n// //     } finally {\n// //       setInitialLoading(false);\n// //     }\n// //   };\n\n// //   if (initialLoading) {\n// //     return (\n// //       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Container maxWidth=\"md\">\n// //       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n// //         <Typography variant=\"h4\" gutterBottom>\n// //           Add New Movie\n// //         </Typography>\n\n// //         {error && (\n// //           <Alert severity=\"error\" sx={{ mb: 2 }}>\n// //             {error}\n// //           </Alert>\n// //         )}\n\n// //         <Box sx={{ display: 'grid', gap: 2 }}>\n// //           <TextField\n// //             fullWidth\n// //             label=\"Movie Name\"\n// //             {...formik.getFieldProps('name')}\n// //             error={formik.touched.name && Boolean(formik.errors.name)}\n// //             helperText={formik.touched.name && formik.errors.name}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             multiline\n// //             rows={4}\n// //             label=\"Description\"\n// //             {...formik.getFieldProps('desc')}\n// //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// //             helperText={formik.touched.desc && formik.errors.desc}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             label=\"Director\"\n// //             {...formik.getFieldProps('director')}\n// //             error={formik.touched.director && Boolean(formik.errors.director)}\n// //             helperText={formik.touched.director && formik.errors.director}\n// //           />\n\n// //           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n// //             <Box sx={{ flex: 1 }}>\n// //               <TextField\n// //                 fullWidth\n// //                 label=\"Poster URL\"\n// //                 {...formik.getFieldProps('poster')}\n// //                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n// //                 helperText={\n// //                   (formik.touched.poster && formik.errors.poster) ||\n// //                   \"Enter a HTTPS URL from one of the allowed sources\"\n// //                 }\n// //                 InputProps={{\n// //                   endAdornment: (\n// //                     <Tooltip title=\"Click for allowed image sources\">\n// //                       <IconButton \n// //                         size=\"small\" \n// //                         onClick={() => setShowImageHelp(!showImageHelp)}\n// //                       >\n// //                         <InfoIcon />\n// //                       </IconButton>\n// //                     </Tooltip>\n// //                   ),\n// //                 }}\n// //               />\n// //               {showImageHelp && (\n// //                 <Paper sx={{ mt: 1, p: 2 }}>\n// //                   <Typography variant=\"subtitle2\" gutterBottom>\n// //                     Allowed Image Sources:\n// //                   </Typography>\n// //                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n// //                     <Box key={description} sx={{ mb: 1 }}>\n// //                       <Typography variant=\"body2\" color=\"text.secondary\">\n// //                         {description}:\n// //                       </Typography>\n// //                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n// //                         Example: {example}\n// //                       </Typography>\n// //                     </Box>\n// //                   ))}\n// //                 </Paper>\n// //               )}\n// //             </Box>\n// //             {(previewUrl || imageLoading) && (\n// //               <Paper \n// //                 elevation={3} \n// //                 sx={{ \n// //                   p: 1,\n// //                   width: 150,\n// //                   height: 200,\n// //                   display: 'flex',\n// //                   alignItems: 'center',\n// //                   justifyContent: 'center',\n// //                   backgroundColor: '#f5f5f5'\n// //                 }}\n// //               >\n// //                 {imageLoading ? (\n// //                   <CircularProgress size={24} />\n// //                 ) : imageError ? (\n// //                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n// //                     Failed to load image\n// //                   </Typography>\n// //                 ) : (\n// //                   <img\n// //                     src={previewUrl}\n// //                     alt=\"Poster preview\"\n// //                     style={{ \n// //                       maxWidth: '100%',\n// //                       maxHeight: '100%',\n// //                       objectFit: 'contain'\n// //                     }}\n// //                     onError={() => setImageError(true)}\n// //                   />\n// //                 )}\n// //               </Paper>\n// //             )}\n// //           </Box>\n\n// //           <TextField\n// //             fullWidth\n// //             type=\"number\"\n// //             label=\"Year of Release\"\n// //             {...formik.getFieldProps('yearOfRelease')}\n// //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// //           />\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.producer && Boolean(formik.errors.producer)}\n// //           >\n// //             <InputLabel>Producer</InputLabel>\n// //             <Select\n// //               {...formik.getFieldProps('producer')}\n// //               label=\"Producer\"\n// //             >\n// //               {producers.map(producer => (\n// //                 <MenuItem key={producer._id} value={producer._id}>\n// //                   {producer.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.producer && formik.errors.producer && (\n// //               <FormHelperText>{formik.errors.producer}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.actors && Boolean(formik.errors.actors)}\n// //           >\n// //             <InputLabel>Actors</InputLabel>\n// //             <Select\n// //               multiple\n// //               {...formik.getFieldProps('actors')}\n// //               input={<OutlinedInput label=\"Actors\" />}\n// //               renderValue={(selected) => (\n// //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n// //                   {selected.map((value) => (\n// //                     <Chip\n// //                       key={value}\n// //                       label={actors.find(actor => actor._id === value)?.name}\n// //                       size=\"small\"\n// //                     />\n// //                   ))}\n// //                 </Box>\n// //               )}\n// //               MenuProps={MenuProps}\n// //             >\n// //               {actors.map(actor => (\n// //                 <MenuItem key={actor._id} value={actor._id}>\n// //                   {actor.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.actors && formik.errors.actors && (\n// //               <FormHelperText>{formik.errors.actors}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <Button\n// //             variant=\"contained\"\n// //             type=\"submit\"\n// //             disabled={loading}\n// //             size=\"large\"\n// //             sx={{ mt: 2 }}\n// //           >\n// //             {loading ? (\n// //               <CircularProgress size={24} sx={{ color: 'white' }} />\n// //             ) : (\n// //               'Add Movie'\n// //             )}\n// //           </Button>\n// //         </Box>\n// //       </Box>\n// //     </Container>\n// //   );\n// // };\n\n// // export default AddMovie;\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = url;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const isImageValid = await validateImageUrl(values.poster);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         await api.movies.add(values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         setImageLoading(true);\n//         setPreviewUrl(url);\n//         const isValid = await validateImageUrl(url);\n//         setImageError(!isValid);\n//       } else {\n//         setPreviewUrl(\"\");\n//         setImageError(false);\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a valid URL\"\n//                 }\n//               />\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Alert, Container, Box, Typography, Chip, OutlinedInput, FormHelperText, Paper, IconButton, Tooltip } from \"@mui/material\";\nimport { Info as InfoIcon } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nconst movieValidationSchema = yup.object({\n  name: yup.string().required(\"Movie name is required\").min(3, \"Movie name must be at least 3 characters\").max(100, \"Movie name must not exceed 100 characters\").trim(),\n  desc: yup.string().required(\"Description is required\").min(10, \"Description must be at least 10 characters\").max(2000, \"Description must not exceed 2000 characters\").trim(),\n  director: yup.string().required(\"Director name is required\").min(3, \"Director name must be at least 3 characters\").max(100, \"Director name must not exceed 100 characters\").trim(),\n  poster: yup.string().url(\"Must be a valid URL\") // Optional, but must be a valid URL if provided\n  .trim(),\n  yearOfRelease: yup.number().required(\"Release year is required\").min(1888, \"Year must be 1888 or later\").max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup.string().required(\"Producer selection is required\"),\n  actors: yup.array().min(1, \"Please select at least one actor\").max(20, \"Cannot select more than 20 actors\").required(\"Actor selection is required\")\n});\nconst AddMovie = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const [imageError, setImageError] = useState(false);\n  const [imageLoading, setImageLoading] = useState(false);\n  const validateImageUrl = useCallback(async url => {\n    if (!url) return true; // If URL is empty, it's optional and valid\n\n    setImageLoading(true);\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        setImageLoading(false);\n        resolve(true);\n      };\n      img.onerror = () => {\n        setImageLoading(false);\n        resolve(false);\n      };\n      img.src = url;\n    });\n  }, []);\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async values => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Validate the poster URL if provided\n        if (values.poster) {\n          const isImageValid = await validateImageUrl(values.poster);\n          if (!isImageValid) {\n            formik.setFieldError('poster', 'Unable to load image from this URL');\n            setLoading(false);\n            return;\n          }\n        }\n\n        // Submit the form data\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        var _err$response, _err$response$data;\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n  useEffect(() => {\n    const validateAndSetPreview = async () => {\n      const url = formik.values.poster;\n      if (url) {\n        setImageLoading(true);\n        setPreviewUrl(url);\n        const isValid = await validateImageUrl(url);\n        setImageError(!isValid);\n      } else {\n        setPreviewUrl(\"\");\n        setImageError(false);\n      }\n    };\n    validateAndSetPreview();\n  }, [formik.values.poster, validateImageUrl]);\n  const loadInitialData = async () => {\n    try {\n      setInitialLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([api.producers.getAll(), api.actors.getAll()]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n  if (initialLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1504,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1503,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: formik.handleSubmit,\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Add New Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1512,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'grid',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Movie Name\",\n          ...formik.getFieldProps('name'),\n          error: formik.touched.name && Boolean(formik.errors.name),\n          helperText: formik.touched.name && formik.errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1523,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          label: \"Description\",\n          ...formik.getFieldProps('desc'),\n          error: formik.touched.desc && Boolean(formik.errors.desc),\n          helperText: formik.touched.desc && formik.errors.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Director\",\n          ...formik.getFieldProps('director'),\n          error: formik.touched.director && Boolean(formik.errors.director),\n          helperText: formik.touched.director && formik.errors.director\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1541,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 2,\n            alignItems: 'flex-start'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Poster URL (Optional)\",\n              ...formik.getFieldProps('poster'),\n              error: formik.touched.poster && Boolean(formik.errors.poster),\n              helperText: formik.touched.poster && formik.errors.poster || \"Enter a valid URL (optional)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1551,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1550,\n            columnNumber: 13\n          }, this), (previewUrl || imageLoading) && /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            sx: {\n              p: 1,\n              width: 150,\n              height: 200,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: '#f5f5f5'\n            },\n            children: imageLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1576,\n              columnNumber: 19\n            }, this) : imageError ? /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"error\",\n              align: \"center\",\n              children: \"Failed to load image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1578,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              src: previewUrl,\n              alt: \"Poster preview\",\n              style: {\n                maxWidth: '100%',\n                maxHeight: '100%',\n                objectFit: 'contain'\n              },\n              onError: () => setImageError(true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1582,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1563,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1549,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          type: \"number\",\n          label: \"Year of Release\",\n          ...formik.getFieldProps('yearOfRelease'),\n          error: formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease),\n          helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1597,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.producer && Boolean(formik.errors.producer),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Producer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1610,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            ...formik.getFieldProps('producer'),\n            label: \"Producer\",\n            children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: producer._id,\n              children: producer.name\n            }, producer._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1616,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1611,\n            columnNumber: 13\n          }, this), formik.touched.producer && formik.errors.producer && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.producer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1622,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1606,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.actors && Boolean(formik.errors.actors),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Actors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1630,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            ...formik.getFieldProps('actors'),\n            input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              label: \"Actors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1634,\n              columnNumber: 22\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 0.5\n              },\n              children: selected.map(value => {\n                var _actors$find;\n                return /*#__PURE__*/_jsxDEV(Chip, {\n                  label: (_actors$find = actors.find(actor => actor._id === value)) === null || _actors$find === void 0 ? void 0 : _actors$find.name,\n                  size: \"small\"\n                }, value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1638,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1636,\n              columnNumber: 17\n            }, this),\n            MenuProps: MenuProps,\n            children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: actor._id,\n              children: actor.name\n            }, actor._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1649,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1631,\n            columnNumber: 13\n          }, this), formik.touched.actors && formik.errors.actors && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.actors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1655,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1626,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: loading,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            sx: {\n              color: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1667,\n            columnNumber: 15\n          }, this) : 'Add Movie'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1659,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1522,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1511,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1510,\n    columnNumber: 5\n  }, this);\n};\n_s(AddMovie, \"Q0mfvdJYMKDCLhKkLje4REh+KJA=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = AddMovie;\nexport default AddMovie;\nvar _c;\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useNavigate","api","useFormik","yup","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Alert","Container","Box","Typography","Chip","OutlinedInput","FormHelperText","Paper","IconButton","Tooltip","Info","InfoIcon","jsxDEV","_jsxDEV","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","movieValidationSchema","object","name","string","required","min","max","trim","desc","director","poster","url","yearOfRelease","number","Date","getFullYear","producer","actors","array","AddMovie","_s","navigate","loading","setLoading","initialLoading","setInitialLoading","error","setError","producers","setProducers","setActors","previewUrl","setPreviewUrl","imageError","setImageError","imageLoading","setImageLoading","validateImageUrl","Promise","resolve","img","Image","onload","onerror","src","formik","initialValues","validationSchema","onSubmit","values","isImageValid","setFieldError","movies","add","err","_err$response","_err$response$data","response","data","message","console","loadInitialData","validateAndSetPreview","isValid","producersRes","actorsRes","all","getAll","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","component","handleSubmit","sx","mt","mb","variant","gutterBottom","severity","gap","fullWidth","label","getFieldProps","touched","Boolean","errors","helperText","multiline","rows","flex","elevation","p","height","backgroundColor","size","color","align","alt","objectFit","onError","type","map","value","_id","multiple","input","renderValue","selected","flexWrap","_actors$find","find","actor","disabled","_c","$RefreshReg$"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js"],"sourcesContent":["// // // import React, { useEffect, useState, useCallback } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import { api } from \"./config/api.config\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import {\n// // //   TextField,\n// // //   Button,\n// // //   FormControl,\n// // //   InputLabel,\n// // //   MenuItem,\n// // //   Select,\n// // //   CircularProgress,\n// // //   Alert,\n// // //   Container,\n// // //   Box,\n// // //   Typography,\n// // //   Chip,\n// // //   OutlinedInput,\n// // //   FormHelperText,\n// // //   Paper,\n// // //   IconButton,\n// // //   Tooltip\n// // // } from \"@mui/material\";\n// // // import { Info as InfoIcon } from '@mui/icons-material';\n\n// // // const ITEM_HEIGHT = 48;\n// // // const ITEM_PADDING_TOP = 8;\n// // // const MenuProps = {\n// // //   PaperProps: {\n// // //     style: {\n// // //       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n// // //       width: 250,\n// // //     },\n// // //   },\n// // // };\n\n// // // const ALLOWED_IMAGE_SOURCES = [\n// // //   {\n// // //     domain: 'imgur.com',\n// // //     example: 'https://i.imgur.com/example.jpg',\n// // //     description: 'Imgur'\n// // //   },\n// // //   {\n// // //     domain: 'upload.wikimedia.org',\n// // //     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n// // //     description: 'Wikimedia Commons'\n// // //   },\n// // //   {\n// // //     domain: 'images.unsplash.com',\n// // //     example: 'https://images.unsplash.com/photo-example.jpg',\n// // //     description: 'Unsplash'\n// // //   },\n// // //   {\n// // //     domain: 'res.cloudinary.com',\n// // //     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n// // //     description: 'Cloudinary'\n// // //   },\n// // //   {\n// // //     domain: 'drive.google.com',\n// // //     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n// // //     description: 'Google Drive (public links only)'\n// // //   }\n// // // ];\n\n// // // // Function to convert Google Drive sharing URL to direct image URL\n// // // const convertGoogleDriveURL = (url) => {\n// // //   try {\n// // //     const urlObj = new URL(url);\n// // //     if (urlObj.hostname === 'drive.google.com') {\n// // //       if (url.includes('/file/d/')) {\n// // //         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n// // //         if (fileId) {\n// // //           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n// // //         }\n// // //       } else if (url.includes('uc?export=view&id=')) {\n// // //         return url;\n// // //       }\n// // //     }\n// // //     return url;\n// // //   } catch {\n// // //     return url;\n// // //   }\n// // // };\n\n// // // // Function to validate image URL\n// // // const isValidImageUrl = (url) => {\n// // //   try {\n// // //     const convertedUrl = convertGoogleDriveURL(url);\n// // //     const urlObj = new URL(convertedUrl);\n// // //     const hostname = urlObj.hostname;\n    \n// // //     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n// // //       hostname === domain || hostname.endsWith(`.${domain}`)\n// // //     );\n\n// // //     const isHttps = urlObj.protocol === 'https:';\n\n// // //     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n// // //       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n// // //       urlObj.hostname.endsWith('cloudinary.com');\n\n// // //     return isAllowedDomain && isHttps && hasImageExtension;\n// // //   } catch {\n// // //     return false;\n// // //   }\n// // // };\n\n// // // // Custom Yup test for image URL validation\n// // // yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n// // //   return this.test('test-valid-image-url', errorMessage, function (value) {\n// // //     const { path, createError } = this;\n// // //     return !value || isValidImageUrl(value) || createError({\n// // //       path,\n// // //       message: errorMessage\n// // //     });\n// // //   });\n// // // });\n\n// // // const movieValidationSchema = yup.object({\n// // //   name: yup\n// // //     .string()\n// // //     .required(\"Movie name is required\")\n// // //     .min(3, \"Movie name must be at least 3 characters\")\n// // //     .max(100, \"Movie name must not exceed 100 characters\")\n// // //     .trim(),\n// // //   desc: yup\n// // //     .string()\n// // //     .required(\"Description is required\")\n// // //     .min(10, \"Description must be at least 10 characters\")\n// // //     .max(2000, \"Description must not exceed 2000 characters\")\n// // //     .trim(),\n// // //   director: yup\n// // //     .string()\n// // //     .required(\"Director name is required\")\n// // //     .min(3, \"Director name must be at least 3 characters\")\n// // //     .max(100, \"Director name must not exceed 100 characters\")\n// // //     .trim(),\n// // //   poster: yup\n// // //     .string()\n// // //     .required(\"Poster URL is required\")\n// // //     .url(\"Must be a valid URL\")\n// // //     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n// // //     .trim(),\n// // //   yearOfRelease: yup\n// // //     .number()\n// // //     .required(\"Release year is required\")\n// // //     .min(1888, \"Year must be 1888 or later\")\n// // //     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n// // //   producer: yup\n// // //     .string()\n// // //     .required(\"Producer selection is required\"),\n// // //   actors: yup\n// // //     .array()\n// // //     .min(1, \"Please select at least one actor\")\n// // //     .max(20, \"Cannot select more than 20 actors\")\n// // //     .required(\"Actor selection is required\")\n// // // });\n\n// // // const AddMovie = () => {\n// // //   const navigate = useNavigate();\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [initialLoading, setInitialLoading] = useState(true);\n// // //   const [error, setError] = useState(null);\n// // //   const [producers, setProducers] = useState([]);\n// // //   const [actors, setActors] = useState([]);\n// // //   const [previewUrl, setPreviewUrl] = useState(\"\");\n// // //   const [imageError, setImageError] = useState(false);\n// // //   const [imageLoading, setImageLoading] = useState(false);\n// // //   const [showImageHelp, setShowImageHelp] = useState(false);\n\n// // //   const validateImageUrl = useCallback(async (url) => {\n// // //     if (!url) return false;\n// // //     const convertedUrl = convertGoogleDriveURL(url);\n// // //     if (!isValidImageUrl(convertedUrl)) return false;\n\n// // //     setImageLoading(true);\n// // //     return new Promise((resolve) => {\n// // //       const img = new Image();\n// // //       img.onload = () => {\n// // //         setImageLoading(false);\n// // //         resolve(true);\n// // //       };\n// // //       img.onerror = () => {\n// // //         setImageLoading(false);\n// // //         resolve(false);\n// // //       };\n// // //       img.src = convertedUrl;\n// // //     });\n// // //   }, []);\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: \"\",\n// // //       desc: \"\",\n// // //       director: \"\",\n// // //       poster: \"\",\n// // //       yearOfRelease: new Date().getFullYear(),\n// // //       producer: \"\",\n// // //       actors: []\n// // //     },\n// // //     validationSchema: movieValidationSchema,\n// // //     onSubmit: async (values) => {\n// // //       try {\n// // //         setLoading(true);\n// // //         setError(null);\n\n// // //         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n        \n// // //         const isImageValid = await validateImageUrl(convertedPosterUrl);\n// // //         if (!isImageValid) {\n// // //           formik.setFieldError('poster', 'Unable to load image from this URL');\n// // //           setLoading(false);\n// // //           return;\n// // //         }\n\n// // //         const submitValues = {\n// // //           ...values,\n// // //           poster: convertedPosterUrl\n// // //         };\n\n// // //         await api.movies.add(submitValues);\n// // //         navigate(\"/\");\n// // //       } catch (err) {\n// // //         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n// // //         console.error(\"Add movie error:\", err);\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     }\n// // //   });\n\n// // //   useEffect(() => {\n// // //     loadInitialData();\n// // //   }, []);\n\n// // //   useEffect(() => {\n// // //     const validateAndSetPreview = async () => {\n// // //       const url = formik.values.poster;\n// // //       if (url) {\n// // //         const convertedUrl = convertGoogleDriveURL(url);\n// // //         if (isValidImageUrl(convertedUrl)) {\n// // //           setImageLoading(true);\n// // //           setPreviewUrl(convertedUrl);\n// // //           const isValid = await validateImageUrl(convertedUrl);\n// // //           setImageError(!isValid);\n// // //         } else {\n// // //           setPreviewUrl(\"\");\n// // //           setImageError(false);\n// // //         }\n// // //       }\n// // //     };\n\n// // //     validateAndSetPreview();\n// // //   }, [formik.values.poster, validateImageUrl]);\n\n// // //   const loadInitialData = async () => {\n// // //     try {\n// // //       setInitialLoading(true);\n// // //       const [producersRes, actorsRes] = await Promise.all([\n// // //         api.producers.getAll(),\n// // //         api.actors.getAll()\n// // //       ]);\n// // //       setProducers(producersRes.data);\n// // //       setActors(actorsRes.data);\n// // //     } catch (err) {\n// // //       setError(\"Failed to load producers and actors. Please try again later.\");\n// // //       console.error(\"Load initial data error:\", err);\n// // //     } finally {\n// // //       setInitialLoading(false);\n// // //     }\n// // //   };\n\n// // //   if (initialLoading) {\n// // //     return (\n// // //       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n// // //         <CircularProgress />\n// // //       </Box>\n// // //     );\n// // //   }\n\n// // //   return (\n// // //     <Container maxWidth=\"md\">\n// // //       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n// // //         <Typography variant=\"h4\" gutterBottom>\n// // //           Add New Movie\n// // //         </Typography>\n\n// // //         {error && (\n// // //           <Alert severity=\"error\" sx={{ mb: 2 }}>\n// // //             {error}\n// // //           </Alert>\n// // //         )}\n\n// // //         <Box sx={{ display: 'grid', gap: 2 }}>\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Movie Name\"\n// // //             {...formik.getFieldProps('name')}\n// // //             error={formik.touched.name && Boolean(formik.errors.name)}\n// // //             helperText={formik.touched.name && formik.errors.name}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             multiline\n// // //             rows={4}\n// // //             label=\"Description\"\n// // //             {...formik.getFieldProps('desc')}\n// // //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// // //             helperText={formik.touched.desc && formik.errors.desc}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Director\"\n// // //             {...formik.getFieldProps('director')}\n// // //             error={formik.touched.director && Boolean(formik.errors.director)}\n// // //             helperText={formik.touched.director && formik.errors.director}\n// // //           />\n\n// // //           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n// // //             <Box sx={{ flex: 1 }}>\n// // //               <TextField\n// // //                 fullWidth\n// // //                 label=\"Poster URL\"\n// // //                 {...formik.getFieldProps('poster')}\n// // //                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n// // //                 helperText={\n// // //                   (formik.touched.poster && formik.errors.poster) ||\n// // //                   \"Enter a HTTPS URL from one of the allowed sources\"\n// // //                 }\n// // //                 InputProps={{\n// // //                   endAdornment: (\n// // //                     <Tooltip title=\"Click for allowed image sources\">\n// // //                       <IconButton \n// // //                         size=\"small\" \n// // //                         onClick={() => setShowImageHelp(!showImageHelp)}\n// // //                       >\n// // //                         <InfoIcon />\n// // //                       </IconButton>\n// // //                     </Tooltip>\n// // //                   ),\n// // //                 }}\n// // //               />\n// // //               {showImageHelp && (\n// // //                 <Paper sx={{ mt: 1, p: 2 }}>\n// // //                   <Typography variant=\"subtitle2\" gutterBottom>\n// // //                     Allowed Image Sources:\n// // //                   </Typography>\n// // //                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n// // //                     <Box key={description} sx={{ mb: 1 }}>\n// // //                       <Typography variant=\"body2\" color=\"text.secondary\">\n// // //                         {description}:\n// // //                       </Typography>\n// // //                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n// // //                         Example: {example}\n// // //                       </Typography>\n// // //                     </Box>\n// // //                   ))}\n// // //                 </Paper>\n// // //               )}\n// // //             </Box>\n// // //             {(previewUrl || imageLoading) && (\n// // //               <Paper \n// // //                 elevation={3} \n// // //                 sx={{ \n// // //                   p: 1,\n// // //                   width: 150,\n// // //                   height: 200,\n// // //                   display: 'flex',\n// // //                   alignItems: 'center',\n// // //                   justifyContent: 'center',\n// // //                   backgroundColor: '#f5f5f5'\n// // //                 }}\n// // //               >\n// // //                 {imageLoading ? (\n// // //                   <CircularProgress size={24} />\n// // //                 ) : imageError ? (\n// // //                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n// // //                     Failed to load image\n// // //                   </Typography>\n// // //                 ) : (\n// // //                   <img\n// // //                     src={previewUrl}\n// // //                     alt=\"Poster preview\"\n// // //                     style={{ \n// // //                       maxWidth: '100%',\n// // //                       maxHeight: '100%',\n// // //                       objectFit: 'contain'\n// // //                     }}\n// // //                     onError={() => setImageError(true)}\n// // //                   />\n// // //                 )}\n// // //               </Paper>\n// // //             )}\n// // //           </Box>\n\n// // //           <TextField\n// // //             fullWidth\n// // //             type=\"number\"\n// // //             label=\"Year of Release\"\n// // //             {...formik.getFieldProps('yearOfRelease')}\n// // //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// // //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //           />\n\n// // //           <FormControl \n// // //             fullWidth\n// // //             error={formik.touched.producer && Boolean(formik.errors.producer)}\n// // //           >\n// // //             <InputLabel>Producer</InputLabel>\n// // //             <Select\n// // //               {...formik.getFieldProps('producer')}\n// // //               label=\"Producer\"\n// // //             >\n// // //               {producers.map(producer => (\n// // //                 <MenuItem key={producer._id} value={producer._id}>\n// // //                   {producer.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //             {formik.touched.producer && formik.errors.producer && (\n// // //               <FormHelperText>{formik.errors.producer}</FormHelperText>\n// // //             )}\n// // //           </FormControl>\n\n// // //           <FormControl \n// // //             fullWidth\n// // //             error={formik.touched.actors && Boolean(formik.errors.actors)}\n// // //           >\n// // //             <InputLabel>Actors</InputLabel>\n// // //             <Select\n// // //               multiple\n// // //               {...formik.getFieldProps('actors')}\n// // //               input={<OutlinedInput label=\"Actors\" />}\n// // //               renderValue={(selected) => (\n// // //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n// // //                   {selected.map((value) => (\n// // //                     <Chip\n// // //                       key={value}\n// // //                       label={actors.find(actor => actor._id === value)?.name}\n// // //                       size=\"small\"\n// // //                     />\n// // //                   ))}\n// // //                 </Box>\n// // //               )}\n// // //               MenuProps={MenuProps}\n// // //             >\n// // //               {actors.map(actor => (\n// // //                 <MenuItem key={actor._id} value={actor._id}>\n// // //                   {actor.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //             {formik.touched.actors && formik.errors.actors && (\n// // //               <FormHelperText>{formik.errors.actors}</FormHelperText>\n// // //             )}\n// // //           </FormControl>\n\n// // //           <Button\n// // //             variant=\"contained\"\n// // //             type=\"submit\"\n// // //             disabled={loading}\n// // //             size=\"large\"\n// // //             sx={{ mt: 2 }}\n// // //           >\n// // //             {loading ? (\n// // //               <CircularProgress size={24} sx={{ color: 'white' }} />\n// // //             ) : (\n// // //               'Add Movie'\n// // //             )}\n// // //           </Button>\n// // //         </Box>\n// // //       </Box>\n// // //     </Container>\n// // //   );\n// // // };\n\n// // // export default AddMovie;\n// // import React, { useEffect, useState, useCallback } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import { api } from \"./config/api.config\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import {\n// //   TextField,\n// //   Button,\n// //   FormControl,\n// //   InputLabel,\n// //   MenuItem,\n// //   Select,\n// //   CircularProgress,\n// //   Alert,\n// //   Container,\n// //   Box,\n// //   Typography,\n// //   Chip,\n// //   OutlinedInput,\n// //   FormHelperText,\n// //   Paper,\n// //   IconButton,\n// //   Tooltip\n// // } from \"@mui/material\";\n// // import { Info as InfoIcon } from '@mui/icons-material';\n\n// // const ITEM_HEIGHT = 48;\n// // const ITEM_PADDING_TOP = 8;\n// // const MenuProps = {\n// //   PaperProps: {\n// //     style: {\n// //       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n// //       width: 250,\n// //     },\n// //   },\n// // };\n\n// // const ALLOWED_IMAGE_SOURCES = [\n// //   {\n// //     domain: 'imgur.com',\n// //     example: 'https://i.imgur.com/example.jpg',\n// //     description: 'Imgur'\n// //   },\n// //   {\n// //     domain: 'upload.wikimedia.org',\n// //     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n// //     description: 'Wikimedia Commons'\n// //   },\n// //   {\n// //     domain: 'images.unsplash.com',\n// //     example: 'https://images.unsplash.com/photo-example.jpg',\n// //     description: 'Unsplash'\n// //   },\n// //   {\n// //     domain: 'res.cloudinary.com',\n// //     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n// //     description: 'Cloudinary'\n// //   },\n// //   {\n// //     domain: 'drive.google.com',\n// //     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n// //     description: 'Google Drive (public links only)'\n// //   }\n// // ];\n\n// // // Function to convert Google Drive sharing URL to direct image URL\n// // const convertGoogleDriveURL = (url) => {\n// //   try {\n// //     const urlObj = new URL(url);\n// //     if (urlObj.hostname === 'drive.google.com') {\n// //       if (url.includes('/file/d/')) {\n// //         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n// //         if (fileId) {\n// //           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n// //         }\n// //       } else if (url.includes('uc?export=view&id=')) {\n// //         return url;\n// //       }\n// //     }\n// //     return url;\n// //   } catch {\n// //     return url;\n// //   }\n// // };\n\n// // // Function to validate image URL\n// // const isValidImageUrl = (url) => {\n// //   try {\n// //     const convertedUrl = convertGoogleDriveURL(url);\n// //     const urlObj = new URL(convertedUrl);\n// //     const hostname = urlObj.hostname;\n    \n// //     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n// //       hostname === domain || hostname.endsWith(`.${domain}`)\n// //     );\n\n// //     const isHttps = urlObj.protocol === 'https:';\n\n// //     // Allow any image format from Google Drive\n// //     if (hostname === 'drive.google.com') {\n// //       return isAllowedDomain && isHttps;\n// //     }\n\n// //     // For other domains, check for image extensions\n// //     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n// //       urlObj.hostname.endsWith('cloudinary.com');\n\n// //     return isAllowedDomain && isHttps && hasImageExtension;\n// //   } catch {\n// //     return false;\n// //   }\n// // };\n\n// // // Custom Yup test for image URL validation\n// // yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n// //   return this.test('test-valid-image-url', errorMessage, function (value) {\n// //     const { path, createError } = this;\n// //     return !value || isValidImageUrl(value) || createError({\n// //       path,\n// //       message: errorMessage\n// //     });\n// //   });\n// // });\n\n// // const movieValidationSchema = yup.object({\n// //   name: yup\n// //     .string()\n// //     .required(\"Movie name is required\")\n// //     .min(3, \"Movie name must be at least 3 characters\")\n// //     .max(100, \"Movie name must not exceed 100 characters\")\n// //     .trim(),\n// //   desc: yup\n// //     .string()\n// //     .required(\"Description is required\")\n// //     .min(10, \"Description must be at least 10 characters\")\n// //     .max(2000, \"Description must not exceed 2000 characters\")\n// //     .trim(),\n// //   director: yup\n// //     .string()\n// //     .required(\"Director name is required\")\n// //     .min(3, \"Director name must be at least 3 characters\")\n// //     .max(100, \"Director name must not exceed 100 characters\")\n// //     .trim(),\n// //   poster: yup\n// //     .string()\n// //     .required(\"Poster URL is required\")\n// //     .url(\"Must be a valid URL\")\n// //     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n// //     .trim(),\n// //   yearOfRelease: yup\n// //     .number()\n// //     .required(\"Release year is required\")\n// //     .min(1888, \"Year must be 1888 or later\")\n// //     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n// //   producer: yup\n// //     .string()\n// //     .required(\"Producer selection is required\"),\n// //   actors: yup\n// //     .array()\n// //     .min(1, \"Please select at least one actor\")\n// //     .max(20, \"Cannot select more than 20 actors\")\n// //     .required(\"Actor selection is required\")\n// // });\n\n// // const AddMovie = () => {\n// //   const navigate = useNavigate();\n// //   const [loading, setLoading] = useState(false);\n// //   const [initialLoading, setInitialLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [previewUrl, setPreviewUrl] = useState(\"\");\n// //   const [imageError, setImageError] = useState(false);\n// //   const [imageLoading, setImageLoading] = useState(false);\n// //   const [showImageHelp, setShowImageHelp] = useState(false);\n\n// //   const validateImageUrl = useCallback(async (url) => {\n// //     if (!url) return false;\n// //     const convertedUrl = convertGoogleDriveURL(url);\n// //     if (!isValidImageUrl(convertedUrl)) return false;\n\n// //     setImageLoading(true);\n// //     return new Promise((resolve) => {\n// //       const img = new Image();\n// //       img.onload = () => {\n// //         setImageLoading(false);\n// //         resolve(true);\n// //       };\n// //       img.onerror = () => {\n// //         setImageLoading(false);\n// //         resolve(false);\n// //       };\n// //       img.src = convertedUrl;\n// //     });\n// //   }, []);\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: \"\",\n// //       desc: \"\",\n// //       director: \"\",\n// //       poster: \"\",\n// //       yearOfRelease: new Date().getFullYear(),\n// //       producer: \"\",\n// //       actors: []\n// //     },\n// //     validationSchema: movieValidationSchema,\n// //     onSubmit: async (values) => {\n// //       try {\n// //         setLoading(true);\n// //         setError(null);\n\n// //         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n        \n// //         const isImageValid = await validateImageUrl(convertedPosterUrl);\n// //         if (!isImageValid) {\n// //           formik.setFieldError('poster', 'Unable to load image from this URL');\n// //           setLoading(false);\n// //           return;\n// //         }\n\n// //         const submitValues = {\n// //           ...values,\n// //           poster: convertedPosterUrl\n// //         };\n\n// //         await api.movies.add(submitValues);\n// //         navigate(\"/\");\n// //       } catch (err) {\n// //         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n// //         console.error(\"Add movie error:\", err);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     }\n// //   });\n\n// //   useEffect(() => {\n// //     loadInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     const validateAndSetPreview = async () => {\n// //       const url = formik.values.poster;\n// //       if (url) {\n// //         const convertedUrl = convertGoogleDriveURL(url);\n// //         if (isValidImageUrl(convertedUrl)) {\n// //           setImageLoading(true);\n// //           setPreviewUrl(convertedUrl);\n// //           const isValid = await validateImageUrl(convertedUrl);\n// //           setImageError(!isValid);\n// //         } else {\n// //           setPreviewUrl(\"\");\n// //           setImageError(false);\n// //         }\n// //       }\n// //     };\n\n// //     validateAndSetPreview();\n// //   }, [formik.values.poster, validateImageUrl]);\n\n// //   const loadInitialData = async () => {\n// //     try {\n// //       setInitialLoading(true);\n// //       const [producersRes, actorsRes] = await Promise.all([\n// //         api.producers.getAll(),\n// //         api.actors.getAll()\n// //       ]);\n// //       setProducers(producersRes.data);\n// //       setActors(actorsRes.data);\n// //     } catch (err) {\n// //       setError(\"Failed to load producers and actors. Please try again later.\");\n// //       console.error(\"Load initial data error:\", err);\n// //     } finally {\n// //       setInitialLoading(false);\n// //     }\n// //   };\n\n// //   if (initialLoading) {\n// //     return (\n// //       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Container maxWidth=\"md\">\n// //       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n// //         <Typography variant=\"h4\" gutterBottom>\n// //           Add New Movie\n// //         </Typography>\n\n// //         {error && (\n// //           <Alert severity=\"error\" sx={{ mb: 2 }}>\n// //             {error}\n// //           </Alert>\n// //         )}\n\n// //         <Box sx={{ display: 'grid', gap: 2 }}>\n// //           <TextField\n// //             fullWidth\n// //             label=\"Movie Name\"\n// //             {...formik.getFieldProps('name')}\n// //             error={formik.touched.name && Boolean(formik.errors.name)}\n// //             helperText={formik.touched.name && formik.errors.name}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             multiline\n// //             rows={4}\n// //             label=\"Description\"\n// //             {...formik.getFieldProps('desc')}\n// //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// //             helperText={formik.touched.desc && formik.errors.desc}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             label=\"Director\"\n// //             {...formik.getFieldProps('director')}\n// //             error={formik.touched.director && Boolean(formik.errors.director)}\n// //             helperText={formik.touched.director && formik.errors.director}\n// //           />\n\n// //           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n// //             <Box sx={{ flex: 1 }}>\n// //               <TextField\n// //                 fullWidth\n// //                 label=\"Poster URL\"\n// //                 {...formik.getFieldProps('poster')}\n// //                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n// //                 helperText={\n// //                   (formik.touched.poster && formik.errors.poster) ||\n// //                   \"Enter a HTTPS URL from one of the allowed sources\"\n// //                 }\n// //                 InputProps={{\n// //                   endAdornment: (\n// //                     <Tooltip title=\"Click for allowed image sources\">\n// //                       <IconButton \n// //                         size=\"small\" \n// //                         onClick={() => setShowImageHelp(!showImageHelp)}\n// //                       >\n// //                         <InfoIcon />\n// //                       </IconButton>\n// //                     </Tooltip>\n// //                   ),\n// //                 }}\n// //               />\n// //               {showImageHelp && (\n// //                 <Paper sx={{ mt: 1, p: 2 }}>\n// //                   <Typography variant=\"subtitle2\" gutterBottom>\n// //                     Allowed Image Sources:\n// //                   </Typography>\n// //                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n// //                     <Box key={description} sx={{ mb: 1 }}>\n// //                       <Typography variant=\"body2\" color=\"text.secondary\">\n// //                         {description}:\n// //                       </Typography>\n// //                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n// //                         Example: {example}\n// //                       </Typography>\n// //                     </Box>\n// //                   ))}\n// //                 </Paper>\n// //               )}\n// //             </Box>\n// //             {(previewUrl || imageLoading) && (\n// //               <Paper \n// //                 elevation={3} \n// //                 sx={{ \n// //                   p: 1,\n// //                   width: 150,\n// //                   height: 200,\n// //                   display: 'flex',\n// //                   alignItems: 'center',\n// //                   justifyContent: 'center',\n// //                   backgroundColor: '#f5f5f5'\n// //                 }}\n// //               >\n// //                 {imageLoading ? (\n// //                   <CircularProgress size={24} />\n// //                 ) : imageError ? (\n// //                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n// //                     Failed to load image\n// //                   </Typography>\n// //                 ) : (\n// //                   <img\n// //                     src={previewUrl}\n// //                     alt=\"Poster preview\"\n// //                     style={{ \n// //                       maxWidth: '100%',\n// //                       maxHeight: '100%',\n// //                       objectFit: 'contain'\n// //                     }}\n// //                     onError={() => setImageError(true)}\n// //                   />\n// //                 )}\n// //               </Paper>\n// //             )}\n// //           </Box>\n\n// //           <TextField\n// //             fullWidth\n// //             type=\"number\"\n// //             label=\"Year of Release\"\n// //             {...formik.getFieldProps('yearOfRelease')}\n// //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// //           />\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.producer && Boolean(formik.errors.producer)}\n// //           >\n// //             <InputLabel>Producer</InputLabel>\n// //             <Select\n// //               {...formik.getFieldProps('producer')}\n// //               label=\"Producer\"\n// //             >\n// //               {producers.map(producer => (\n// //                 <MenuItem key={producer._id} value={producer._id}>\n// //                   {producer.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.producer && formik.errors.producer && (\n// //               <FormHelperText>{formik.errors.producer}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.actors && Boolean(formik.errors.actors)}\n// //           >\n// //             <InputLabel>Actors</InputLabel>\n// //             <Select\n// //               multiple\n// //               {...formik.getFieldProps('actors')}\n// //               input={<OutlinedInput label=\"Actors\" />}\n// //               renderValue={(selected) => (\n// //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n// //                   {selected.map((value) => (\n// //                     <Chip\n// //                       key={value}\n// //                       label={actors.find(actor => actor._id === value)?.name}\n// //                       size=\"small\"\n// //                     />\n// //                   ))}\n// //                 </Box>\n// //               )}\n// //               MenuProps={MenuProps}\n// //             >\n// //               {actors.map(actor => (\n// //                 <MenuItem key={actor._id} value={actor._id}>\n// //                   {actor.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.actors && formik.errors.actors && (\n// //               <FormHelperText>{formik.errors.actors}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <Button\n// //             variant=\"contained\"\n// //             type=\"submit\"\n// //             disabled={loading}\n// //             size=\"large\"\n// //             sx={{ mt: 2 }}\n// //           >\n// //             {loading ? (\n// //               <CircularProgress size={24} sx={{ color: 'white' }} />\n// //             ) : (\n// //               'Add Movie'\n// //             )}\n// //           </Button>\n// //         </Box>\n// //       </Box>\n// //     </Container>\n// //   );\n// // };\n\n// // export default AddMovie;\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = url;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const isImageValid = await validateImageUrl(values.poster);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         await api.movies.add(values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         setImageLoading(true);\n//         setPreviewUrl(url);\n//         const isValid = await validateImageUrl(url);\n//         setImageError(!isValid);\n//       } else {\n//         setPreviewUrl(\"\");\n//         setImageError(false);\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a valid URL\"\n//                 }\n//               />\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  CircularProgress,\n  Alert,\n  Container,\n  Box,\n  Typography,\n  Chip,\n  OutlinedInput,\n  FormHelperText,\n  Paper,\n  IconButton,\n  Tooltip\n} from \"@mui/material\";\nimport { Info as InfoIcon } from '@mui/icons-material';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst movieValidationSchema = yup.object({\n  name: yup\n    .string()\n    .required(\"Movie name is required\")\n    .min(3, \"Movie name must be at least 3 characters\")\n    .max(100, \"Movie name must not exceed 100 characters\")\n    .trim(),\n  desc: yup\n    .string()\n    .required(\"Description is required\")\n    .min(10, \"Description must be at least 10 characters\")\n    .max(2000, \"Description must not exceed 2000 characters\")\n    .trim(),\n  director: yup\n    .string()\n    .required(\"Director name is required\")\n    .min(3, \"Director name must be at least 3 characters\")\n    .max(100, \"Director name must not exceed 100 characters\")\n    .trim(),\n  poster: yup\n    .string()\n    .url(\"Must be a valid URL\") // Optional, but must be a valid URL if provided\n    .trim(),\n  yearOfRelease: yup\n    .number()\n    .required(\"Release year is required\")\n    .min(1888, \"Year must be 1888 or later\")\n    .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup\n    .string()\n    .required(\"Producer selection is required\"),\n  actors: yup\n    .array()\n    .min(1, \"Please select at least one actor\")\n    .max(20, \"Cannot select more than 20 actors\")\n    .required(\"Actor selection is required\")\n});\n\nconst AddMovie = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const [imageError, setImageError] = useState(false);\n  const [imageLoading, setImageLoading] = useState(false);\n\n  const validateImageUrl = useCallback(async (url) => {\n    if (!url) return true; // If URL is empty, it's optional and valid\n\n    setImageLoading(true);\n    return new Promise((resolve) => {\n      const img = new Image();\n      img.onload = () => {\n        setImageLoading(false);\n        resolve(true);\n      };\n      img.onerror = () => {\n        setImageLoading(false);\n        resolve(false);\n      };\n      img.src = url;\n    });\n  }, []);\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (values) => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Validate the poster URL if provided\n        if (values.poster) {\n          const isImageValid = await validateImageUrl(values.poster);\n          if (!isImageValid) {\n            formik.setFieldError('poster', 'Unable to load image from this URL');\n            setLoading(false);\n            return;\n          }\n        }\n\n        // Submit the form data\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  useEffect(() => {\n    const validateAndSetPreview = async () => {\n      const url = formik.values.poster;\n      if (url) {\n        setImageLoading(true);\n        setPreviewUrl(url);\n        const isValid = await validateImageUrl(url);\n        setImageError(!isValid);\n      } else {\n        setPreviewUrl(\"\");\n        setImageError(false);\n      }\n    };\n\n    validateAndSetPreview();\n  }, [formik.values.poster, validateImageUrl]);\n\n  const loadInitialData = async () => {\n    try {\n      setInitialLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([\n        api.producers.getAll(),\n        api.actors.getAll()\n      ]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n\n  if (initialLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Add New Movie\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Box sx={{ display: 'grid', gap: 2 }}>\n          <TextField\n            fullWidth\n            label=\"Movie Name\"\n            {...formik.getFieldProps('name')}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            label=\"Description\"\n            {...formik.getFieldProps('desc')}\n            error={formik.touched.desc && Boolean(formik.errors.desc)}\n            helperText={formik.touched.desc && formik.errors.desc}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Director\"\n            {...formik.getFieldProps('director')}\n            error={formik.touched.director && Boolean(formik.errors.director)}\n            helperText={formik.touched.director && formik.errors.director}\n          />\n\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n            <Box sx={{ flex: 1 }}>\n              <TextField\n                fullWidth\n                label=\"Poster URL (Optional)\"\n                {...formik.getFieldProps('poster')}\n                error={formik.touched.poster && Boolean(formik.errors.poster)}\n                helperText={\n                  (formik.touched.poster && formik.errors.poster) ||\n                  \"Enter a valid URL (optional)\"\n                }\n              />\n            </Box>\n            {(previewUrl || imageLoading) && (\n              <Paper \n                elevation={3} \n                sx={{ \n                  p: 1,\n                  width: 150,\n                  height: 200,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  backgroundColor: '#f5f5f5'\n                }}\n              >\n                {imageLoading ? (\n                  <CircularProgress size={24} />\n                ) : imageError ? (\n                  <Typography variant=\"caption\" color=\"error\" align=\"center\">\n                    Failed to load image\n                  </Typography>\n                ) : (\n                  <img\n                    src={previewUrl}\n                    alt=\"Poster preview\"\n                    style={{ \n                      maxWidth: '100%',\n                      maxHeight: '100%',\n                      objectFit: 'contain'\n                    }}\n                    onError={() => setImageError(true)}\n                  />\n                )}\n              </Paper>\n            )}\n          </Box>\n\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"Year of Release\"\n            {...formik.getFieldProps('yearOfRelease')}\n            error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n            helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n          />\n\n          <FormControl \n            fullWidth\n            error={formik.touched.producer && Boolean(formik.errors.producer)}\n          >\n            <InputLabel>Producer</InputLabel>\n            <Select\n              {...formik.getFieldProps('producer')}\n              label=\"Producer\"\n            >\n              {producers.map(producer => (\n                <MenuItem key={producer._id} value={producer._id}>\n                  {producer.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.producer && formik.errors.producer && (\n              <FormHelperText>{formik.errors.producer}</FormHelperText>\n            )}\n          </FormControl>\n\n          <FormControl \n            fullWidth\n            error={formik.touched.actors && Boolean(formik.errors.actors)}\n          >\n            <InputLabel>Actors</InputLabel>\n            <Select\n              multiple\n              {...formik.getFieldProps('actors')}\n              input={<OutlinedInput label=\"Actors\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip\n                      key={value}\n                      label={actors.find(actor => actor._id === value)?.name}\n                      size=\"small\"\n                    />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >\n              {actors.map(actor => (\n                <MenuItem key={actor._id} value={actor._id}>\n                  {actor.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.actors && formik.errors.actors && (\n              <FormHelperText>{formik.errors.actors}</FormHelperText>\n            )}\n          </FormControl>\n\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            disabled={loading}\n            size=\"large\"\n            sx={{ mt: 2 }}\n          >\n            {loading ? (\n              <CircularProgress size={24} sx={{ color: 'white' }} />\n            ) : (\n              'Add Movie'\n            )}\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AddMovie;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,qBAAqB;AACzC,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SACEC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,KAAK,EACLC,SAAS,EACTC,GAAG,EACHC,UAAU,EACVC,IAAI,EACJC,aAAa,EACbC,cAAc,EACdC,KAAK,EACLC,UAAU,EACVC,OAAO,QACF,eAAe;AACtB,SAASC,IAAI,IAAIC,QAAQ,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,WAAW,GAAG,EAAE;AACtB,MAAMC,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,SAAS,GAAG;EAChBC,UAAU,EAAE;IACVC,KAAK,EAAE;MACLC,SAAS,EAAEL,WAAW,GAAG,GAAG,GAAGC,gBAAgB;MAC/CK,KAAK,EAAE;IACT;EACF;AACF,CAAC;AAED,MAAMC,qBAAqB,GAAG7B,GAAG,CAAC8B,MAAM,CAAC;EACvCC,IAAI,EAAE/B,GAAG,CACNgC,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,wBAAwB,CAAC,CAClCC,GAAG,CAAC,CAAC,EAAE,0CAA0C,CAAC,CAClDC,GAAG,CAAC,GAAG,EAAE,2CAA2C,CAAC,CACrDC,IAAI,CAAC,CAAC;EACTC,IAAI,EAAErC,GAAG,CACNgC,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,yBAAyB,CAAC,CACnCC,GAAG,CAAC,EAAE,EAAE,4CAA4C,CAAC,CACrDC,GAAG,CAAC,IAAI,EAAE,6CAA6C,CAAC,CACxDC,IAAI,CAAC,CAAC;EACTE,QAAQ,EAAEtC,GAAG,CACVgC,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,2BAA2B,CAAC,CACrCC,GAAG,CAAC,CAAC,EAAE,6CAA6C,CAAC,CACrDC,GAAG,CAAC,GAAG,EAAE,8CAA8C,CAAC,CACxDC,IAAI,CAAC,CAAC;EACTG,MAAM,EAAEvC,GAAG,CACRgC,MAAM,CAAC,CAAC,CACRQ,GAAG,CAAC,qBAAqB,CAAC,CAAC;EAAA,CAC3BJ,IAAI,CAAC,CAAC;EACTK,aAAa,EAAEzC,GAAG,CACf0C,MAAM,CAAC,CAAC,CACRT,QAAQ,CAAC,0BAA0B,CAAC,CACpCC,GAAG,CAAC,IAAI,EAAE,4BAA4B,CAAC,CACvCC,GAAG,CAAC,IAAIQ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,gDAAgD,CAAC;EACtFC,QAAQ,EAAE7C,GAAG,CACVgC,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,gCAAgC,CAAC;EAC7Ca,MAAM,EAAE9C,GAAG,CACR+C,KAAK,CAAC,CAAC,CACPb,GAAG,CAAC,CAAC,EAAE,kCAAkC,CAAC,CAC1CC,GAAG,CAAC,EAAE,EAAE,mCAAmC,CAAC,CAC5CF,QAAQ,CAAC,6BAA6B;AAC3C,CAAC,CAAC;AAEF,MAAMe,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGrD,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACsD,OAAO,EAAEC,UAAU,CAAC,GAAGzD,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC0D,cAAc,EAAEC,iBAAiB,CAAC,GAAG3D,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAAC4D,KAAK,EAAEC,QAAQ,CAAC,GAAG7D,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC8D,SAAS,EAAEC,YAAY,CAAC,GAAG/D,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmD,MAAM,EAAEa,SAAS,CAAC,GAAGhE,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiE,UAAU,EAAEC,aAAa,CAAC,GAAGlE,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmE,UAAU,EAAEC,aAAa,CAAC,GAAGpE,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACqE,YAAY,EAAEC,eAAe,CAAC,GAAGtE,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMuE,gBAAgB,GAAGtE,WAAW,CAAC,MAAO4C,GAAG,IAAK;IAClD,IAAI,CAACA,GAAG,EAAE,OAAO,IAAI,CAAC,CAAC;;IAEvByB,eAAe,CAAC,IAAI,CAAC;IACrB,OAAO,IAAIE,OAAO,CAAEC,OAAO,IAAK;MAC9B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,MAAM,GAAG,MAAM;QACjBN,eAAe,CAAC,KAAK,CAAC;QACtBG,OAAO,CAAC,IAAI,CAAC;MACf,CAAC;MACDC,GAAG,CAACG,OAAO,GAAG,MAAM;QAClBP,eAAe,CAAC,KAAK,CAAC;QACtBG,OAAO,CAAC,KAAK,CAAC;MAChB,CAAC;MACDC,GAAG,CAACI,GAAG,GAAGjC,GAAG;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkC,MAAM,GAAG3E,SAAS,CAAC;IACvB4E,aAAa,EAAE;MACb5C,IAAI,EAAE,EAAE;MACRM,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVE,aAAa,EAAE,IAAIE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACvCC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE;IACV,CAAC;IACD8B,gBAAgB,EAAE/C,qBAAqB;IACvCgD,QAAQ,EAAE,MAAOC,MAAM,IAAK;MAC1B,IAAI;QACF1B,UAAU,CAAC,IAAI,CAAC;QAChBI,QAAQ,CAAC,IAAI,CAAC;;QAEd;QACA,IAAIsB,MAAM,CAACvC,MAAM,EAAE;UACjB,MAAMwC,YAAY,GAAG,MAAMb,gBAAgB,CAACY,MAAM,CAACvC,MAAM,CAAC;UAC1D,IAAI,CAACwC,YAAY,EAAE;YACjBL,MAAM,CAACM,aAAa,CAAC,QAAQ,EAAE,oCAAoC,CAAC;YACpE5B,UAAU,CAAC,KAAK,CAAC;YACjB;UACF;QACF;;QAEA;QACA,MAAMtD,GAAG,CAACmF,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC;QAC5B5B,QAAQ,CAAC,GAAG,CAAC;MACf,CAAC,CAAC,OAAOiC,GAAG,EAAE;QAAA,IAAAC,aAAA,EAAAC,kBAAA;QACZ7B,QAAQ,CAAC,EAAA4B,aAAA,GAAAD,GAAG,CAACG,QAAQ,cAAAF,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcG,IAAI,cAAAF,kBAAA,uBAAlBA,kBAAA,CAAoBG,OAAO,KAAI,wCAAwC,CAAC;QACjFC,OAAO,CAAClC,KAAK,CAAC,kBAAkB,EAAE4B,GAAG,CAAC;MACxC,CAAC,SAAS;QACR/B,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC,CAAC;EAEF1D,SAAS,CAAC,MAAM;IACdgG,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAENhG,SAAS,CAAC,MAAM;IACd,MAAMiG,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,MAAMnD,GAAG,GAAGkC,MAAM,CAACI,MAAM,CAACvC,MAAM;MAChC,IAAIC,GAAG,EAAE;QACPyB,eAAe,CAAC,IAAI,CAAC;QACrBJ,aAAa,CAACrB,GAAG,CAAC;QAClB,MAAMoD,OAAO,GAAG,MAAM1B,gBAAgB,CAAC1B,GAAG,CAAC;QAC3CuB,aAAa,CAAC,CAAC6B,OAAO,CAAC;MACzB,CAAC,MAAM;QACL/B,aAAa,CAAC,EAAE,CAAC;QACjBE,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC;IAED4B,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACjB,MAAM,CAACI,MAAM,CAACvC,MAAM,EAAE2B,gBAAgB,CAAC,CAAC;EAE5C,MAAMwB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACFpC,iBAAiB,CAAC,IAAI,CAAC;MACvB,MAAM,CAACuC,YAAY,EAAEC,SAAS,CAAC,GAAG,MAAM3B,OAAO,CAAC4B,GAAG,CAAC,CAClDjG,GAAG,CAAC2D,SAAS,CAACuC,MAAM,CAAC,CAAC,EACtBlG,GAAG,CAACgD,MAAM,CAACkD,MAAM,CAAC,CAAC,CACpB,CAAC;MACFtC,YAAY,CAACmC,YAAY,CAACN,IAAI,CAAC;MAC/B5B,SAAS,CAACmC,SAAS,CAACP,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZ3B,QAAQ,CAAC,8DAA8D,CAAC;MACxEiC,OAAO,CAAClC,KAAK,CAAC,0BAA0B,EAAE4B,GAAG,CAAC;IAChD,CAAC,SAAS;MACR7B,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,IAAID,cAAc,EAAE;IAClB,oBACEhC,OAAA,CAACX,GAAG;MAACuF,OAAO,EAAC,MAAM;MAACC,cAAc,EAAC,QAAQ;MAACC,UAAU,EAAC,QAAQ;MAACC,SAAS,EAAC,MAAM;MAAAC,QAAA,eAC9EhF,OAAA,CAACd,gBAAgB;QAAA+F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEV;EAEA,oBACEpF,OAAA,CAACZ,SAAS;IAACiG,QAAQ,EAAC,IAAI;IAAAL,QAAA,eACtBhF,OAAA,CAACX,GAAG;MAACiG,SAAS,EAAC,MAAM;MAAC9B,QAAQ,EAAEH,MAAM,CAACkC,YAAa;MAACC,EAAE,EAAE;QAAEC,EAAE,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAV,QAAA,gBACxEhF,OAAA,CAACV,UAAU;QAACqG,OAAO,EAAC,IAAI;QAACC,YAAY;QAAAZ,QAAA,EAAC;MAEtC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EAEZlD,KAAK,iBACJlC,OAAA,CAACb,KAAK;QAAC0G,QAAQ,EAAC,OAAO;QAACL,EAAE,EAAE;UAAEE,EAAE,EAAE;QAAE,CAAE;QAAAV,QAAA,EACnC9C;MAAK;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR,eAEDpF,OAAA,CAACX,GAAG;QAACmG,EAAE,EAAE;UAAEZ,OAAO,EAAE,MAAM;UAAEkB,GAAG,EAAE;QAAE,CAAE;QAAAd,QAAA,gBACnChF,OAAA,CAACpB,SAAS;UACRmH,SAAS;UACTC,KAAK,EAAC,YAAY;UAAA,GACd3C,MAAM,CAAC4C,aAAa,CAAC,MAAM,CAAC;UAChC/D,KAAK,EAAEmB,MAAM,CAAC6C,OAAO,CAACxF,IAAI,IAAIyF,OAAO,CAAC9C,MAAM,CAAC+C,MAAM,CAAC1F,IAAI,CAAE;UAC1D2F,UAAU,EAAEhD,MAAM,CAAC6C,OAAO,CAACxF,IAAI,IAAI2C,MAAM,CAAC+C,MAAM,CAAC1F;QAAK;UAAAuE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC,eAEFpF,OAAA,CAACpB,SAAS;UACRmH,SAAS;UACTO,SAAS;UACTC,IAAI,EAAE,CAAE;UACRP,KAAK,EAAC,aAAa;UAAA,GACf3C,MAAM,CAAC4C,aAAa,CAAC,MAAM,CAAC;UAChC/D,KAAK,EAAEmB,MAAM,CAAC6C,OAAO,CAAClF,IAAI,IAAImF,OAAO,CAAC9C,MAAM,CAAC+C,MAAM,CAACpF,IAAI,CAAE;UAC1DqF,UAAU,EAAEhD,MAAM,CAAC6C,OAAO,CAAClF,IAAI,IAAIqC,MAAM,CAAC+C,MAAM,CAACpF;QAAK;UAAAiE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC,eAEFpF,OAAA,CAACpB,SAAS;UACRmH,SAAS;UACTC,KAAK,EAAC,UAAU;UAAA,GACZ3C,MAAM,CAAC4C,aAAa,CAAC,UAAU,CAAC;UACpC/D,KAAK,EAAEmB,MAAM,CAAC6C,OAAO,CAACjF,QAAQ,IAAIkF,OAAO,CAAC9C,MAAM,CAAC+C,MAAM,CAACnF,QAAQ,CAAE;UAClEoF,UAAU,EAAEhD,MAAM,CAAC6C,OAAO,CAACjF,QAAQ,IAAIoC,MAAM,CAAC+C,MAAM,CAACnF;QAAS;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,eAEFpF,OAAA,CAACX,GAAG;UAACmG,EAAE,EAAE;YAAEZ,OAAO,EAAE,MAAM;YAAEkB,GAAG,EAAE,CAAC;YAAEhB,UAAU,EAAE;UAAa,CAAE;UAAAE,QAAA,gBAC7DhF,OAAA,CAACX,GAAG;YAACmG,EAAE,EAAE;cAAEgB,IAAI,EAAE;YAAE,CAAE;YAAAxB,QAAA,eACnBhF,OAAA,CAACpB,SAAS;cACRmH,SAAS;cACTC,KAAK,EAAC,uBAAuB;cAAA,GACzB3C,MAAM,CAAC4C,aAAa,CAAC,QAAQ,CAAC;cAClC/D,KAAK,EAAEmB,MAAM,CAAC6C,OAAO,CAAChF,MAAM,IAAIiF,OAAO,CAAC9C,MAAM,CAAC+C,MAAM,CAAClF,MAAM,CAAE;cAC9DmF,UAAU,EACPhD,MAAM,CAAC6C,OAAO,CAAChF,MAAM,IAAImC,MAAM,CAAC+C,MAAM,CAAClF,MAAM,IAC9C;YACD;cAAA+D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,EACL,CAAC7C,UAAU,IAAII,YAAY,kBAC1B3C,OAAA,CAACN,KAAK;YACJ+G,SAAS,EAAE,CAAE;YACbjB,EAAE,EAAE;cACFkB,CAAC,EAAE,CAAC;cACJnG,KAAK,EAAE,GAAG;cACVoG,MAAM,EAAE,GAAG;cACX/B,OAAO,EAAE,MAAM;cACfE,UAAU,EAAE,QAAQ;cACpBD,cAAc,EAAE,QAAQ;cACxB+B,eAAe,EAAE;YACnB,CAAE;YAAA5B,QAAA,EAEDrC,YAAY,gBACX3C,OAAA,CAACd,gBAAgB;cAAC2H,IAAI,EAAE;YAAG;cAAA5B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,GAC5B3C,UAAU,gBACZzC,OAAA,CAACV,UAAU;cAACqG,OAAO,EAAC,SAAS;cAACmB,KAAK,EAAC,OAAO;cAACC,KAAK,EAAC,QAAQ;cAAA/B,QAAA,EAAC;YAE3D;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,gBAEbpF,OAAA;cACEoD,GAAG,EAAEb,UAAW;cAChByE,GAAG,EAAC,gBAAgB;cACpB3G,KAAK,EAAE;gBACLgF,QAAQ,EAAE,MAAM;gBAChB/E,SAAS,EAAE,MAAM;gBACjB2G,SAAS,EAAE;cACb,CAAE;cACFC,OAAO,EAAEA,CAAA,KAAMxE,aAAa,CAAC,IAAI;YAAE;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UACF;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CACR;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAENpF,OAAA,CAACpB,SAAS;UACRmH,SAAS;UACToB,IAAI,EAAC,QAAQ;UACbnB,KAAK,EAAC,iBAAiB;UAAA,GACnB3C,MAAM,CAAC4C,aAAa,CAAC,eAAe,CAAC;UACzC/D,KAAK,EAAEmB,MAAM,CAAC6C,OAAO,CAAC9E,aAAa,IAAI+E,OAAO,CAAC9C,MAAM,CAAC+C,MAAM,CAAChF,aAAa,CAAE;UAC5EiF,UAAU,EAAEhD,MAAM,CAAC6C,OAAO,CAAC9E,aAAa,IAAIiC,MAAM,CAAC+C,MAAM,CAAChF;QAAc;UAAA6D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzE,CAAC,eAEFpF,OAAA,CAAClB,WAAW;UACViH,SAAS;UACT7D,KAAK,EAAEmB,MAAM,CAAC6C,OAAO,CAAC1E,QAAQ,IAAI2E,OAAO,CAAC9C,MAAM,CAAC+C,MAAM,CAAC5E,QAAQ,CAAE;UAAAwD,QAAA,gBAElEhF,OAAA,CAACjB,UAAU;YAAAiG,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACjCpF,OAAA,CAACf,MAAM;YAAA,GACDoE,MAAM,CAAC4C,aAAa,CAAC,UAAU,CAAC;YACpCD,KAAK,EAAC,UAAU;YAAAhB,QAAA,EAEf5C,SAAS,CAACgF,GAAG,CAAC5F,QAAQ,iBACrBxB,OAAA,CAAChB,QAAQ;cAAoBqI,KAAK,EAAE7F,QAAQ,CAAC8F,GAAI;cAAAtC,QAAA,EAC9CxD,QAAQ,CAACd;YAAI,GADDc,QAAQ,CAAC8F,GAAG;cAAArC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjB,CACX;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC,EACR/B,MAAM,CAAC6C,OAAO,CAAC1E,QAAQ,IAAI6B,MAAM,CAAC+C,MAAM,CAAC5E,QAAQ,iBAChDxB,OAAA,CAACP,cAAc;YAAAuF,QAAA,EAAE3B,MAAM,CAAC+C,MAAM,CAAC5E;UAAQ;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAiB,CACzD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACU,CAAC,eAEdpF,OAAA,CAAClB,WAAW;UACViH,SAAS;UACT7D,KAAK,EAAEmB,MAAM,CAAC6C,OAAO,CAACzE,MAAM,IAAI0E,OAAO,CAAC9C,MAAM,CAAC+C,MAAM,CAAC3E,MAAM,CAAE;UAAAuD,QAAA,gBAE9DhF,OAAA,CAACjB,UAAU;YAAAiG,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC/BpF,OAAA,CAACf,MAAM;YACLsI,QAAQ;YAAA,GACJlE,MAAM,CAAC4C,aAAa,CAAC,QAAQ,CAAC;YAClCuB,KAAK,eAAExH,OAAA,CAACR,aAAa;cAACwG,KAAK,EAAC;YAAQ;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YACxCqC,WAAW,EAAGC,QAAQ,iBACpB1H,OAAA,CAACX,GAAG;cAACmG,EAAE,EAAE;gBAAEZ,OAAO,EAAE,MAAM;gBAAE+C,QAAQ,EAAE,MAAM;gBAAE7B,GAAG,EAAE;cAAI,CAAE;cAAAd,QAAA,EACtD0C,QAAQ,CAACN,GAAG,CAAEC,KAAK;gBAAA,IAAAO,YAAA;gBAAA,oBAClB5H,OAAA,CAACT,IAAI;kBAEHyG,KAAK,GAAA4B,YAAA,GAAEnG,MAAM,CAACoG,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACR,GAAG,KAAKD,KAAK,CAAC,cAAAO,YAAA,uBAAzCA,YAAA,CAA2ClH,IAAK;kBACvDmG,IAAI,EAAC;gBAAO,GAFPQ,KAAK;kBAAApC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAGX,CAAC;cAAA,CACH;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CACL;YACFjF,SAAS,EAAEA,SAAU;YAAA6E,QAAA,EAEpBvD,MAAM,CAAC2F,GAAG,CAACU,KAAK,iBACf9H,OAAA,CAAChB,QAAQ;cAAiBqI,KAAK,EAAES,KAAK,CAACR,GAAI;cAAAtC,QAAA,EACxC8C,KAAK,CAACpH;YAAI,GADEoH,KAAK,CAACR,GAAG;cAAArC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEd,CACX;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC,EACR/B,MAAM,CAAC6C,OAAO,CAACzE,MAAM,IAAI4B,MAAM,CAAC+C,MAAM,CAAC3E,MAAM,iBAC5CzB,OAAA,CAACP,cAAc;YAAAuF,QAAA,EAAE3B,MAAM,CAAC+C,MAAM,CAAC3E;UAAM;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAiB,CACvD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACU,CAAC,eAEdpF,OAAA,CAACnB,MAAM;UACL8G,OAAO,EAAC,WAAW;UACnBwB,IAAI,EAAC,QAAQ;UACbY,QAAQ,EAAEjG,OAAQ;UAClB+E,IAAI,EAAC,OAAO;UACZrB,EAAE,EAAE;YAAEC,EAAE,EAAE;UAAE,CAAE;UAAAT,QAAA,EAEblD,OAAO,gBACN9B,OAAA,CAACd,gBAAgB;YAAC2H,IAAI,EAAE,EAAG;YAACrB,EAAE,EAAE;cAAEsB,KAAK,EAAE;YAAQ;UAAE;YAAA7B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAEtD;QACD;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB,CAAC;AAACxD,EAAA,CAxRID,QAAQ;EAAA,QACKnD,WAAW,EA4BbE,SAAS;AAAA;AAAAsJ,EAAA,GA7BpBrG,QAAQ;AA0Rd,eAAeA,QAAQ;AAAC,IAAAqG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}