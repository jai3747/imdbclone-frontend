{"ast":null,"code":"// // src/config/api.config.js\n// import axios from 'axios';\n\n// // Environment variable for API URL\n// export const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // Create axios instance\n// export const apiClient = axios.create({\n//   baseURL: backend_API,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   timeout: 10000, // 10 second timeout\n// });\n\n// // Request interceptor\n// apiClient.interceptors.request.use(\n//   (config) => {\n//     // Get token from localStorage if you're using authentication\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token}`;\n//     }\n\n//     // Log the request in development\n//     if (process.env.NODE_ENV === 'development') {\n//       console.log('API Request:', config.method?.toUpperCase(), config.url);\n//     }\n\n//     return config;\n//   },\n//   (error) => {\n//     console.error('Request error:', error);\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// apiClient.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   (error) => {\n//     // Handle specific error cases\n//     if (error.response) {\n//       switch (error.response.status) {\n//         case 404:\n//           console.error(`Resource not found: ${error.config.url}`);\n//           break;\n//         case 401:\n//           // Handle unauthorized - maybe redirect to login\n//           localStorage.removeItem('token');\n//           break;\n//         case 500:\n//           console.error('Server error:', error.response.data);\n//           break;\n//         default:\n//           console.error('API Error:', error.response.data);\n//       }\n//     } else if (error.request) {\n//       // Request was made but no response received\n//       console.error('No response received:', error.request);\n//     } else {\n//       // Something else went wrong\n//       console.error('Error setting up request:', error.message);\n//     }\n\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Helper function to check if API is reachable\n// export const checkAPIHealth = async () => {\n//   try {\n//     await apiClient.get('/health');\n//     return true;\n//   } catch (error) {\n//     console.error('API health check failed:', error.message);\n//     return false;\n//   }\n// };\n\n// // Example usage function\n// export const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n//   try {\n//     const config = {\n//       method,\n//       url: endpoint,\n//       ...(data && { data }),\n//     };\n\n//     const response = await apiClient(config);\n//     return response.data;\n//   } catch (error) {\n//     if (!error.response) {\n//       throw new Error('Network error - please check your connection');\n//     }\n//     throw error;\n//   }\n// };\nimport axios from 'axios';\n\n// Environment variable for API URL\nexport const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance\nexport const apiClient = axios.create({\n  baseURL: backend_API,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 second timeout\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  // Get token from localStorage if you're using authentication\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Log the request in development\n  if (process.env.NODE_ENV === 'development') {\n    var _config$method;\n    console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle specific error cases\n  if (error.response) {\n    switch (error.response.status) {\n      case 404:\n        console.error(`Resource not found: ${error.config.url}`);\n        break;\n      case 401:\n        // Handle unauthorized - maybe redirect to login\n        localStorage.removeItem('token');\n        break;\n      case 500:\n        console.error('Server error:', error.response.data);\n        break;\n      default:\n        console.error('API Error:', error.response.data);\n    }\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error('No response received:', error.request);\n  } else {\n    // Something else went wrong\n    console.error('Error setting up request:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to check if API is reachable\nexport const checkAPIHealth = async () => {\n  try {\n    await apiClient.get('/health');\n    return true;\n  } catch (error) {\n    console.error('API health check failed:', error.message);\n    return false;\n  }\n};\n\n// Example usage function\nexport const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n  try {\n    const config = {\n      method,\n      url: endpoint,\n      ...(data && {\n        data\n      })\n    };\n    const response = await apiClient(config);\n    return response.data;\n  } catch (error) {\n    if (!error.response) {\n      throw new Error('Network error - please check your connection');\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","backend_API","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","NODE_ENV","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","removeItem","data","message","checkAPIHealth","get","makeAPICall","endpoint","Error"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/config/api.config.js"],"sourcesContent":["// // src/config/api.config.js\n// import axios from 'axios';\n\n// // Environment variable for API URL\n// export const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // Create axios instance\n// export const apiClient = axios.create({\n//   baseURL: backend_API,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   timeout: 10000, // 10 second timeout\n// });\n\n// // Request interceptor\n// apiClient.interceptors.request.use(\n//   (config) => {\n//     // Get token from localStorage if you're using authentication\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token}`;\n//     }\n    \n//     // Log the request in development\n//     if (process.env.NODE_ENV === 'development') {\n//       console.log('API Request:', config.method?.toUpperCase(), config.url);\n//     }\n    \n//     return config;\n//   },\n//   (error) => {\n//     console.error('Request error:', error);\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// apiClient.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   (error) => {\n//     // Handle specific error cases\n//     if (error.response) {\n//       switch (error.response.status) {\n//         case 404:\n//           console.error(`Resource not found: ${error.config.url}`);\n//           break;\n//         case 401:\n//           // Handle unauthorized - maybe redirect to login\n//           localStorage.removeItem('token');\n//           break;\n//         case 500:\n//           console.error('Server error:', error.response.data);\n//           break;\n//         default:\n//           console.error('API Error:', error.response.data);\n//       }\n//     } else if (error.request) {\n//       // Request was made but no response received\n//       console.error('No response received:', error.request);\n//     } else {\n//       // Something else went wrong\n//       console.error('Error setting up request:', error.message);\n//     }\n\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Helper function to check if API is reachable\n// export const checkAPIHealth = async () => {\n//   try {\n//     await apiClient.get('/health');\n//     return true;\n//   } catch (error) {\n//     console.error('API health check failed:', error.message);\n//     return false;\n//   }\n// };\n\n// // Example usage function\n// export const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n//   try {\n//     const config = {\n//       method,\n//       url: endpoint,\n//       ...(data && { data }),\n//     };\n    \n//     const response = await apiClient(config);\n//     return response.data;\n//   } catch (error) {\n//     if (!error.response) {\n//       throw new Error('Network error - please check your connection');\n//     }\n//     throw error;\n//   }\n// };\nimport axios from 'axios';\n\n// Environment variable for API URL\nexport const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance\nexport const apiClient = axios.create({\n  baseURL: backend_API,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Request interceptor\napiClient.interceptors.request.use(\n  (config) => {\n    // Get token from localStorage if you're using authentication\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    // Log the request in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('API Request:', config.method?.toUpperCase(), config.url);\n    }\n    \n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle specific error cases\n    if (error.response) {\n      switch (error.response.status) {\n        case 404:\n          console.error(`Resource not found: ${error.config.url}`);\n          break;\n        case 401:\n          // Handle unauthorized - maybe redirect to login\n          localStorage.removeItem('token');\n          break;\n        case 500:\n          console.error('Server error:', error.response.data);\n          break;\n        default:\n          console.error('API Error:', error.response.data);\n      }\n    } else if (error.request) {\n      // Request was made but no response received\n      console.error('No response received:', error.request);\n    } else {\n      // Something else went wrong\n      console.error('Error setting up request:', error.message);\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to check if API is reachable\nexport const checkAPIHealth = async () => {\n  try {\n    await apiClient.get('/health');\n    return true;\n  } catch (error) {\n    console.error('API health check failed:', error.message);\n    return false;\n  }\n};\n\n// Example usage function\nexport const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n  try {\n    const config = {\n      method,\n      url: endpoint,\n      ...(data && { data }),\n    };\n    \n    const response = await apiClient(config);\n    return response.data;\n  } catch (error) {\n    if (!error.response) {\n      throw new Error('Network error - please check your connection');\n    }\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAEnF;AACA,OAAO,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EACpCC,OAAO,EAAEN,WAAW;EACpBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAI,UAASH,KAAM,EAAC;EAClD;;EAEA;EACA,IAAIZ,OAAO,CAACC,GAAG,CAACe,QAAQ,KAAK,aAAa,EAAE;IAAA,IAAAC,cAAA;IAC1CC,OAAO,CAACC,GAAG,CAAC,cAAc,GAAAF,cAAA,GAAEN,MAAM,CAACS,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,EAAEV,MAAM,CAACW,GAAG,CAAC;EACvE;EAEA,OAAOX,MAAM;AACf,CAAC,EACAY,KAAK,IAAK;EACTL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACApB,SAAS,CAACK,YAAY,CAACkB,QAAQ,CAAChB,GAAG,CAChCgB,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB,QAAQH,KAAK,CAACG,QAAQ,CAACC,MAAM;MAC3B,KAAK,GAAG;QACNT,OAAO,CAACK,KAAK,CAAE,uBAAsBA,KAAK,CAACZ,MAAM,CAACW,GAAI,EAAC,CAAC;QACxD;MACF,KAAK,GAAG;QACN;QACAT,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;QAChC;MACF,KAAK,GAAG;QACNV,OAAO,CAACK,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACG,QAAQ,CAACG,IAAI,CAAC;QACnD;MACF;QACEX,OAAO,CAACK,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACG,QAAQ,CAACG,IAAI,CAAC;IACpD;EACF,CAAC,MAAM,IAAIN,KAAK,CAACd,OAAO,EAAE;IACxB;IACAS,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACd,OAAO,CAAC;EACvD,CAAC,MAAM;IACL;IACAS,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACO,OAAO,CAAC;EAC3D;EAEA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAM5B,SAAS,CAAC6B,GAAG,CAAC,SAAS,CAAC;IAC9B,OAAO,IAAI;EACb,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACO,OAAO,CAAC;IACxD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAOC,QAAQ,EAAEd,MAAM,GAAG,KAAK,EAAES,IAAI,GAAG,IAAI,KAAK;EAC1E,IAAI;IACF,MAAMlB,MAAM,GAAG;MACbS,MAAM;MACNE,GAAG,EAAEY,QAAQ;MACb,IAAIL,IAAI,IAAI;QAAEA;MAAK,CAAC;IACtB,CAAC;IAED,MAAMH,QAAQ,GAAG,MAAMvB,SAAS,CAACQ,MAAM,CAAC;IACxC,OAAOe,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAON,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,CAACG,QAAQ,EAAE;MACnB,MAAM,IAAIS,KAAK,CAAC,8CAA8C,CAAC;IACjE;IACA,MAAMZ,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}