{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const ALLOWED_IMAGE_SOURCES = [\n//   {\n//     domain: 'imgur.com',\n//     example: 'https://i.imgur.com/example.jpg',\n//     description: 'Imgur'\n//   },\n//   {\n//     domain: 'upload.wikimedia.org',\n//     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n//     description: 'Wikimedia Commons'\n//   },\n//   {\n//     domain: 'images.unsplash.com',\n//     example: 'https://images.unsplash.com/photo-example.jpg',\n//     description: 'Unsplash'\n//   },\n//   {\n//     domain: 'res.cloudinary.com',\n//     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n//     description: 'Cloudinary'\n//   },\n//   {\n//     domain: 'drive.google.com',\n//     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n//     description: 'Google Drive (public links only)'\n//   }\n// ];\n\n// // Function to convert Google Drive sharing URL to direct image URL\n// const convertGoogleDriveURL = (url) => {\n//   try {\n//     const urlObj = new URL(url);\n//     if (urlObj.hostname === 'drive.google.com') {\n//       if (url.includes('/file/d/')) {\n//         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n//         if (fileId) {\n//           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n//         }\n//       } else if (url.includes('uc?export=view&id=')) {\n//         return url;\n//       }\n//     }\n//     return url;\n//   } catch {\n//     return url;\n//   }\n// };\n\n// // Function to validate image URL\n// const isValidImageUrl = (url) => {\n//   try {\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     const urlObj = new URL(convertedUrl);\n//     const hostname = urlObj.hostname;\n\n//     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n//       hostname === domain || hostname.endsWith(`.${domain}`)\n//     );\n\n//     const isHttps = urlObj.protocol === 'https:';\n\n//     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n//       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n//       urlObj.hostname.endsWith('cloudinary.com');\n\n//     return isAllowedDomain && isHttps && hasImageExtension;\n//   } catch {\n//     return false;\n//   }\n// };\n\n// // Custom Yup test for image URL validation\n// yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n//   return this.test('test-valid-image-url', errorMessage, function (value) {\n//     const { path, createError } = this;\n//     return !value || isValidImageUrl(value) || createError({\n//       path,\n//       message: errorMessage\n//     });\n//   });\n// });\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n//   const [showImageHelp, setShowImageHelp] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     if (!isValidImageUrl(convertedUrl)) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = convertedUrl;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n\n//         const isImageValid = await validateImageUrl(convertedPosterUrl);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         const submitValues = {\n//           ...values,\n//           poster: convertedPosterUrl\n//         };\n\n//         await api.movies.add(submitValues);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         const convertedUrl = convertGoogleDriveURL(url);\n//         if (isValidImageUrl(convertedUrl)) {\n//           setImageLoading(true);\n//           setPreviewUrl(convertedUrl);\n//           const isValid = await validateImageUrl(convertedUrl);\n//           setImageError(!isValid);\n//         } else {\n//           setPreviewUrl(\"\");\n//           setImageError(false);\n//         }\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a HTTPS URL from one of the allowed sources\"\n//                 }\n//                 InputProps={{\n//                   endAdornment: (\n//                     <Tooltip title=\"Click for allowed image sources\">\n//                       <IconButton \n//                         size=\"small\" \n//                         onClick={() => setShowImageHelp(!showImageHelp)}\n//                       >\n//                         <InfoIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   ),\n//                 }}\n//               />\n//               {showImageHelp && (\n//                 <Paper sx={{ mt: 1, p: 2 }}>\n//                   <Typography variant=\"subtitle2\" gutterBottom>\n//                     Allowed Image Sources:\n//                   </Typography>\n//                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n//                     <Box key={description} sx={{ mb: 1 }}>\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\n//                         {description}:\n//                       </Typography>\n//                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n//                         Example: {example}\n//                       </Typography>\n//                     </Box>\n//                   ))}\n//                 </Paper>\n//               )}\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Alert, Container, Box, Typography, Chip, OutlinedInput, FormHelperText } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nconst movieValidationSchema = yup.object({\n  name: yup.string().required(\"Movie name is required\").min(3, \"Movie name must be at least 3 characters\").max(100, \"Movie name must not exceed 100 characters\").trim(),\n  desc: yup.string().required(\"Description is required\").min(10, \"Description must be at least 10 characters\").max(2000, \"Description must not exceed 2000 characters\").trim(),\n  director: yup.string().required(\"Director name is required\").min(3, \"Director name must be at least 3 characters\").max(100, \"Director name must not exceed 100 characters\").trim(),\n  poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\").trim(),\n  yearOfRelease: yup.number().required(\"Release year is required\").min(1888, \"Year must be 1888 or later\").max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup.string().required(\"Producer selection is required\"),\n  actors: yup.array().min(1, \"Please select at least one actor\").max(20, \"Cannot select more than 20 actors\").required(\"Actor selection is required\")\n});\nconst AddMovie = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async values => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        var _err$response, _err$response$data;\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n  const loadInitialData = async () => {\n    try {\n      setInitialLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([api.producers.getAll(), api.actors.getAll()]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n  if (initialLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: formik.handleSubmit,\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Add New Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'grid',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Movie Name\",\n          ...formik.getFieldProps('name'),\n          error: formik.touched.name && Boolean(formik.errors.name),\n          helperText: formik.touched.name && formik.errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          label: \"Description\",\n          ...formik.getFieldProps('desc'),\n          error: formik.touched.desc && Boolean(formik.errors.desc),\n          helperText: formik.touched.desc && formik.errors.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Director\",\n          ...formik.getFieldProps('director'),\n          error: formik.touched.director && Boolean(formik.errors.director),\n          helperText: formik.touched.director && formik.errors.director\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Poster URL\",\n          ...formik.getFieldProps('poster'),\n          error: formik.touched.poster && Boolean(formik.errors.poster),\n          helperText: formik.touched.poster && formik.errors.poster\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          type: \"number\",\n          label: \"Year of Release\",\n          ...formik.getFieldProps('yearOfRelease'),\n          error: formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease),\n          helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.producer && Boolean(formik.errors.producer),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Producer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            ...formik.getFieldProps('producer'),\n            label: \"Producer\",\n            children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: producer._id,\n              children: producer.name\n            }, producer._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 13\n          }, this), formik.touched.producer && formik.errors.producer && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.producer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.actors && Boolean(formik.errors.actors),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Actors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            ...formik.getFieldProps('actors'),\n            input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              label: \"Actors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 22\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 0.5\n              },\n              children: selected.map(value => {\n                var _actors$find;\n                return /*#__PURE__*/_jsxDEV(Chip, {\n                  label: (_actors$find = actors.find(actor => actor._id === value)) === null || _actors$find === void 0 ? void 0 : _actors$find.name,\n                  size: \"small\"\n                }, value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 705,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 17\n            }, this),\n            MenuProps: MenuProps,\n            children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: actor._id,\n              children: actor.name\n            }, actor._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 13\n          }, this), formik.touched.actors && formik.errors.actors && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.actors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: loading,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            sx: {\n              color: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 15\n          }, this) : 'Add Movie'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 617,\n    columnNumber: 5\n  }, this);\n};\n_s(AddMovie, \"Dkx87f1xm+BZkpFfk1pn5n8cHt4=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = AddMovie;\nexport default AddMovie;\nvar _c;\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","api","useFormik","yup","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Alert","Container","Box","Typography","Chip","OutlinedInput","FormHelperText","jsxDEV","_jsxDEV","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","movieValidationSchema","object","name","string","required","min","max","trim","desc","director","poster","url","yearOfRelease","number","Date","getFullYear","producer","actors","array","AddMovie","_s","navigate","loading","setLoading","initialLoading","setInitialLoading","error","setError","producers","setProducers","setActors","formik","initialValues","validationSchema","onSubmit","values","movies","add","err","_err$response","_err$response$data","response","data","message","console","loadInitialData","producersRes","actorsRes","Promise","all","getAll","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","component","handleSubmit","sx","mt","mb","variant","gutterBottom","severity","gap","fullWidth","label","getFieldProps","touched","Boolean","errors","helperText","multiline","rows","type","map","value","_id","multiple","input","renderValue","selected","flexWrap","_actors$find","find","actor","size","disabled","color","_c","$RefreshReg$"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js"],"sourcesContent":["// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const ALLOWED_IMAGE_SOURCES = [\n//   {\n//     domain: 'imgur.com',\n//     example: 'https://i.imgur.com/example.jpg',\n//     description: 'Imgur'\n//   },\n//   {\n//     domain: 'upload.wikimedia.org',\n//     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n//     description: 'Wikimedia Commons'\n//   },\n//   {\n//     domain: 'images.unsplash.com',\n//     example: 'https://images.unsplash.com/photo-example.jpg',\n//     description: 'Unsplash'\n//   },\n//   {\n//     domain: 'res.cloudinary.com',\n//     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n//     description: 'Cloudinary'\n//   },\n//   {\n//     domain: 'drive.google.com',\n//     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n//     description: 'Google Drive (public links only)'\n//   }\n// ];\n\n// // Function to convert Google Drive sharing URL to direct image URL\n// const convertGoogleDriveURL = (url) => {\n//   try {\n//     const urlObj = new URL(url);\n//     if (urlObj.hostname === 'drive.google.com') {\n//       if (url.includes('/file/d/')) {\n//         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n//         if (fileId) {\n//           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n//         }\n//       } else if (url.includes('uc?export=view&id=')) {\n//         return url;\n//       }\n//     }\n//     return url;\n//   } catch {\n//     return url;\n//   }\n// };\n\n// // Function to validate image URL\n// const isValidImageUrl = (url) => {\n//   try {\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     const urlObj = new URL(convertedUrl);\n//     const hostname = urlObj.hostname;\n    \n//     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n//       hostname === domain || hostname.endsWith(`.${domain}`)\n//     );\n\n//     const isHttps = urlObj.protocol === 'https:';\n\n//     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n//       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n//       urlObj.hostname.endsWith('cloudinary.com');\n\n//     return isAllowedDomain && isHttps && hasImageExtension;\n//   } catch {\n//     return false;\n//   }\n// };\n\n// // Custom Yup test for image URL validation\n// yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n//   return this.test('test-valid-image-url', errorMessage, function (value) {\n//     const { path, createError } = this;\n//     return !value || isValidImageUrl(value) || createError({\n//       path,\n//       message: errorMessage\n//     });\n//   });\n// });\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n//   const [showImageHelp, setShowImageHelp] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     if (!isValidImageUrl(convertedUrl)) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = convertedUrl;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n        \n//         const isImageValid = await validateImageUrl(convertedPosterUrl);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         const submitValues = {\n//           ...values,\n//           poster: convertedPosterUrl\n//         };\n\n//         await api.movies.add(submitValues);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         const convertedUrl = convertGoogleDriveURL(url);\n//         if (isValidImageUrl(convertedUrl)) {\n//           setImageLoading(true);\n//           setPreviewUrl(convertedUrl);\n//           const isValid = await validateImageUrl(convertedUrl);\n//           setImageError(!isValid);\n//         } else {\n//           setPreviewUrl(\"\");\n//           setImageError(false);\n//         }\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a HTTPS URL from one of the allowed sources\"\n//                 }\n//                 InputProps={{\n//                   endAdornment: (\n//                     <Tooltip title=\"Click for allowed image sources\">\n//                       <IconButton \n//                         size=\"small\" \n//                         onClick={() => setShowImageHelp(!showImageHelp)}\n//                       >\n//                         <InfoIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   ),\n//                 }}\n//               />\n//               {showImageHelp && (\n//                 <Paper sx={{ mt: 1, p: 2 }}>\n//                   <Typography variant=\"subtitle2\" gutterBottom>\n//                     Allowed Image Sources:\n//                   </Typography>\n//                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n//                     <Box key={description} sx={{ mb: 1 }}>\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\n//                         {description}:\n//                       </Typography>\n//                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n//                         Example: {example}\n//                       </Typography>\n//                     </Box>\n//                   ))}\n//                 </Paper>\n//               )}\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  CircularProgress,\n  Alert,\n  Container,\n  Box,\n  Typography,\n  Chip,\n  OutlinedInput,\n  FormHelperText,\n} from \"@mui/material\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst movieValidationSchema = yup.object({\n  name: yup\n    .string()\n    .required(\"Movie name is required\")\n    .min(3, \"Movie name must be at least 3 characters\")\n    .max(100, \"Movie name must not exceed 100 characters\")\n    .trim(),\n  desc: yup\n    .string()\n    .required(\"Description is required\")\n    .min(10, \"Description must be at least 10 characters\")\n    .max(2000, \"Description must not exceed 2000 characters\")\n    .trim(),\n  director: yup\n    .string()\n    .required(\"Director name is required\")\n    .min(3, \"Director name must be at least 3 characters\")\n    .max(100, \"Director name must not exceed 100 characters\")\n    .trim(),\n  poster: yup\n    .string()\n    .required(\"Poster URL is required\")\n    .url(\"Must be a valid URL\")\n    .trim(),\n  yearOfRelease: yup\n    .number()\n    .required(\"Release year is required\")\n    .min(1888, \"Year must be 1888 or later\")\n    .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup\n    .string()\n    .required(\"Producer selection is required\"),\n  actors: yup\n    .array()\n    .min(1, \"Please select at least one actor\")\n    .max(20, \"Cannot select more than 20 actors\")\n    .required(\"Actor selection is required\")\n});\n\nconst AddMovie = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (values) => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  const loadInitialData = async () => {\n    try {\n      setInitialLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([\n        api.producers.getAll(),\n        api.actors.getAll()\n      ]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n\n  if (initialLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Add New Movie\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Box sx={{ display: 'grid', gap: 2 }}>\n          <TextField\n            fullWidth\n            label=\"Movie Name\"\n            {...formik.getFieldProps('name')}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            label=\"Description\"\n            {...formik.getFieldProps('desc')}\n            error={formik.touched.desc && Boolean(formik.errors.desc)}\n            helperText={formik.touched.desc && formik.errors.desc}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Director\"\n            {...formik.getFieldProps('director')}\n            error={formik.touched.director && Boolean(formik.errors.director)}\n            helperText={formik.touched.director && formik.errors.director}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Poster URL\"\n            {...formik.getFieldProps('poster')}\n            error={formik.touched.poster && Boolean(formik.errors.poster)}\n            helperText={formik.touched.poster && formik.errors.poster}\n          />\n\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"Year of Release\"\n            {...formik.getFieldProps('yearOfRelease')}\n            error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n            helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n          />\n\n          <FormControl \n            fullWidth\n            error={formik.touched.producer && Boolean(formik.errors.producer)}\n          >\n            <InputLabel>Producer</InputLabel>\n            <Select\n              {...formik.getFieldProps('producer')}\n              label=\"Producer\"\n            >\n              {producers.map(producer => (\n                <MenuItem key={producer._id} value={producer._id}>\n                  {producer.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.producer && formik.errors.producer && (\n              <FormHelperText>{formik.errors.producer}</FormHelperText>\n            )}\n          </FormControl>\n\n          <FormControl \n            fullWidth\n            error={formik.touched.actors && Boolean(formik.errors.actors)}\n          >\n            <InputLabel>Actors</InputLabel>\n            <Select\n              multiple\n              {...formik.getFieldProps('actors')}\n              input={<OutlinedInput label=\"Actors\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip\n                      key={value}\n                      label={actors.find(actor => actor._id === value)?.name}\n                      size=\"small\"\n                    />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >\n              {actors.map(actor => (\n                <MenuItem key={actor._id} value={actor._id}>\n                  {actor.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.actors && formik.errors.actors && (\n              <FormHelperText>{formik.errors.actors}</FormHelperText>\n            )}\n          </FormControl>\n\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            disabled={loading}\n            size=\"large\"\n            sx={{ mt: 2 }}\n          >\n            {loading ? (\n              <CircularProgress size={24} sx={{ color: 'white' }} />\n            ) : (\n              'Add Movie'\n            )}\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AddMovie;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,qBAAqB;AACzC,SAASC,SAAS,QAAQ,QAAQ;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}