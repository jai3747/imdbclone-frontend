{"ast":null,"code":"\n// // import axios from 'axios';\n\n// // // Environment variable for API URL\n// // export const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // // Create axios instance\n// // export const apiClient = axios.create({\n// //   baseURL: backend_API,\n// //   headers: {\n// //     'Content-Type': 'application/json',\n// //   },\n// //   timeout: 10000, // 10 second timeout\n// // });\n\n// // // Request interceptor\n// // apiClient.interceptors.request.use(\n// //   (config) => {\n// //     // Get token from localStorage if you're using authentication\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       config.headers.Authorization = `Bearer ${token}`;\n// //     }\n\n// //     // Log the request in development\n// //     if (process.env.NODE_ENV === 'development') {\n// //       console.log('API Request:', config.method?.toUpperCase(), config.url);\n// //     }\n\n// //     return config;\n// //   },\n// //   (error) => {\n// //     console.error('Request error:', error);\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // // Response interceptor\n// // apiClient.interceptors.response.use(\n// //   (response) => {\n// //     return response;\n// //   },\n// //   (error) => {\n// //     // Handle specific error cases\n// //     if (error.response) {\n// //       switch (error.response.status) {\n// //         case 404:\n// //           console.error(`Resource not found: ${error.config.url}`);\n// //           break;\n// //         case 401:\n// //           // Handle unauthorized - maybe redirect to login\n// //           localStorage.removeItem('token');\n// //           break;\n// //         case 500:\n// //           console.error('Server error:', error.response.data);\n// //           break;\n// //         default:\n// //           console.error('API Error:', error.response.data);\n// //       }\n// //     } else if (error.request) {\n// //       // Request was made but no response received\n// //       console.error('No response received:', error.request);\n// //     } else {\n// //       // Something else went wrong\n// //       console.error('Error setting up request:', error.message);\n// //     }\n\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // // Helper function to check if API is reachable\n// // export const checkAPIHealth = async () => {\n// //   try {\n// //     await apiClient.get('/health');\n// //     return true;\n// //   } catch (error) {\n// //     console.error('API health check failed:', error.message);\n// //     return false;\n// //   }\n// // };\n\n// // // Example usage function\n// // export const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n// //   try {\n// //     const config = {\n// //       method,\n// //       url: endpoint,\n// //       ...(data && { data }),\n// //     };\n\n// //     const response = await apiClient(config);\n// //     return response.data;\n// //   } catch (error) {\n// //     if (!error.response) {\n// //       throw new Error('Network error - please check your connection');\n// //     }\n// //     throw error;\n// //   }\n// // };\n// // api.config.js\n\n// import axios from 'axios';\n\n// // Environment variable for API URL\n// export const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // Create axios instance\n// export const apiClient = axios.create({\n//   baseURL: backend_API,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   timeout: 10000, // 10 second timeout\n// });\n\n// // Request interceptor\n// apiClient.interceptors.request.use(\n//   (config) => {\n//     // Get token from localStorage if you're using authentication\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token}`;\n//     }\n\n//     // Log the request in development\n//     if (process.env.NODE_ENV === 'development') {\n//       console.log('API Request:', config.method?.toUpperCase(), config.url);\n//     }\n\n//     return config;\n//   },\n//   (error) => {\n//     console.error('Request error:', error);\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// apiClient.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   (error) => {\n//     // Handle specific error cases\n//     if (error.response) {\n//       switch (error.response.status) {\n//         case 404:\n//           console.error(`Resource not found: ${error.config.url}`);\n//           break;\n//         case 401:\n//           // Handle unauthorized - maybe redirect to login\n//           localStorage.removeItem('token');\n//           break;\n//         case 500:\n//           console.error('Server error:', error.response.data);\n//           break;\n//         default:\n//           console.error('API Error:', error.response.data);\n//       }\n//     } else if (error.request) {\n//       // Request was made but no response received\n//       console.error('No response received:', error.request);\n//     } else {\n//       // Something else went wrong\n//       console.error('Error setting up request:', error.message);\n//     }\n\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Helper function to check if API is reachable\n// export const checkAPIHealth = async () => {\n//   try {\n//     await apiClient.get('/api/health');\n//     return true;\n//   } catch (error) {\n//     console.error('API health check failed:', error.message);\n//     return false;\n//   }\n// };\n\n// // Example usage function\n// export const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n//   try {\n//     const config = {\n//       method,\n//       url: `/api${endpoint}`,\n//       ...(data && { data }),\n//     };\n\n//     const response = await apiClient(config);\n//     return response.data;\n//   } catch (error) {\n//     if (!error.response) {\n//       throw new Error('Network error - please check your connection');\n//     }\n//     throw error;\n//   }\n// };","map":{"version":3,"names":[],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/config/api.config.js"],"sourcesContent":["\n// // import axios from 'axios';\n\n// // // Environment variable for API URL\n// // export const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // // Create axios instance\n// // export const apiClient = axios.create({\n// //   baseURL: backend_API,\n// //   headers: {\n// //     'Content-Type': 'application/json',\n// //   },\n// //   timeout: 10000, // 10 second timeout\n// // });\n\n// // // Request interceptor\n// // apiClient.interceptors.request.use(\n// //   (config) => {\n// //     // Get token from localStorage if you're using authentication\n// //     const token = localStorage.getItem('token');\n// //     if (token) {\n// //       config.headers.Authorization = `Bearer ${token}`;\n// //     }\n    \n// //     // Log the request in development\n// //     if (process.env.NODE_ENV === 'development') {\n// //       console.log('API Request:', config.method?.toUpperCase(), config.url);\n// //     }\n    \n// //     return config;\n// //   },\n// //   (error) => {\n// //     console.error('Request error:', error);\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // // Response interceptor\n// // apiClient.interceptors.response.use(\n// //   (response) => {\n// //     return response;\n// //   },\n// //   (error) => {\n// //     // Handle specific error cases\n// //     if (error.response) {\n// //       switch (error.response.status) {\n// //         case 404:\n// //           console.error(`Resource not found: ${error.config.url}`);\n// //           break;\n// //         case 401:\n// //           // Handle unauthorized - maybe redirect to login\n// //           localStorage.removeItem('token');\n// //           break;\n// //         case 500:\n// //           console.error('Server error:', error.response.data);\n// //           break;\n// //         default:\n// //           console.error('API Error:', error.response.data);\n// //       }\n// //     } else if (error.request) {\n// //       // Request was made but no response received\n// //       console.error('No response received:', error.request);\n// //     } else {\n// //       // Something else went wrong\n// //       console.error('Error setting up request:', error.message);\n// //     }\n\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // // Helper function to check if API is reachable\n// // export const checkAPIHealth = async () => {\n// //   try {\n// //     await apiClient.get('/health');\n// //     return true;\n// //   } catch (error) {\n// //     console.error('API health check failed:', error.message);\n// //     return false;\n// //   }\n// // };\n\n// // // Example usage function\n// // export const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n// //   try {\n// //     const config = {\n// //       method,\n// //       url: endpoint,\n// //       ...(data && { data }),\n// //     };\n    \n// //     const response = await apiClient(config);\n// //     return response.data;\n// //   } catch (error) {\n// //     if (!error.response) {\n// //       throw new Error('Network error - please check your connection');\n// //     }\n// //     throw error;\n// //   }\n// // };\n// // api.config.js\n\n// import axios from 'axios';\n\n// // Environment variable for API URL\n// export const backend_API = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // Create axios instance\n// export const apiClient = axios.create({\n//   baseURL: backend_API,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   timeout: 10000, // 10 second timeout\n// });\n\n// // Request interceptor\n// apiClient.interceptors.request.use(\n//   (config) => {\n//     // Get token from localStorage if you're using authentication\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token}`;\n//     }\n    \n//     // Log the request in development\n//     if (process.env.NODE_ENV === 'development') {\n//       console.log('API Request:', config.method?.toUpperCase(), config.url);\n//     }\n    \n//     return config;\n//   },\n//   (error) => {\n//     console.error('Request error:', error);\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// apiClient.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   (error) => {\n//     // Handle specific error cases\n//     if (error.response) {\n//       switch (error.response.status) {\n//         case 404:\n//           console.error(`Resource not found: ${error.config.url}`);\n//           break;\n//         case 401:\n//           // Handle unauthorized - maybe redirect to login\n//           localStorage.removeItem('token');\n//           break;\n//         case 500:\n//           console.error('Server error:', error.response.data);\n//           break;\n//         default:\n//           console.error('API Error:', error.response.data);\n//       }\n//     } else if (error.request) {\n//       // Request was made but no response received\n//       console.error('No response received:', error.request);\n//     } else {\n//       // Something else went wrong\n//       console.error('Error setting up request:', error.message);\n//     }\n\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Helper function to check if API is reachable\n// export const checkAPIHealth = async () => {\n//   try {\n//     await apiClient.get('/api/health');\n//     return true;\n//   } catch (error) {\n//     console.error('API health check failed:', error.message);\n//     return false;\n//   }\n// };\n\n// // Example usage function\n// export const makeAPICall = async (endpoint, method = 'GET', data = null) => {\n//   try {\n//     const config = {\n//       method,\n//       url: `/api${endpoint}`,\n//       ...(data && { data }),\n//     };\n    \n//     const response = await apiClient(config);\n//     return response.data;\n//   } catch (error) {\n//     if (!error.response) {\n//       throw new Error('Network error - please check your connection');\n//     }\n//     throw error;\n//   }\n// };\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}