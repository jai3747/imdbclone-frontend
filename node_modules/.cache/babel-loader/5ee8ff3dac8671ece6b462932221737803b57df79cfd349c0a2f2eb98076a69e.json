{"ast":null,"code":"// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const ALLOWED_IMAGE_SOURCES = [\n//   {\n//     domain: 'imgur.com',\n//     example: 'https://i.imgur.com/example.jpg',\n//     description: 'Imgur'\n//   },\n//   {\n//     domain: 'upload.wikimedia.org',\n//     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n//     description: 'Wikimedia Commons'\n//   },\n//   {\n//     domain: 'images.unsplash.com',\n//     example: 'https://images.unsplash.com/photo-example.jpg',\n//     description: 'Unsplash'\n//   },\n//   {\n//     domain: 'res.cloudinary.com',\n//     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n//     description: 'Cloudinary'\n//   },\n//   {\n//     domain: 'drive.google.com',\n//     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n//     description: 'Google Drive (public links only)'\n//   }\n// ];\n\n// // Function to convert Google Drive sharing URL to direct image URL\n// const convertGoogleDriveURL = (url) => {\n//   try {\n//     const urlObj = new URL(url);\n//     if (urlObj.hostname === 'drive.google.com') {\n//       if (url.includes('/file/d/')) {\n//         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n//         if (fileId) {\n//           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n//         }\n//       } else if (url.includes('uc?export=view&id=')) {\n//         return url;\n//       }\n//     }\n//     return url;\n//   } catch {\n//     return url;\n//   }\n// };\n\n// // Function to validate image URL\n// const isValidImageUrl = (url) => {\n//   try {\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     const urlObj = new URL(convertedUrl);\n//     const hostname = urlObj.hostname;\n\n//     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n//       hostname === domain || hostname.endsWith(`.${domain}`)\n//     );\n\n//     const isHttps = urlObj.protocol === 'https:';\n\n//     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n//       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n//       urlObj.hostname.endsWith('cloudinary.com');\n\n//     return isAllowedDomain && isHttps && hasImageExtension;\n//   } catch {\n//     return false;\n//   }\n// };\n\n// // Custom Yup test for image URL validation\n// yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n//   return this.test('test-valid-image-url', errorMessage, function (value) {\n//     const { path, createError } = this;\n//     return !value || isValidImageUrl(value) || createError({\n//       path,\n//       message: errorMessage\n//     });\n//   });\n// });\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n//   const [showImageHelp, setShowImageHelp] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     if (!isValidImageUrl(convertedUrl)) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = convertedUrl;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n\n//         const isImageValid = await validateImageUrl(convertedPosterUrl);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         const submitValues = {\n//           ...values,\n//           poster: convertedPosterUrl\n//         };\n\n//         await api.movies.add(submitValues);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         const convertedUrl = convertGoogleDriveURL(url);\n//         if (isValidImageUrl(convertedUrl)) {\n//           setImageLoading(true);\n//           setPreviewUrl(convertedUrl);\n//           const isValid = await validateImageUrl(convertedUrl);\n//           setImageError(!isValid);\n//         } else {\n//           setPreviewUrl(\"\");\n//           setImageError(false);\n//         }\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a HTTPS URL from one of the allowed sources\"\n//                 }\n//                 InputProps={{\n//                   endAdornment: (\n//                     <Tooltip title=\"Click for allowed image sources\">\n//                       <IconButton \n//                         size=\"small\" \n//                         onClick={() => setShowImageHelp(!showImageHelp)}\n//                       >\n//                         <InfoIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   ),\n//                 }}\n//               />\n//               {showImageHelp && (\n//                 <Paper sx={{ mt: 1, p: 2 }}>\n//                   <Typography variant=\"subtitle2\" gutterBottom>\n//                     Allowed Image Sources:\n//                   </Typography>\n//                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n//                     <Box key={description} sx={{ mb: 1 }}>\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\n//                         {description}:\n//                       </Typography>\n//                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n//                         Example: {example}\n//                       </Typography>\n//                     </Box>\n//                   ))}\n//                 </Paper>\n//               )}\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;","map":{"version":3,"names":[],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js"],"sourcesContent":["// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const ALLOWED_IMAGE_SOURCES = [\n//   {\n//     domain: 'imgur.com',\n//     example: 'https://i.imgur.com/example.jpg',\n//     description: 'Imgur'\n//   },\n//   {\n//     domain: 'upload.wikimedia.org',\n//     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n//     description: 'Wikimedia Commons'\n//   },\n//   {\n//     domain: 'images.unsplash.com',\n//     example: 'https://images.unsplash.com/photo-example.jpg',\n//     description: 'Unsplash'\n//   },\n//   {\n//     domain: 'res.cloudinary.com',\n//     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n//     description: 'Cloudinary'\n//   },\n//   {\n//     domain: 'drive.google.com',\n//     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n//     description: 'Google Drive (public links only)'\n//   }\n// ];\n\n// // Function to convert Google Drive sharing URL to direct image URL\n// const convertGoogleDriveURL = (url) => {\n//   try {\n//     const urlObj = new URL(url);\n//     if (urlObj.hostname === 'drive.google.com') {\n//       if (url.includes('/file/d/')) {\n//         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n//         if (fileId) {\n//           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n//         }\n//       } else if (url.includes('uc?export=view&id=')) {\n//         return url;\n//       }\n//     }\n//     return url;\n//   } catch {\n//     return url;\n//   }\n// };\n\n// // Function to validate image URL\n// const isValidImageUrl = (url) => {\n//   try {\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     const urlObj = new URL(convertedUrl);\n//     const hostname = urlObj.hostname;\n    \n//     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n//       hostname === domain || hostname.endsWith(`.${domain}`)\n//     );\n\n//     const isHttps = urlObj.protocol === 'https:';\n\n//     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n//       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n//       urlObj.hostname.endsWith('cloudinary.com');\n\n//     return isAllowedDomain && isHttps && hasImageExtension;\n//   } catch {\n//     return false;\n//   }\n// };\n\n// // Custom Yup test for image URL validation\n// yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n//   return this.test('test-valid-image-url', errorMessage, function (value) {\n//     const { path, createError } = this;\n//     return !value || isValidImageUrl(value) || createError({\n//       path,\n//       message: errorMessage\n//     });\n//   });\n// });\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n//   const [showImageHelp, setShowImageHelp] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     if (!isValidImageUrl(convertedUrl)) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = convertedUrl;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n        \n//         const isImageValid = await validateImageUrl(convertedPosterUrl);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         const submitValues = {\n//           ...values,\n//           poster: convertedPosterUrl\n//         };\n\n//         await api.movies.add(submitValues);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         const convertedUrl = convertGoogleDriveURL(url);\n//         if (isValidImageUrl(convertedUrl)) {\n//           setImageLoading(true);\n//           setPreviewUrl(convertedUrl);\n//           const isValid = await validateImageUrl(convertedUrl);\n//           setImageError(!isValid);\n//         } else {\n//           setPreviewUrl(\"\");\n//           setImageError(false);\n//         }\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a HTTPS URL from one of the allowed sources\"\n//                 }\n//                 InputProps={{\n//                   endAdornment: (\n//                     <Tooltip title=\"Click for allowed image sources\">\n//                       <IconButton \n//                         size=\"small\" \n//                         onClick={() => setShowImageHelp(!showImageHelp)}\n//                       >\n//                         <InfoIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   ),\n//                 }}\n//               />\n//               {showImageHelp && (\n//                 <Paper sx={{ mt: 1, p: 2 }}>\n//                   <Typography variant=\"subtitle2\" gutterBottom>\n//                     Allowed Image Sources:\n//                   </Typography>\n//                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n//                     <Box key={description} sx={{ mb: 1 }}>\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\n//                         {description}:\n//                       </Typography>\n//                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n//                         Example: {example}\n//                       </Typography>\n//                     </Box>\n//                   ))}\n//                 </Paper>\n//               )}\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}