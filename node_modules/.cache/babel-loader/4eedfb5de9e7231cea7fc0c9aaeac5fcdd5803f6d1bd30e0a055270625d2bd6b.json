{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js\",\n  _s = $RefreshSig$();\n// // // // src/AddMovie.js\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import { api } from \"./config/api.config\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import {\n// // //   TextField,\n// // //   Button,\n// // //   FormControl,\n// // //   InputLabel,\n// // //   MenuItem,\n// // //   Select,\n// // //   CircularProgress,\n// // //   Alert\n// // // } from \"@mui/material\";\n\n// // // const movieValidationSchema = yup.object({\n// // //   name: yup.string().required(\"Name is required\").min(3),\n// // //   desc: yup.string().required(\"Description is required\").min(10),\n// // //   director: yup.string().required(\"Director is required\").min(3),\n// // //   poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\"),\n// // //   yearOfRelease: yup.number()\n// // //     .required(\"Year is required\")\n// // //     .min(1888)\n// // //     .max(new Date().getFullYear() + 5),\n// // //   producer: yup.string().required(\"Producer is required\"),\n// // //   actors: yup.array().min(1, \"At least one actor is required\")\n// // // });\n\n// // // const AddMovie = () => {\n// // //   const navigate = useNavigate();\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [error, setError] = useState(null);\n// // //   const [producers, setProducers] = useState([]);\n// // //   const [actors, setActors] = useState([]);\n\n// // //   useEffect(() => {\n// // //     loadInitialData();\n// // //   }, []);\n\n// // //   const loadInitialData = async () => {\n// // //     try {\n// // //       setLoading(true);\n// // //       const [producersRes, actorsRes] = await Promise.all([\n// // //         api.producers.getAll(),\n// // //         api.actors.getAll()\n// // //       ]);\n// // //       setProducers(producersRes.data);\n// // //       setActors(actorsRes.data);\n// // //     } catch (error) {\n// // //       setError(error.message || 'Failed to load initial data');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: \"\",\n// // //       desc: \"\",\n// // //       director: \"\",\n// // //       poster: \"\",\n// // //       yearOfRelease: \"\",\n// // //       producer: \"\",\n// // //       actors: []\n// // //     },\n// // //     validationSchema: movieValidationSchema,\n// // //     onSubmit: async (values) => {\n// // //       try {\n// // //         setLoading(true);\n// // //         await api.movies.add(values);\n// // //         navigate(\"/\");\n// // //       } catch (error) {\n// // //         setError(error.message || 'Failed to add movie');\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     }\n// // //   });\n\n// // //   if (loading) return <CircularProgress />;\n// // //   if (error) return <Alert severity=\"error\">{error}</Alert>;\n\n// // //   return (\n// // //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // //       <TextField\n// // //         fullWidth\n// // //         label=\"Movie Name\"\n// // //         {...formik.getFieldProps('name')}\n// // //         error={formik.touched.name && Boolean(formik.errors.name)}\n// // //         helperText={formik.touched.name && formik.errors.name}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         multiline\n// // //         rows={4}\n// // //         label=\"Description\"\n// // //         {...formik.getFieldProps('desc')}\n// // //         error={formik.touched.desc && Boolean(formik.errors.desc)}\n// // //         helperText={formik.touched.desc && formik.errors.desc}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         label=\"Director\"\n// // //         {...formik.getFieldProps('director')}\n// // //         error={formik.touched.director && Boolean(formik.errors.director)}\n// // //         helperText={formik.touched.director && formik.errors.director}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         label=\"Poster URL\"\n// // //         {...formik.getFieldProps('poster')}\n// // //         error={formik.touched.poster && Boolean(formik.errors.poster)}\n// // //         helperText={formik.touched.poster && formik.errors.poster}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         type=\"number\"\n// // //         label=\"Year of Release\"\n// // //         {...formik.getFieldProps('yearOfRelease')}\n// // //         error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// // //         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //       />\n// // //       <FormControl fullWidth>\n// // //         <InputLabel>Producer</InputLabel>\n// // //         <Select\n// // //           {...formik.getFieldProps('producer')}\n// // //           error={formik.touched.producer && Boolean(formik.errors.producer)}\n// // //         >\n// // //           {producers.map(producer => (\n// // //             <MenuItem key={producer._id} value={producer._id}>\n// // //               {producer.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n\n// // //       <FormControl fullWidth>\n// // //         <InputLabel>Actors</InputLabel>\n// // //         <Select\n// // //           multiple\n// // //           {...formik.getFieldProps('actors')}\n// // //           error={formik.touched.actors && Boolean(formik.errors.actors)}\n// // //         >\n// // //           {actors.map(actor => (\n// // //             <MenuItem key={actor._id} value={actor._id}>\n// // //               {actor.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n\n// // //       <Button \n// // //         variant=\"contained\" \n// // //         type=\"submit\" \n// // //         disabled={loading}\n// // //         fullWidth\n// // //       >\n// // //         {loading ? <CircularProgress size={24} /> : 'Add Movie'}\n// // //       </Button>\n// // //     </form>\n// // //   );\n// // // };\n\n// // // export default AddMovie;\n// // // src/components/AddMovie.js\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import { api } from \"./config/api.config\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import {\n// //   TextField,\n// //   Button,\n// //   FormControl,\n// //   InputLabel,\n// //   MenuItem,\n// //   Select,\n// //   CircularProgress,\n// //   Alert,\n// //   Container,\n// //   Box,\n// //   Typography,\n// //   Chip,\n// //   OutlinedInput,\n// //   FormHelperText,\n// //   Paper\n// // } from \"@mui/material\";\n\n// // const ITEM_HEIGHT = 48;\n// // const ITEM_PADDING_TOP = 8;\n// // const MenuProps = {\n// //   PaperProps: {\n// //     style: {\n// //       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n// //       width: 250,\n// //     },\n// //   },\n// // };\n\n// // const movieValidationSchema = yup.object({\n// //   name: yup\n// //     .string()\n// //     .required(\"Movie name is required\")\n// //     .min(3, \"Movie name must be at least 3 characters\"),\n// //   desc: yup\n// //     .string()\n// //     .required(\"Description is required\")\n// //     .min(10, \"Description must be at least 10 characters\"),\n// //   director: yup\n// //     .string()\n// //     .required(\"Director name is required\")\n// //     .min(3, \"Director name must be at least 3 characters\"),\n// //   poster: yup\n// //     .string()\n// //     .required(\"Poster URL is required\")\n// //     .url(\"Must be a valid URL\"),\n// //   yearOfRelease: yup\n// //     .number()\n// //     .required(\"Release year is required\")\n// //     .min(1888, \"Year must be 1888 or later\")\n// //     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n// //   producer: yup\n// //     .string()\n// //     .required(\"Producer selection is required\"),\n// //   actors: yup\n// //     .array()\n// //     .min(1, \"Please select at least one actor\")\n// //     .required(\"Actor selection is required\")\n// // });\n\n// // const AddMovie = () => {\n// //   const navigate = useNavigate();\n// //   const [loading, setLoading] = useState(false);\n// //   const [error, setError] = useState(null);\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n// //   useEffect(() => {\n// //     loadInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     // Update poster preview when URL changes\n// //     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n// //       setPreviewUrl(formik.values.poster);\n// //     } else {\n// //       setPreviewUrl(\"\");\n// //     }\n// //   }, [formik.values.poster]);\n\n// //   const loadInitialData = async () => {\n// //     try {\n// //       setLoading(true);\n// //       const [producersRes, actorsRes] = await Promise.all([\n// //         api.producers.getAll(),\n// //         api.actors.getAll()\n// //       ]);\n// //       setProducers(producersRes.data);\n// //       setActors(actorsRes.data);\n// //     } catch (err) {\n// //       setError(\"Failed to load producers and actors. Please try again later.\");\n// //       console.error(\"Load initial data error:\", err);\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: \"\",\n// //       desc: \"\",\n// //       director: \"\",\n// //       poster: \"\",\n// //       yearOfRelease: new Date().getFullYear(),\n// //       producer: \"\",\n// //       actors: []\n// //     },\n// //     validationSchema: movieValidationSchema,\n// //     onSubmit: async (values) => {\n// //       try {\n// //         setLoading(true);\n// //         setError(null);\n// //         await api.movies.add(values);\n// //         navigate(\"/\");\n// //       } catch (err) {\n// //         setError(\"Failed to add movie. Please try again.\");\n// //         console.error(\"Add movie error:\", err);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     }\n// //   });\n\n// //   if (loading && !producers.length && !actors.length) {\n// //     return (\n// //       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Container maxWidth=\"md\">\n// //       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n// //         <Typography variant=\"h4\" gutterBottom>\n// //           Add New Movie\n// //         </Typography>\n\n// //         {error && (\n// //           <Alert severity=\"error\" sx={{ mb: 2 }}>\n// //             {error}\n// //           </Alert>\n// //         )}\n\n// //         <Box sx={{ display: 'grid', gap: 2 }}>\n// //           <TextField\n// //             fullWidth\n// //             label=\"Movie Name\"\n// //             {...formik.getFieldProps('name')}\n// //             error={formik.touched.name && Boolean(formik.errors.name)}\n// //             helperText={formik.touched.name && formik.errors.name}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             multiline\n// //             rows={4}\n// //             label=\"Description\"\n// //             {...formik.getFieldProps('desc')}\n// //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// //             helperText={formik.touched.desc && formik.errors.desc}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             label=\"Director\"\n// //             {...formik.getFieldProps('director')}\n// //             error={formik.touched.director && Boolean(formik.errors.director)}\n// //             helperText={formik.touched.director && formik.errors.director}\n// //           />\n\n// //           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n// //             <Box sx={{ flex: 1 }}>\n// //               <TextField\n// //                 fullWidth\n// //                 label=\"Poster URL\"\n// //                 {...formik.getFieldProps('poster')}\n// //                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n// //                 helperText={formik.touched.poster && formik.errors.poster}\n// //               />\n// //             </Box>\n// //             {previewUrl && (\n// //               <Paper elevation={3} sx={{ p: 1 }}>\n// //                 <img\n// //                   src={previewUrl}\n// //                   alt=\"Poster preview\"\n// //                   style={{ height: 100, objectFit: 'contain' }}\n// //                   onError={() => setPreviewUrl(\"\")}\n// //                 />\n// //               </Paper>\n// //             )}\n// //           </Box>\n\n// //           <TextField\n// //             fullWidth\n// //             type=\"number\"\n// //             label=\"Year of Release\"\n// //             {...formik.getFieldProps('yearOfRelease')}\n// //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// //           />\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.producer && Boolean(formik.errors.producer)}\n// //           >\n// //             <InputLabel>Producer</InputLabel>\n// //             <Select\n// //               {...formik.getFieldProps('producer')}\n// //               label=\"Producer\"\n// //             >\n// //               {producers.map(producer => (\n// //                 <MenuItem key={producer._id} value={producer._id}>\n// //                   {producer.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.producer && formik.errors.producer && (\n// //               <FormHelperText>{formik.errors.producer}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.actors && Boolean(formik.errors.actors)}\n// //           >\n// //             <InputLabel>Actors</InputLabel>\n// //             <Select\n// //               multiple\n// //               {...formik.getFieldProps('actors')}\n// //               input={<OutlinedInput label=\"Actors\" />}\n// //               renderValue={(selected) => (\n// //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n// //                   {selected.map((value) => (\n// //                     <Chip\n// //                       key={value}\n// //                       label={actors.find(actor => actor._id === value)?.name}\n// //                       size=\"small\"\n// //                     />\n// //                   ))}\n// //                 </Box>\n// //               )}\n// //               MenuProps={MenuProps}\n// //             >\n// //               {actors.map(actor => (\n// //                 <MenuItem key={actor._id} value={actor._id}>\n// //                   {actor.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.actors && formik.errors.actors && (\n// //               <FormHelperText>{formik.errors.actors}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <Button\n// //             variant=\"contained\"\n// //             type=\"submit\"\n// //             disabled={loading}\n// //             size=\"large\"\n// //             sx={{ mt: 2 }}\n// //           >\n// //             {loading ? (\n// //               <CircularProgress size={24} sx={{ color: 'white' }} />\n// //             ) : (\n// //               'Add Movie'\n// //             )}\n// //           </Button>\n// //         </Box>\n// //       </Box>\n// //     </Container>\n// //   );\n// // };\n\n// // export default AddMovie;\n// // src/components/AddMovie.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper\n// } from \"@mui/material\";\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\"),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\"),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\"),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\"),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         await api.movies.add(values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(\"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n//       setPreviewUrl(formik.values.poster);\n//     } else {\n//       setPreviewUrl(\"\");\n//     }\n//   }, [formik.values.poster]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={formik.touched.poster && formik.errors.poster}\n//               />\n//             </Box>\n//             {previewUrl && (\n//               <Paper elevation={3} sx={{ p: 1 }}>\n//                 <img\n//                   src={previewUrl}\n//                   alt=\"Poster preview\"\n//                   style={{ height: 100, objectFit: 'contain' }}\n//                   onError={() => setPreviewUrl(\"\")}\n//                 />\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Alert, Container, Box, Typography, Chip, OutlinedInput, FormHelperText, Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nconst movieValidationSchema = yup.object({\n  name: yup.string().required(\"Movie name is required\").min(3, \"Movie name must be at least 3 characters\"),\n  desc: yup.string().required(\"Description is required\").min(10, \"Description must be at least 10 characters\"),\n  director: yup.string().required(\"Director name is required\").min(3, \"Director name must be at least 3 characters\"),\n  poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\"),\n  yearOfRelease: yup.number().required(\"Release year is required\").min(1888, \"Year must be 1888 or later\").max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup.string().required(\"Producer selection is required\"),\n  actors: yup.array().min(1, \"Please select at least one actor\").required(\"Actor selection is required\")\n});\nconst AddMovie = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const [imageError, setImageError] = useState(false);\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async values => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(\"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n  useEffect(() => {\n    if (formik.values.poster && yup.string().url().isValidSync(formik.values.poster)) {\n      setPreviewUrl(formik.values.poster);\n      setImageError(false);\n    } else {\n      setPreviewUrl(\"\");\n      setImageError(false);\n    }\n  }, [formik.values.poster]);\n  const loadInitialData = async () => {\n    try {\n      setInitialLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([api.producers.getAll(), api.actors.getAll()]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n  if (initialLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 865,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: formik.handleSubmit,\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Add New Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'grid',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Movie Name\",\n          ...formik.getFieldProps('name'),\n          error: formik.touched.name && Boolean(formik.errors.name),\n          helperText: formik.touched.name && formik.errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          label: \"Description\",\n          ...formik.getFieldProps('desc'),\n          error: formik.touched.desc && Boolean(formik.errors.desc),\n          helperText: formik.touched.desc && formik.errors.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Director\",\n          ...formik.getFieldProps('director'),\n          error: formik.touched.director && Boolean(formik.errors.director),\n          helperText: formik.touched.director && formik.errors.director\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 2,\n            alignItems: 'flex-start'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Poster URL\",\n              ...formik.getFieldProps('poster'),\n              error: formik.touched.poster && Boolean(formik.errors.poster),\n              helperText: formik.touched.poster && formik.errors.poster\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 13\n          }, this), previewUrl && /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            sx: {\n              p: 1,\n              minWidth: 100,\n              minHeight: 100,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: '#f5f5f5'\n            },\n            children: imageError ? /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"error\",\n              align: \"center\",\n              children: \"Failed to load image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 932,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              src: previewUrl,\n              alt: \"Poster preview\",\n              style: {\n                maxWidth: '100%',\n                maxHeight: '100%',\n                objectFit: 'contain'\n              },\n              onError: () => setImageError(true),\n              onLoad: () => setImageError(false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          type: \"number\",\n          label: \"Year of Release\",\n          ...formik.getFieldProps('yearOfRelease'),\n          error: formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease),\n          helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.producer && Boolean(formik.errors.producer),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Producer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 965,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            ...formik.getFieldProps('producer'),\n            label: \"Producer\",\n            children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: producer._id,\n              children: producer.name\n            }, producer._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 966,\n            columnNumber: 13\n          }, this), formik.touched.producer && formik.errors.producer && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.producer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.actors && Boolean(formik.errors.actors),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Actors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 985,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            ...formik.getFieldProps('actors'),\n            input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              label: \"Actors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 22\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 0.5\n              },\n              children: selected.map(value => {\n                var _actors$find;\n                return /*#__PURE__*/_jsxDEV(Chip, {\n                  label: (_actors$find = actors.find(actor => actor._id === value)) === null || _actors$find === void 0 ? void 0 : _actors$find.name,\n                  size: \"small\"\n                }, value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 993,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 991,\n              columnNumber: 17\n            }, this),\n            MenuProps: MenuProps,\n            children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: actor._id,\n              children: actor.name\n            }, actor._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1004,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 986,\n            columnNumber: 13\n          }, this), formik.touched.actors && formik.errors.actors && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.actors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1010,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 981,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: loading,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            sx: {\n              color: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1022,\n            columnNumber: 15\n          }, this) : 'Add Movie'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 872,\n    columnNumber: 5\n  }, this);\n};\n_s(AddMovie, \"k8J0HO0pFLyWlE4IqOt1QnyKCVs=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = AddMovie;\nexport default AddMovie;\nvar _c;\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","api","useFormik","yup","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Alert","Container","Box","Typography","Chip","OutlinedInput","FormHelperText","Paper","jsxDEV","_jsxDEV","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","movieValidationSchema","object","name","string","required","min","desc","director","poster","url","yearOfRelease","number","max","Date","getFullYear","producer","actors","array","AddMovie","_s","navigate","loading","setLoading","initialLoading","setInitialLoading","error","setError","producers","setProducers","setActors","previewUrl","setPreviewUrl","imageError","setImageError","formik","initialValues","validationSchema","onSubmit","values","movies","add","err","console","loadInitialData","isValidSync","producersRes","actorsRes","Promise","all","getAll","data","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","component","handleSubmit","sx","mt","mb","variant","gutterBottom","severity","gap","fullWidth","label","getFieldProps","touched","Boolean","errors","helperText","multiline","rows","flex","elevation","p","minWidth","backgroundColor","color","align","src","alt","objectFit","onError","onLoad","type","map","value","_id","multiple","input","renderValue","selected","flexWrap","_actors$find","find","actor","size","disabled","_c","$RefreshReg$"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js"],"sourcesContent":["// // // // src/AddMovie.js\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import { api } from \"./config/api.config\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import {\n// // //   TextField,\n// // //   Button,\n// // //   FormControl,\n// // //   InputLabel,\n// // //   MenuItem,\n// // //   Select,\n// // //   CircularProgress,\n// // //   Alert\n// // // } from \"@mui/material\";\n\n// // // const movieValidationSchema = yup.object({\n// // //   name: yup.string().required(\"Name is required\").min(3),\n// // //   desc: yup.string().required(\"Description is required\").min(10),\n// // //   director: yup.string().required(\"Director is required\").min(3),\n// // //   poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\"),\n// // //   yearOfRelease: yup.number()\n// // //     .required(\"Year is required\")\n// // //     .min(1888)\n// // //     .max(new Date().getFullYear() + 5),\n// // //   producer: yup.string().required(\"Producer is required\"),\n// // //   actors: yup.array().min(1, \"At least one actor is required\")\n// // // });\n\n// // // const AddMovie = () => {\n// // //   const navigate = useNavigate();\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [error, setError] = useState(null);\n// // //   const [producers, setProducers] = useState([]);\n// // //   const [actors, setActors] = useState([]);\n\n// // //   useEffect(() => {\n// // //     loadInitialData();\n// // //   }, []);\n\n// // //   const loadInitialData = async () => {\n// // //     try {\n// // //       setLoading(true);\n// // //       const [producersRes, actorsRes] = await Promise.all([\n// // //         api.producers.getAll(),\n// // //         api.actors.getAll()\n// // //       ]);\n// // //       setProducers(producersRes.data);\n// // //       setActors(actorsRes.data);\n// // //     } catch (error) {\n// // //       setError(error.message || 'Failed to load initial data');\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: \"\",\n// // //       desc: \"\",\n// // //       director: \"\",\n// // //       poster: \"\",\n// // //       yearOfRelease: \"\",\n// // //       producer: \"\",\n// // //       actors: []\n// // //     },\n// // //     validationSchema: movieValidationSchema,\n// // //     onSubmit: async (values) => {\n// // //       try {\n// // //         setLoading(true);\n// // //         await api.movies.add(values);\n// // //         navigate(\"/\");\n// // //       } catch (error) {\n// // //         setError(error.message || 'Failed to add movie');\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     }\n// // //   });\n\n// // //   if (loading) return <CircularProgress />;\n// // //   if (error) return <Alert severity=\"error\">{error}</Alert>;\n\n// // //   return (\n// // //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // //       <TextField\n// // //         fullWidth\n// // //         label=\"Movie Name\"\n// // //         {...formik.getFieldProps('name')}\n// // //         error={formik.touched.name && Boolean(formik.errors.name)}\n// // //         helperText={formik.touched.name && formik.errors.name}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         multiline\n// // //         rows={4}\n// // //         label=\"Description\"\n// // //         {...formik.getFieldProps('desc')}\n// // //         error={formik.touched.desc && Boolean(formik.errors.desc)}\n// // //         helperText={formik.touched.desc && formik.errors.desc}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         label=\"Director\"\n// // //         {...formik.getFieldProps('director')}\n// // //         error={formik.touched.director && Boolean(formik.errors.director)}\n// // //         helperText={formik.touched.director && formik.errors.director}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         label=\"Poster URL\"\n// // //         {...formik.getFieldProps('poster')}\n// // //         error={formik.touched.poster && Boolean(formik.errors.poster)}\n// // //         helperText={formik.touched.poster && formik.errors.poster}\n// // //       />\n// // //       <TextField\n// // //         fullWidth\n// // //         type=\"number\"\n// // //         label=\"Year of Release\"\n// // //         {...formik.getFieldProps('yearOfRelease')}\n// // //         error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// // //         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //       />\n// // //       <FormControl fullWidth>\n// // //         <InputLabel>Producer</InputLabel>\n// // //         <Select\n// // //           {...formik.getFieldProps('producer')}\n// // //           error={formik.touched.producer && Boolean(formik.errors.producer)}\n// // //         >\n// // //           {producers.map(producer => (\n// // //             <MenuItem key={producer._id} value={producer._id}>\n// // //               {producer.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n      \n// // //       <FormControl fullWidth>\n// // //         <InputLabel>Actors</InputLabel>\n// // //         <Select\n// // //           multiple\n// // //           {...formik.getFieldProps('actors')}\n// // //           error={formik.touched.actors && Boolean(formik.errors.actors)}\n// // //         >\n// // //           {actors.map(actor => (\n// // //             <MenuItem key={actor._id} value={actor._id}>\n// // //               {actor.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n\n// // //       <Button \n// // //         variant=\"contained\" \n// // //         type=\"submit\" \n// // //         disabled={loading}\n// // //         fullWidth\n// // //       >\n// // //         {loading ? <CircularProgress size={24} /> : 'Add Movie'}\n// // //       </Button>\n// // //     </form>\n// // //   );\n// // // };\n\n// // // export default AddMovie;\n// // // src/components/AddMovie.js\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import { api } from \"./config/api.config\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import {\n// //   TextField,\n// //   Button,\n// //   FormControl,\n// //   InputLabel,\n// //   MenuItem,\n// //   Select,\n// //   CircularProgress,\n// //   Alert,\n// //   Container,\n// //   Box,\n// //   Typography,\n// //   Chip,\n// //   OutlinedInput,\n// //   FormHelperText,\n// //   Paper\n// // } from \"@mui/material\";\n\n// // const ITEM_HEIGHT = 48;\n// // const ITEM_PADDING_TOP = 8;\n// // const MenuProps = {\n// //   PaperProps: {\n// //     style: {\n// //       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n// //       width: 250,\n// //     },\n// //   },\n// // };\n\n// // const movieValidationSchema = yup.object({\n// //   name: yup\n// //     .string()\n// //     .required(\"Movie name is required\")\n// //     .min(3, \"Movie name must be at least 3 characters\"),\n// //   desc: yup\n// //     .string()\n// //     .required(\"Description is required\")\n// //     .min(10, \"Description must be at least 10 characters\"),\n// //   director: yup\n// //     .string()\n// //     .required(\"Director name is required\")\n// //     .min(3, \"Director name must be at least 3 characters\"),\n// //   poster: yup\n// //     .string()\n// //     .required(\"Poster URL is required\")\n// //     .url(\"Must be a valid URL\"),\n// //   yearOfRelease: yup\n// //     .number()\n// //     .required(\"Release year is required\")\n// //     .min(1888, \"Year must be 1888 or later\")\n// //     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n// //   producer: yup\n// //     .string()\n// //     .required(\"Producer selection is required\"),\n// //   actors: yup\n// //     .array()\n// //     .min(1, \"Please select at least one actor\")\n// //     .required(\"Actor selection is required\")\n// // });\n\n// // const AddMovie = () => {\n// //   const navigate = useNavigate();\n// //   const [loading, setLoading] = useState(false);\n// //   const [error, setError] = useState(null);\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n// //   useEffect(() => {\n// //     loadInitialData();\n// //   }, []);\n\n// //   useEffect(() => {\n// //     // Update poster preview when URL changes\n// //     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n// //       setPreviewUrl(formik.values.poster);\n// //     } else {\n// //       setPreviewUrl(\"\");\n// //     }\n// //   }, [formik.values.poster]);\n\n// //   const loadInitialData = async () => {\n// //     try {\n// //       setLoading(true);\n// //       const [producersRes, actorsRes] = await Promise.all([\n// //         api.producers.getAll(),\n// //         api.actors.getAll()\n// //       ]);\n// //       setProducers(producersRes.data);\n// //       setActors(actorsRes.data);\n// //     } catch (err) {\n// //       setError(\"Failed to load producers and actors. Please try again later.\");\n// //       console.error(\"Load initial data error:\", err);\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: \"\",\n// //       desc: \"\",\n// //       director: \"\",\n// //       poster: \"\",\n// //       yearOfRelease: new Date().getFullYear(),\n// //       producer: \"\",\n// //       actors: []\n// //     },\n// //     validationSchema: movieValidationSchema,\n// //     onSubmit: async (values) => {\n// //       try {\n// //         setLoading(true);\n// //         setError(null);\n// //         await api.movies.add(values);\n// //         navigate(\"/\");\n// //       } catch (err) {\n// //         setError(\"Failed to add movie. Please try again.\");\n// //         console.error(\"Add movie error:\", err);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     }\n// //   });\n\n// //   if (loading && !producers.length && !actors.length) {\n// //     return (\n// //       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Container maxWidth=\"md\">\n// //       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n// //         <Typography variant=\"h4\" gutterBottom>\n// //           Add New Movie\n// //         </Typography>\n\n// //         {error && (\n// //           <Alert severity=\"error\" sx={{ mb: 2 }}>\n// //             {error}\n// //           </Alert>\n// //         )}\n\n// //         <Box sx={{ display: 'grid', gap: 2 }}>\n// //           <TextField\n// //             fullWidth\n// //             label=\"Movie Name\"\n// //             {...formik.getFieldProps('name')}\n// //             error={formik.touched.name && Boolean(formik.errors.name)}\n// //             helperText={formik.touched.name && formik.errors.name}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             multiline\n// //             rows={4}\n// //             label=\"Description\"\n// //             {...formik.getFieldProps('desc')}\n// //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// //             helperText={formik.touched.desc && formik.errors.desc}\n// //           />\n\n// //           <TextField\n// //             fullWidth\n// //             label=\"Director\"\n// //             {...formik.getFieldProps('director')}\n// //             error={formik.touched.director && Boolean(formik.errors.director)}\n// //             helperText={formik.touched.director && formik.errors.director}\n// //           />\n\n// //           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n// //             <Box sx={{ flex: 1 }}>\n// //               <TextField\n// //                 fullWidth\n// //                 label=\"Poster URL\"\n// //                 {...formik.getFieldProps('poster')}\n// //                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n// //                 helperText={formik.touched.poster && formik.errors.poster}\n// //               />\n// //             </Box>\n// //             {previewUrl && (\n// //               <Paper elevation={3} sx={{ p: 1 }}>\n// //                 <img\n// //                   src={previewUrl}\n// //                   alt=\"Poster preview\"\n// //                   style={{ height: 100, objectFit: 'contain' }}\n// //                   onError={() => setPreviewUrl(\"\")}\n// //                 />\n// //               </Paper>\n// //             )}\n// //           </Box>\n\n// //           <TextField\n// //             fullWidth\n// //             type=\"number\"\n// //             label=\"Year of Release\"\n// //             {...formik.getFieldProps('yearOfRelease')}\n// //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// //           />\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.producer && Boolean(formik.errors.producer)}\n// //           >\n// //             <InputLabel>Producer</InputLabel>\n// //             <Select\n// //               {...formik.getFieldProps('producer')}\n// //               label=\"Producer\"\n// //             >\n// //               {producers.map(producer => (\n// //                 <MenuItem key={producer._id} value={producer._id}>\n// //                   {producer.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.producer && formik.errors.producer && (\n// //               <FormHelperText>{formik.errors.producer}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <FormControl \n// //             fullWidth\n// //             error={formik.touched.actors && Boolean(formik.errors.actors)}\n// //           >\n// //             <InputLabel>Actors</InputLabel>\n// //             <Select\n// //               multiple\n// //               {...formik.getFieldProps('actors')}\n// //               input={<OutlinedInput label=\"Actors\" />}\n// //               renderValue={(selected) => (\n// //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n// //                   {selected.map((value) => (\n// //                     <Chip\n// //                       key={value}\n// //                       label={actors.find(actor => actor._id === value)?.name}\n// //                       size=\"small\"\n// //                     />\n// //                   ))}\n// //                 </Box>\n// //               )}\n// //               MenuProps={MenuProps}\n// //             >\n// //               {actors.map(actor => (\n// //                 <MenuItem key={actor._id} value={actor._id}>\n// //                   {actor.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //             {formik.touched.actors && formik.errors.actors && (\n// //               <FormHelperText>{formik.errors.actors}</FormHelperText>\n// //             )}\n// //           </FormControl>\n\n// //           <Button\n// //             variant=\"contained\"\n// //             type=\"submit\"\n// //             disabled={loading}\n// //             size=\"large\"\n// //             sx={{ mt: 2 }}\n// //           >\n// //             {loading ? (\n// //               <CircularProgress size={24} sx={{ color: 'white' }} />\n// //             ) : (\n// //               'Add Movie'\n// //             )}\n// //           </Button>\n// //         </Box>\n// //       </Box>\n// //     </Container>\n// //   );\n// // };\n\n// // export default AddMovie;\n// // src/components/AddMovie.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper\n// } from \"@mui/material\";\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\"),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\"),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\"),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\"),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         await api.movies.add(values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(\"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n//       setPreviewUrl(formik.values.poster);\n//     } else {\n//       setPreviewUrl(\"\");\n//     }\n//   }, [formik.values.poster]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={formik.touched.poster && formik.errors.poster}\n//               />\n//             </Box>\n//             {previewUrl && (\n//               <Paper elevation={3} sx={{ p: 1 }}>\n//                 <img\n//                   src={previewUrl}\n//                   alt=\"Poster preview\"\n//                   style={{ height: 100, objectFit: 'contain' }}\n//                   onError={() => setPreviewUrl(\"\")}\n//                 />\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  CircularProgress,\n  Alert,\n  Container,\n  Box,\n  Typography,\n  Chip,\n  OutlinedInput,\n  FormHelperText,\n  Paper\n} from \"@mui/material\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst movieValidationSchema = yup.object({\n  name: yup\n    .string()\n    .required(\"Movie name is required\")\n    .min(3, \"Movie name must be at least 3 characters\"),\n  desc: yup\n    .string()\n    .required(\"Description is required\")\n    .min(10, \"Description must be at least 10 characters\"),\n  director: yup\n    .string()\n    .required(\"Director name is required\")\n    .min(3, \"Director name must be at least 3 characters\"),\n  poster: yup\n    .string()\n    .required(\"Poster URL is required\")\n    .url(\"Must be a valid URL\"),\n  yearOfRelease: yup\n    .number()\n    .required(\"Release year is required\")\n    .min(1888, \"Year must be 1888 or later\")\n    .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup\n    .string()\n    .required(\"Producer selection is required\"),\n  actors: yup\n    .array()\n    .min(1, \"Please select at least one actor\")\n    .required(\"Actor selection is required\")\n});\n\nconst AddMovie = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const [imageError, setImageError] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (values) => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(\"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  useEffect(() => {\n    if (formik.values.poster && yup.string().url().isValidSync(formik.values.poster)) {\n      setPreviewUrl(formik.values.poster);\n      setImageError(false);\n    } else {\n      setPreviewUrl(\"\");\n      setImageError(false);\n    }\n  }, [formik.values.poster]);\n\n  const loadInitialData = async () => {\n    try {\n      setInitialLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([\n        api.producers.getAll(),\n        api.actors.getAll()\n      ]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n\n  if (initialLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Add New Movie\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Box sx={{ display: 'grid', gap: 2 }}>\n          <TextField\n            fullWidth\n            label=\"Movie Name\"\n            {...formik.getFieldProps('name')}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            label=\"Description\"\n            {...formik.getFieldProps('desc')}\n            error={formik.touched.desc && Boolean(formik.errors.desc)}\n            helperText={formik.touched.desc && formik.errors.desc}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Director\"\n            {...formik.getFieldProps('director')}\n            error={formik.touched.director && Boolean(formik.errors.director)}\n            helperText={formik.touched.director && formik.errors.director}\n          />\n\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n            <Box sx={{ flex: 1 }}>\n              <TextField\n                fullWidth\n                label=\"Poster URL\"\n                {...formik.getFieldProps('poster')}\n                error={formik.touched.poster && Boolean(formik.errors.poster)}\n                helperText={formik.touched.poster && formik.errors.poster}\n              />\n            </Box>\n            {previewUrl && (\n              <Paper elevation={3} sx={{ \n                p: 1, \n                minWidth: 100, \n                minHeight: 100, \n                display: 'flex', \n                alignItems: 'center', \n                justifyContent: 'center',\n                backgroundColor: '#f5f5f5'\n              }}>\n                {imageError ? (\n                  <Typography variant=\"caption\" color=\"error\" align=\"center\">\n                    Failed to load image\n                  </Typography>\n                ) : (\n                  <img\n                    src={previewUrl}\n                    alt=\"Poster preview\"\n                    style={{ \n                      maxWidth: '100%',\n                      maxHeight: '100%',\n                      objectFit: 'contain'\n                    }}\n                    onError={() => setImageError(true)}\n                    onLoad={() => setImageError(false)}\n                  />\n                )}\n              </Paper>\n            )}\n          </Box>\n\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"Year of Release\"\n            {...formik.getFieldProps('yearOfRelease')}\n            error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n            helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n          />\n\n          <FormControl \n            fullWidth\n            error={formik.touched.producer && Boolean(formik.errors.producer)}\n          >\n            <InputLabel>Producer</InputLabel>\n            <Select\n              {...formik.getFieldProps('producer')}\n              label=\"Producer\"\n            >\n              {producers.map(producer => (\n                <MenuItem key={producer._id} value={producer._id}>\n                  {producer.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.producer && formik.errors.producer && (\n              <FormHelperText>{formik.errors.producer}</FormHelperText>\n            )}\n          </FormControl>\n\n          <FormControl \n            fullWidth\n            error={formik.touched.actors && Boolean(formik.errors.actors)}\n          >\n            <InputLabel>Actors</InputLabel>\n            <Select\n              multiple\n              {...formik.getFieldProps('actors')}\n              input={<OutlinedInput label=\"Actors\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip\n                      key={value}\n                      label={actors.find(actor => actor._id === value)?.name}\n                      size=\"small\"\n                    />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >\n              {actors.map(actor => (\n                <MenuItem key={actor._id} value={actor._id}>\n                  {actor.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.actors && formik.errors.actors && (\n              <FormHelperText>{formik.errors.actors}</FormHelperText>\n            )}\n          </FormControl>\n\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            disabled={loading}\n            size=\"large\"\n            sx={{ mt: 2 }}\n          >\n            {loading ? (\n              <CircularProgress size={24} sx={{ color: 'white' }} />\n            ) : (\n              'Add Movie'\n            )}\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AddMovie;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}