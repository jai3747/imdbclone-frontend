{"ast":null,"code":"// // src/EditMovies.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper\n// } from \"@mui/material\";\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\"),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\"),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\"),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\"),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const EditMovies = () => {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         await api.movies.update(id, values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(\"Failed to update movie. Please try again.\");\n//         console.error(\"Update movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n//       setPreviewUrl(formik.values.poster);\n//     } else {\n//       setPreviewUrl(\"\");\n//     }\n//   }, [formik.values.poster]);\n\n//   const loadData = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n\n//       const [movieRes, producersRes, actorsRes] = await Promise.all([\n//         api.movies.getById(id),\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n\n//       // Set form values from movie data\n//       formik.setValues({\n//         name: movieRes.data.name,\n//         desc: movieRes.data.desc,\n//         director: movieRes.data.director,\n//         poster: movieRes.data.poster,\n//         yearOfRelease: movieRes.data.yearOfRelease,\n//         producer: movieRes.data.producer,\n//         actors: movieRes.data.actors.map(actor => actor._id)\n//       });\n//     } catch (err) {\n//       setError(\"Failed to load movie data. Please try again later.\");\n//       console.error(\"Load data error:\", err);\n//       navigate(\"/\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Edit Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={formik.touched.poster && formik.errors.poster}\n//               />\n//             </Box>\n//             {previewUrl && (\n//               <Paper elevation={3} sx={{ p: 1 }}>\n//                 <img\n//                   src={previewUrl}\n//                   alt=\"Poster preview\"\n//                   style={{ height: 100, objectFit: 'contain' }}\n//                   onError={() => setPreviewUrl(\"\")}\n//                 />\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => {\n//                     const actor = actors.find(a => a._id === value);\n//                     return (\n//                       <Chip\n//                         key={value}\n//                         label={actor ? actor.name : 'Unknown'}\n//                         size=\"small\"\n//                       />\n//                     );\n//                   })}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n//             <Button\n//               variant=\"contained\"\n//               type=\"submit\"\n//               disabled={loading}\n//               size=\"large\"\n//               fullWidth\n//             >\n//               {loading ? (\n//                 <CircularProgress size={24} sx={{ color: 'white' }} />\n//               ) : (\n//                 'Update Movie'\n//               )}\n//             </Button>\n//             <Button\n//               variant=\"outlined\"\n//               size=\"large\"\n//               fullWidth\n//               onClick={() => navigate(\"/\")}\n//             >\n//               Cancel\n//             </Button>\n//           </Box>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default EditMovies;","map":{"version":3,"names":[],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/EditMovies.js"],"sourcesContent":["// // src/EditMovies.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper\n// } from \"@mui/material\";\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\"),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\"),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\"),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\"),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const EditMovies = () => {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         await api.movies.update(id, values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(\"Failed to update movie. Please try again.\");\n//         console.error(\"Update movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n//       setPreviewUrl(formik.values.poster);\n//     } else {\n//       setPreviewUrl(\"\");\n//     }\n//   }, [formik.values.poster]);\n\n//   const loadData = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n      \n//       const [movieRes, producersRes, actorsRes] = await Promise.all([\n//         api.movies.getById(id),\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n\n//       // Set form values from movie data\n//       formik.setValues({\n//         name: movieRes.data.name,\n//         desc: movieRes.data.desc,\n//         director: movieRes.data.director,\n//         poster: movieRes.data.poster,\n//         yearOfRelease: movieRes.data.yearOfRelease,\n//         producer: movieRes.data.producer,\n//         actors: movieRes.data.actors.map(actor => actor._id)\n//       });\n//     } catch (err) {\n//       setError(\"Failed to load movie data. Please try again later.\");\n//       console.error(\"Load data error:\", err);\n//       navigate(\"/\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Edit Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={formik.touched.poster && formik.errors.poster}\n//               />\n//             </Box>\n//             {previewUrl && (\n//               <Paper elevation={3} sx={{ p: 1 }}>\n//                 <img\n//                   src={previewUrl}\n//                   alt=\"Poster preview\"\n//                   style={{ height: 100, objectFit: 'contain' }}\n//                   onError={() => setPreviewUrl(\"\")}\n//                 />\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => {\n//                     const actor = actors.find(a => a._id === value);\n//                     return (\n//                       <Chip\n//                         key={value}\n//                         label={actor ? actor.name : 'Unknown'}\n//                         size=\"small\"\n//                       />\n//                     );\n//                   })}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n//             <Button\n//               variant=\"contained\"\n//               type=\"submit\"\n//               disabled={loading}\n//               size=\"large\"\n//               fullWidth\n//             >\n//               {loading ? (\n//                 <CircularProgress size={24} sx={{ color: 'white' }} />\n//               ) : (\n//                 'Update Movie'\n//               )}\n//             </Button>\n//             <Button\n//               variant=\"outlined\"\n//               size=\"large\"\n//               fullWidth\n//               onClick={() => navigate(\"/\")}\n//             >\n//               Cancel\n//             </Button>\n//           </Box>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default EditMovies;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}