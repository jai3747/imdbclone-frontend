{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js\",\n  _s = $RefreshSig$();\n// // src/AddMovie.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert\n// } from \"@mui/material\";\n\n// const movieValidationSchema = yup.object({\n//   name: yup.string().required(\"Name is required\").min(3),\n//   desc: yup.string().required(\"Description is required\").min(10),\n//   director: yup.string().required(\"Director is required\").min(3),\n//   poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\"),\n//   yearOfRelease: yup.number()\n//     .required(\"Year is required\")\n//     .min(1888)\n//     .max(new Date().getFullYear() + 5),\n//   producer: yup.string().required(\"Producer is required\"),\n//   actors: yup.array().min(1, \"At least one actor is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (error) {\n//       setError(error.message || 'Failed to load initial data');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: \"\",\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         await api.movies.add(values);\n//         navigate(\"/\");\n//       } catch (error) {\n//         setError(error.message || 'Failed to add movie');\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   if (loading) return <CircularProgress />;\n//   if (error) return <Alert severity=\"error\">{error}</Alert>;\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//       <TextField\n//         fullWidth\n//         label=\"Movie Name\"\n//         {...formik.getFieldProps('name')}\n//         error={formik.touched.name && Boolean(formik.errors.name)}\n//         helperText={formik.touched.name && formik.errors.name}\n//       />\n//       <TextField\n//         fullWidth\n//         multiline\n//         rows={4}\n//         label=\"Description\"\n//         {...formik.getFieldProps('desc')}\n//         error={formik.touched.desc && Boolean(formik.errors.desc)}\n//         helperText={formik.touched.desc && formik.errors.desc}\n//       />\n//       <TextField\n//         fullWidth\n//         label=\"Director\"\n//         {...formik.getFieldProps('director')}\n//         error={formik.touched.director && Boolean(formik.errors.director)}\n//         helperText={formik.touched.director && formik.errors.director}\n//       />\n//       <TextField\n//         fullWidth\n//         label=\"Poster URL\"\n//         {...formik.getFieldProps('poster')}\n//         error={formik.touched.poster && Boolean(formik.errors.poster)}\n//         helperText={formik.touched.poster && formik.errors.poster}\n//       />\n//       <TextField\n//         fullWidth\n//         type=\"number\"\n//         label=\"Year of Release\"\n//         {...formik.getFieldProps('yearOfRelease')}\n//         error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//       />\n//       <FormControl fullWidth>\n//         <InputLabel>Producer</InputLabel>\n//         <Select\n//           {...formik.getFieldProps('producer')}\n//           error={formik.touched.producer && Boolean(formik.errors.producer)}\n//         >\n//           {producers.map(producer => (\n//             <MenuItem key={producer._id} value={producer._id}>\n//               {producer.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n\n//       <FormControl fullWidth>\n//         <InputLabel>Actors</InputLabel>\n//         <Select\n//           multiple\n//           {...formik.getFieldProps('actors')}\n//           error={formik.touched.actors && Boolean(formik.errors.actors)}\n//         >\n//           {actors.map(actor => (\n//             <MenuItem key={actor._id} value={actor._id}>\n//               {actor.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n\n//       <Button \n//         variant=\"contained\" \n//         type=\"submit\" \n//         disabled={loading}\n//         fullWidth\n//       >\n//         {loading ? <CircularProgress size={24} /> : 'Add Movie'}\n//       </Button>\n//     </form>\n//   );\n// };\n\n// export default AddMovie;\n// src/components/AddMovie.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"../config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Alert, Container, Box, Typography, Chip, OutlinedInput, FormHelperText, Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nconst movieValidationSchema = yup.object({\n  name: yup.string().required(\"Movie name is required\").min(3, \"Movie name must be at least 3 characters\"),\n  desc: yup.string().required(\"Description is required\").min(10, \"Description must be at least 10 characters\"),\n  director: yup.string().required(\"Director name is required\").min(3, \"Director name must be at least 3 characters\"),\n  poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\"),\n  yearOfRelease: yup.number().required(\"Release year is required\").min(1888, \"Year must be 1888 or later\").max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup.string().required(\"Producer selection is required\"),\n  actors: yup.array().min(1, \"Please select at least one actor\").required(\"Actor selection is required\")\n});\nconst AddMovie = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n  useEffect(() => {\n    // Update poster preview when URL changes\n    if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n      setPreviewUrl(formik.values.poster);\n    } else {\n      setPreviewUrl(\"\");\n    }\n  }, [formik.values.poster]);\n  const loadInitialData = async () => {\n    try {\n      setLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([api.producers.getAll(), api.actors.getAll()]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async values => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(\"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n  if (loading && !producers.length && !actors.length) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: formik.handleSubmit,\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Add New Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'grid',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Movie Name\",\n          ...formik.getFieldProps('name'),\n          error: formik.touched.name && Boolean(formik.errors.name),\n          helperText: formik.touched.name && formik.errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          label: \"Description\",\n          ...formik.getFieldProps('desc'),\n          error: formik.touched.desc && Boolean(formik.errors.desc),\n          helperText: formik.touched.desc && formik.errors.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Director\",\n          ...formik.getFieldProps('director'),\n          error: formik.touched.director && Boolean(formik.errors.director),\n          helperText: formik.touched.director && formik.errors.director\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 2,\n            alignItems: 'flex-start'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Poster URL\",\n              ...formik.getFieldProps('poster'),\n              error: formik.touched.poster && Boolean(formik.errors.poster),\n              helperText: formik.touched.poster && formik.errors.poster\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), previewUrl && /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            sx: {\n              p: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: previewUrl,\n              alt: \"Poster preview\",\n              style: {\n                height: 100,\n                objectFit: 'contain'\n              },\n              onError: () => setPreviewUrl(\"\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          type: \"number\",\n          label: \"Year of Release\",\n          ...formik.getFieldProps('yearOfRelease'),\n          error: formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease),\n          helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.producer && Boolean(formik.errors.producer),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Producer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            ...formik.getFieldProps('producer'),\n            label: \"Producer\",\n            children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: producer._id,\n              children: producer.name\n            }, producer._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this), formik.touched.producer && formik.errors.producer && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.producer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.actors && Boolean(formik.errors.actors),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Actors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            ...formik.getFieldProps('actors'),\n            input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              label: \"Actors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 22\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 0.5\n              },\n              children: selected.map(value => {\n                var _actors$find;\n                return /*#__PURE__*/_jsxDEV(Chip, {\n                  label: (_actors$find = actors.find(actor => actor._id === value)) === null || _actors$find === void 0 ? void 0 : _actors$find.name,\n                  size: \"small\"\n                }, value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 17\n            }, this),\n            MenuProps: MenuProps,\n            children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: actor._id,\n              children: actor.name\n            }, actor._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), formik.touched.actors && formik.errors.actors && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.actors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          disabled: loading,\n          size: \"large\",\n          sx: {\n            mt: 2\n          },\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            sx: {\n              color: 'white'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this) : 'Add Movie'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n};\n_s(AddMovie, \"zWBhZ0Xe4f+Fyj9ar7OFg7Glnno=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = AddMovie;\nexport default AddMovie;\nvar _c;\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","api","useFormik","yup","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Alert","Container","Box","Typography","Chip","OutlinedInput","FormHelperText","Paper","jsxDEV","_jsxDEV","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","movieValidationSchema","object","name","string","required","min","desc","director","poster","url","yearOfRelease","number","max","Date","getFullYear","producer","actors","array","AddMovie","_s","navigate","loading","setLoading","error","setError","producers","setProducers","setActors","previewUrl","setPreviewUrl","loadInitialData","formik","values","match","producersRes","actorsRes","Promise","all","getAll","data","err","console","initialValues","validationSchema","onSubmit","movies","add","length","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","component","handleSubmit","sx","mt","mb","variant","gutterBottom","severity","gap","fullWidth","label","getFieldProps","touched","Boolean","errors","helperText","multiline","rows","flex","elevation","p","src","alt","height","objectFit","onError","type","map","value","_id","multiple","input","renderValue","selected","flexWrap","_actors$find","find","actor","size","disabled","color","_c","$RefreshReg$"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js"],"sourcesContent":["// // src/AddMovie.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert\n// } from \"@mui/material\";\n\n// const movieValidationSchema = yup.object({\n//   name: yup.string().required(\"Name is required\").min(3),\n//   desc: yup.string().required(\"Description is required\").min(10),\n//   director: yup.string().required(\"Director is required\").min(3),\n//   poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\"),\n//   yearOfRelease: yup.number()\n//     .required(\"Year is required\")\n//     .min(1888)\n//     .max(new Date().getFullYear() + 5),\n//   producer: yup.string().required(\"Producer is required\"),\n//   actors: yup.array().min(1, \"At least one actor is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (error) {\n//       setError(error.message || 'Failed to load initial data');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: \"\",\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         await api.movies.add(values);\n//         navigate(\"/\");\n//       } catch (error) {\n//         setError(error.message || 'Failed to add movie');\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   if (loading) return <CircularProgress />;\n//   if (error) return <Alert severity=\"error\">{error}</Alert>;\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//       <TextField\n//         fullWidth\n//         label=\"Movie Name\"\n//         {...formik.getFieldProps('name')}\n//         error={formik.touched.name && Boolean(formik.errors.name)}\n//         helperText={formik.touched.name && formik.errors.name}\n//       />\n//       <TextField\n//         fullWidth\n//         multiline\n//         rows={4}\n//         label=\"Description\"\n//         {...formik.getFieldProps('desc')}\n//         error={formik.touched.desc && Boolean(formik.errors.desc)}\n//         helperText={formik.touched.desc && formik.errors.desc}\n//       />\n//       <TextField\n//         fullWidth\n//         label=\"Director\"\n//         {...formik.getFieldProps('director')}\n//         error={formik.touched.director && Boolean(formik.errors.director)}\n//         helperText={formik.touched.director && formik.errors.director}\n//       />\n//       <TextField\n//         fullWidth\n//         label=\"Poster URL\"\n//         {...formik.getFieldProps('poster')}\n//         error={formik.touched.poster && Boolean(formik.errors.poster)}\n//         helperText={formik.touched.poster && formik.errors.poster}\n//       />\n//       <TextField\n//         fullWidth\n//         type=\"number\"\n//         label=\"Year of Release\"\n//         {...formik.getFieldProps('yearOfRelease')}\n//         error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//       />\n//       <FormControl fullWidth>\n//         <InputLabel>Producer</InputLabel>\n//         <Select\n//           {...formik.getFieldProps('producer')}\n//           error={formik.touched.producer && Boolean(formik.errors.producer)}\n//         >\n//           {producers.map(producer => (\n//             <MenuItem key={producer._id} value={producer._id}>\n//               {producer.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n      \n//       <FormControl fullWidth>\n//         <InputLabel>Actors</InputLabel>\n//         <Select\n//           multiple\n//           {...formik.getFieldProps('actors')}\n//           error={formik.touched.actors && Boolean(formik.errors.actors)}\n//         >\n//           {actors.map(actor => (\n//             <MenuItem key={actor._id} value={actor._id}>\n//               {actor.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n\n//       <Button \n//         variant=\"contained\" \n//         type=\"submit\" \n//         disabled={loading}\n//         fullWidth\n//       >\n//         {loading ? <CircularProgress size={24} /> : 'Add Movie'}\n//       </Button>\n//     </form>\n//   );\n// };\n\n// export default AddMovie;\n// src/components/AddMovie.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"../config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  CircularProgress,\n  Alert,\n  Container,\n  Box,\n  Typography,\n  Chip,\n  OutlinedInput,\n  FormHelperText,\n  Paper\n} from \"@mui/material\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst movieValidationSchema = yup.object({\n  name: yup\n    .string()\n    .required(\"Movie name is required\")\n    .min(3, \"Movie name must be at least 3 characters\"),\n  desc: yup\n    .string()\n    .required(\"Description is required\")\n    .min(10, \"Description must be at least 10 characters\"),\n  director: yup\n    .string()\n    .required(\"Director name is required\")\n    .min(3, \"Director name must be at least 3 characters\"),\n  poster: yup\n    .string()\n    .required(\"Poster URL is required\")\n    .url(\"Must be a valid URL\"),\n  yearOfRelease: yup\n    .number()\n    .required(\"Release year is required\")\n    .min(1888, \"Year must be 1888 or later\")\n    .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup\n    .string()\n    .required(\"Producer selection is required\"),\n  actors: yup\n    .array()\n    .min(1, \"Please select at least one actor\")\n    .required(\"Actor selection is required\")\n});\n\nconst AddMovie = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  useEffect(() => {\n    // Update poster preview when URL changes\n    if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n      setPreviewUrl(formik.values.poster);\n    } else {\n      setPreviewUrl(\"\");\n    }\n  }, [formik.values.poster]);\n\n  const loadInitialData = async () => {\n    try {\n      setLoading(true);\n      const [producersRes, actorsRes] = await Promise.all([\n        api.producers.getAll(),\n        api.actors.getAll()\n      ]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n    } catch (err) {\n      setError(\"Failed to load producers and actors. Please try again later.\");\n      console.error(\"Load initial data error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (values) => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.add(values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(\"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  if (loading && !producers.length && !actors.length) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Add New Movie\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Box sx={{ display: 'grid', gap: 2 }}>\n          <TextField\n            fullWidth\n            label=\"Movie Name\"\n            {...formik.getFieldProps('name')}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            label=\"Description\"\n            {...formik.getFieldProps('desc')}\n            error={formik.touched.desc && Boolean(formik.errors.desc)}\n            helperText={formik.touched.desc && formik.errors.desc}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Director\"\n            {...formik.getFieldProps('director')}\n            error={formik.touched.director && Boolean(formik.errors.director)}\n            helperText={formik.touched.director && formik.errors.director}\n          />\n\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n            <Box sx={{ flex: 1 }}>\n              <TextField\n                fullWidth\n                label=\"Poster URL\"\n                {...formik.getFieldProps('poster')}\n                error={formik.touched.poster && Boolean(formik.errors.poster)}\n                helperText={formik.touched.poster && formik.errors.poster}\n              />\n            </Box>\n            {previewUrl && (\n              <Paper elevation={3} sx={{ p: 1 }}>\n                <img\n                  src={previewUrl}\n                  alt=\"Poster preview\"\n                  style={{ height: 100, objectFit: 'contain' }}\n                  onError={() => setPreviewUrl(\"\")}\n                />\n              </Paper>\n            )}\n          </Box>\n\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"Year of Release\"\n            {...formik.getFieldProps('yearOfRelease')}\n            error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n            helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n          />\n\n          <FormControl \n            fullWidth\n            error={formik.touched.producer && Boolean(formik.errors.producer)}\n          >\n            <InputLabel>Producer</InputLabel>\n            <Select\n              {...formik.getFieldProps('producer')}\n              label=\"Producer\"\n            >\n              {producers.map(producer => (\n                <MenuItem key={producer._id} value={producer._id}>\n                  {producer.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.producer && formik.errors.producer && (\n              <FormHelperText>{formik.errors.producer}</FormHelperText>\n            )}\n          </FormControl>\n\n          <FormControl \n            fullWidth\n            error={formik.touched.actors && Boolean(formik.errors.actors)}\n          >\n            <InputLabel>Actors</InputLabel>\n            <Select\n              multiple\n              {...formik.getFieldProps('actors')}\n              input={<OutlinedInput label=\"Actors\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip\n                      key={value}\n                      label={actors.find(actor => actor._id === value)?.name}\n                      size=\"small\"\n                    />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >\n              {actors.map(actor => (\n                <MenuItem key={actor._id} value={actor._id}>\n                  {actor.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.actors && formik.errors.actors && (\n              <FormHelperText>{formik.errors.actors}</FormHelperText>\n            )}\n          </FormControl>\n\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            disabled={loading}\n            size=\"large\"\n            sx={{ mt: 2 }}\n          >\n            {loading ? (\n              <CircularProgress size={24} sx={{ color: 'white' }} />\n            ) : (\n              'Add Movie'\n            )}\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AddMovie;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SACEC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,KAAK,EACLC,SAAS,EACTC,GAAG,EACHC,UAAU,EACVC,IAAI,EACJC,aAAa,EACbC,cAAc,EACdC,KAAK,QACA,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,WAAW,GAAG,EAAE;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}