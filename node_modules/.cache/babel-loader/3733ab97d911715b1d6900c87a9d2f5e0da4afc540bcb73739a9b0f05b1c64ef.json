{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/test/imdb-clone-frontend/src/EditMovies.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// // EditMovies.js\n\n// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import { useFormik } from 'formik'\n// import * as yup from 'yup'\n// import axios from \"axios\";\n// import { backend_API } from \"./config/api.config\";  // Update this line\n\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n\n//   const [movie, setMovie] = useState(null);\n\n//   useEffect(() => {\n//     getMovie()\n//   }, []);\n\n//   const getMovie = async() => {\n//    const moviesData = await axios.get(`${backend_API}/movies/${id}`);\n//    setMovie(moviesData.data)\n//   }\n\n//   return (\n//     <>\n//       {movie ? (\n//         <EditFunction movie={movie} />\n//       ) : (\n//         <Box sx={{ display: \"flex\" , justifyContent : \"center\" }}>\n//           <CircularProgress />\n//         </Box>\n//       )}\n//     </>\n//   );\n// }\n\n// const EditFunction = ({ movie }) => {\n//   const navigate = useNavigate(); \n//   const [actors, setactors] = useState([]);\n//   const [producer, setProducer] = useState('');\n//   const [producerArr,setProducerArr] = useState([]);\n//   const [actorNames,setActorNames] = useState([]);\n\n//   useEffect(()=>{\n//     getData();\n//   },[])\n\n//   const getData = async() => {\n//     const res = await axios.get(`${backend_API}/producers`);\n//     const actorData = await axios.get(`${backend_API}/actors`);\n//     setProducerArr(res.data);\n//     setActorNames(actorData.data);\n//   }\n\n//   const handleProducerChange = (e) => {\n//     const {value} = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setactors(\n//       typeof value === \"string\" ? value.split(\",\") : value\n//     );\n//   };\n\n//   // console.log(movie)\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async(newMovie) => {\n//       // console.log(\"onSubmit : \", {...newMovie,actors,producer});\n//       await axios.put(`${backend_API}/movies/edit-movie/${movie._id}`,{...newMovie,actors,producer});\n//       navigate(\"/\");\n//     },\n//   });\n\n//   // console.log(movie)\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//         <TextField\n//           label=\"Enter the name\"\n//           variant=\"outlined\"\n//           id=\"name\"\n//           name=\"name\"\n//           value={formik.values.name}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.name && formik.errors.name}\n//           helperText={\n//             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the movie Description\"\n//           variant=\"outlined\"\n//           id=\"desc\"\n//           name=\"desc\"\n//           value={formik.values.desc}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.desc && formik.errors.desc}\n//           helperText={\n//             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the poster link\"\n//           variant=\"outlined\"\n//           id=\"poster\"\n//           name=\"poster\"\n//           value={formik.values.poster}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.poster && formik.errors.poster}\n//           helperText={\n//             formik.touched.poster && formik.errors.name\n//               ? formik.errors.poster\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the director name\"\n//           variant=\"outlined\"\n//           id=\"director\"\n//           name=\"director\"\n//           value={formik.values.director}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.director && formik.errors.director}\n//           helperText={\n//             formik.touched.director && formik.errors.director\n//               ? formik.errors.director\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the year of release\"\n//           variant=\"outlined\"\n//           id=\"yearOfRelease\"\n//           name=\"yearOfRelease\"\n//           value={formik.values.yearOfRelease}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           helperText={\n//             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//               ? formik.errors.yearOfRelease\n//               : \"\"\n//           }\n//         />\n//         <FormControl fullWidth>\n//           <InputLabel id=\"producer\">Producer Name</InputLabel>\n//           <Select\n//             labelId=\"producer\"\n//             id=\"producer\"\n//             value={producer}\n//             label=\"producer\"\n//             onChange={handleProducerChange}\n//           >\n//             {\n//               producerArr.map((prodName)=>{\n//                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n//               })\n//             }\n\n//           </Select>\n//         </FormControl>\n//         <FormControl fullWidth >\n//           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//           <Select\n//             labelId=\"actor\"\n//             id=\"actor\"\n//             multiple\n//             value={actors}\n//             onChange={handleChange}\n//           >\n//             {actorNames.map((actor) => (\n//               <MenuItem key={actor._id} value={actor._id}>\n//                 {actor.name}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" type=\"submit\">\n//           Update Movie\n//         </Button>\n//       </form>\n//   );\n// };\n\n// export default EditMovies;\n// src/EditMovies.js\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport axios from \"axios\";\nimport { backend_API } from \"./config/api.config\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EditMovies() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [movie, setMovie] = useState(null);\n  const getMovie = useCallback(async () => {\n    const moviesData = await axios.get(`${backend_API}/movies/${id}`);\n    setMovie(moviesData.data);\n  }, [id]);\n  useEffect(() => {\n    getMovie();\n  }, [getMovie]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movie ? /*#__PURE__*/_jsxDEV(EditFunction, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(EditMovies, \"4pS/QshY+LaVg1G3zhNf+Kn459g=\", false, function () {\n  return [useParams];\n});\n_c = EditMovies;\nconst EditFunction = ({\n  movie\n}) => {\n  _s2();\n  const navigate = useNavigate();\n  const [actors, setactors] = useState([]);\n  const [producer, setProducer] = useState('');\n  const [producerArr, setProducerArr] = useState([]);\n  const [actorNames, setActorNames] = useState([]);\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    const res = await axios.get(`${backend_API}/producers`);\n    const actorData = await axios.get(`${backend_API}/actors`);\n    setProducerArr(res.data);\n    setActorNames(actorData.data);\n  };\n  const handleProducerChange = e => {\n    const {\n      value\n    } = e.target;\n    setProducer(value);\n  };\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setactors(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n    yearOfRelease: yup.number().required(\"*Year of release field is mandatory\").min(5)\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: movie.name,\n      desc: movie.desc,\n      director: movie.director,\n      poster: movie.poster,\n      yearOfRelease: movie.yearOfRelease\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async newMovie => {\n      await axios.put(`${backend_API}/movies/edit-movie/${movie._id}`, {\n        ...newMovie,\n        actors,\n        producer\n      });\n      navigate(\"/\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    className: \"formGroup\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the name\",\n      variant: \"outlined\",\n      id: \"name\",\n      name: \"name\",\n      value: formik.values.name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.name && formik.errors.name,\n      helperText: formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the movie Description\",\n      variant: \"outlined\",\n      id: \"desc\",\n      name: \"desc\",\n      value: formik.values.desc,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.desc && formik.errors.desc,\n      helperText: formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the poster link\",\n      variant: \"outlined\",\n      id: \"poster\",\n      name: \"poster\",\n      value: formik.values.poster,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.poster && formik.errors.poster,\n      helperText: formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the director name\",\n      variant: \"outlined\",\n      id: \"director\",\n      name: \"director\",\n      value: formik.values.director,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.director && formik.errors.director,\n      helperText: formik.touched.director && formik.errors.director ? formik.errors.director : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the year of release\",\n      variant: \"outlined\",\n      id: \"yearOfRelease\",\n      name: \"yearOfRelease\",\n      value: formik.values.yearOfRelease,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.yearOfRelease && formik.errors.yearOfRelease,\n      helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease ? formik.errors.yearOfRelease : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"producer\",\n        children: \"Producer Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"producer\",\n        id: \"producer\",\n        value: producer,\n        label: \"producer\",\n        onChange: handleProducerChange,\n        children: producerArr.map(prodName => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: prodName._id,\n          children: prodName.name\n        }, prodName._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"actor\",\n        children: \"Select the Actor names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"actor\",\n        id: \"actor\",\n        multiple: true,\n        value: actors,\n        onChange: handleChange,\n        children: actorNames.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: actor._id,\n          children: actor.name\n        }, actor._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      children: \"Update Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n_s2(EditFunction, \"7O8FzjrGSbZkoWkj6D4/54Eptwg=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c2 = EditFunction;\nexport default EditMovies;\nvar _c, _c2;\n$RefreshReg$(_c, \"EditMovies\");\n$RefreshReg$(_c2, \"EditFunction\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Button","TextField","useNavigate","useParams","CircularProgress","Box","useFormik","yup","axios","backend_API","FormControl","InputLabel","MenuItem","Select","jsxDEV","_jsxDEV","Fragment","_Fragment","EditMovies","_s","id","movie","setMovie","getMovie","moviesData","get","data","children","EditFunction","fileName","_jsxFileName","lineNumber","columnNumber","sx","display","justifyContent","_c","_s2","navigate","actors","setactors","producer","setProducer","producerArr","setProducerArr","actorNames","setActorNames","getData","res","actorData","handleProducerChange","e","value","target","handleChange","split","movieValidationSchema","object","name","string","required","min","desc","director","poster","yearOfRelease","number","formik","initialValues","validationSchema","onSubmit","newMovie","put","_id","handleSubmit","className","label","variant","values","onChange","onBlur","handleBlur","error","touched","errors","helperText","fullWidth","labelId","map","prodName","multiple","actor","type","_c2","$RefreshReg$"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/EditMovies.js"],"sourcesContent":["// // EditMovies.js\n\n// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import { useFormik } from 'formik'\n// import * as yup from 'yup'\n// import axios from \"axios\";\n// import { backend_API } from \"./config/api.config\";  // Update this line\n\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n\n//   const [movie, setMovie] = useState(null);\n\n//   useEffect(() => {\n//     getMovie()\n//   }, []);\n\n//   const getMovie = async() => {\n//    const moviesData = await axios.get(`${backend_API}/movies/${id}`);\n//    setMovie(moviesData.data)\n//   }\n\n//   return (\n//     <>\n//       {movie ? (\n//         <EditFunction movie={movie} />\n//       ) : (\n//         <Box sx={{ display: \"flex\" , justifyContent : \"center\" }}>\n//           <CircularProgress />\n//         </Box>\n//       )}\n//     </>\n//   );\n// }\n\n// const EditFunction = ({ movie }) => {\n//   const navigate = useNavigate(); \n//   const [actors, setactors] = useState([]);\n//   const [producer, setProducer] = useState('');\n//   const [producerArr,setProducerArr] = useState([]);\n//   const [actorNames,setActorNames] = useState([]);\n\n//   useEffect(()=>{\n//     getData();\n//   },[])\n\n//   const getData = async() => {\n//     const res = await axios.get(`${backend_API}/producers`);\n//     const actorData = await axios.get(`${backend_API}/actors`);\n//     setProducerArr(res.data);\n//     setActorNames(actorData.data);\n//   }\n\n//   const handleProducerChange = (e) => {\n//     const {value} = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setactors(\n//       typeof value === \"string\" ? value.split(\",\") : value\n//     );\n//   };\n\n//   // console.log(movie)\n\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n      \n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async(newMovie) => {\n//       // console.log(\"onSubmit : \", {...newMovie,actors,producer});\n//       await axios.put(`${backend_API}/movies/edit-movie/${movie._id}`,{...newMovie,actors,producer});\n//       navigate(\"/\");\n//     },\n//   });\n\n//   // console.log(movie)\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//         <TextField\n//           label=\"Enter the name\"\n//           variant=\"outlined\"\n//           id=\"name\"\n//           name=\"name\"\n//           value={formik.values.name}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.name && formik.errors.name}\n//           helperText={\n//             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the movie Description\"\n//           variant=\"outlined\"\n//           id=\"desc\"\n//           name=\"desc\"\n//           value={formik.values.desc}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.desc && formik.errors.desc}\n//           helperText={\n//             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the poster link\"\n//           variant=\"outlined\"\n//           id=\"poster\"\n//           name=\"poster\"\n//           value={formik.values.poster}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.poster && formik.errors.poster}\n//           helperText={\n//             formik.touched.poster && formik.errors.name\n//               ? formik.errors.poster\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the director name\"\n//           variant=\"outlined\"\n//           id=\"director\"\n//           name=\"director\"\n//           value={formik.values.director}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.director && formik.errors.director}\n//           helperText={\n//             formik.touched.director && formik.errors.director\n//               ? formik.errors.director\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the year of release\"\n//           variant=\"outlined\"\n//           id=\"yearOfRelease\"\n//           name=\"yearOfRelease\"\n//           value={formik.values.yearOfRelease}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           helperText={\n//             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//               ? formik.errors.yearOfRelease\n//               : \"\"\n//           }\n//         />\n//         <FormControl fullWidth>\n//           <InputLabel id=\"producer\">Producer Name</InputLabel>\n//           <Select\n//             labelId=\"producer\"\n//             id=\"producer\"\n//             value={producer}\n//             label=\"producer\"\n//             onChange={handleProducerChange}\n//           >\n//             {\n//               producerArr.map((prodName)=>{\n//                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n//               })\n//             }\n            \n//           </Select>\n//         </FormControl>\n//         <FormControl fullWidth >\n//           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//           <Select\n//             labelId=\"actor\"\n//             id=\"actor\"\n//             multiple\n//             value={actors}\n//             onChange={handleChange}\n//           >\n//             {actorNames.map((actor) => (\n//               <MenuItem key={actor._id} value={actor._id}>\n//                 {actor.name}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" type=\"submit\">\n//           Update Movie\n//         </Button>\n//       </form>\n//   );\n// };\n\n// export default EditMovies;\n// src/EditMovies.js\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport axios from \"axios\";\nimport { backend_API } from \"./config/api.config\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\nfunction EditMovies() {\n  const { id } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  const getMovie = useCallback(async() => {\n    const moviesData = await axios.get(`${backend_API}/movies/${id}`);\n    setMovie(moviesData.data);\n  }, [id]);\n\n  useEffect(() => {\n    getMovie();\n  }, [getMovie]);\n\n  return (\n    <>\n      {movie ? (\n        <EditFunction movie={movie} />\n      ) : (\n        <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n          <CircularProgress />\n        </Box>\n      )}\n    </>\n  );\n}\n\nconst EditFunction = ({ movie }) => {\n  const navigate = useNavigate();\n  const [actors, setactors] = useState([]);\n  const [producer, setProducer] = useState('');\n  const [producerArr, setProducerArr] = useState([]);\n  const [actorNames, setActorNames] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async() => {\n    const res = await axios.get(`${backend_API}/producers`);\n    const actorData = await axios.get(`${backend_API}/actors`);\n    setProducerArr(res.data);\n    setActorNames(actorData.data);\n  };\n\n  const handleProducerChange = (e) => {\n    const { value } = e.target;\n    setProducer(value);\n  };\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setactors(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n    yearOfRelease: yup\n      .number()\n      .required(\"*Year of release field is mandatory\")\n      .min(5),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: movie.name,\n      desc: movie.desc,\n      director: movie.director,\n      poster: movie.poster,\n      yearOfRelease: movie.yearOfRelease,\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async(newMovie) => {\n      await axios.put(`${backend_API}/movies/edit-movie/${movie._id}`, {...newMovie, actors, producer});\n      navigate(\"/\");\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n      <TextField\n        label=\"Enter the name\"\n        variant=\"outlined\"\n        id=\"name\"\n        name=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && formik.errors.name}\n        helperText={\n          formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n        }\n      />\n      <TextField\n        label=\"Enter the movie Description\"\n        variant=\"outlined\"\n        id=\"desc\"\n        name=\"desc\"\n        value={formik.values.desc}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.desc && formik.errors.desc}\n        helperText={\n          formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n        }\n      />\n      <TextField\n        label=\"Enter the poster link\"\n        variant=\"outlined\"\n        id=\"poster\"\n        name=\"poster\"\n        value={formik.values.poster}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.poster && formik.errors.poster}\n        helperText={\n          formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"\n        }\n      />\n      <TextField\n        label=\"Enter the director name\"\n        variant=\"outlined\"\n        id=\"director\"\n        name=\"director\"\n        value={formik.values.director}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.director && formik.errors.director}\n        helperText={\n          formik.touched.director && formik.errors.director ? formik.errors.director : \"\"\n        }\n      />\n      <TextField\n        label=\"Enter the year of release\"\n        variant=\"outlined\"\n        id=\"yearOfRelease\"\n        name=\"yearOfRelease\"\n        value={formik.values.yearOfRelease}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n        helperText={\n          formik.touched.yearOfRelease && formik.errors.yearOfRelease ? formik.errors.yearOfRelease : \"\"\n        }\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"producer\">Producer Name</InputLabel>\n        <Select\n          labelId=\"producer\"\n          id=\"producer\"\n          value={producer}\n          label=\"producer\"\n          onChange={handleProducerChange}\n        >\n          {producerArr.map((prodName) => (\n            <MenuItem key={prodName._id} value={prodName._id}>{prodName.name}</MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl fullWidth>\n        <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n        <Select\n          labelId=\"actor\"\n          id=\"actor\"\n          multiple\n          value={actors}\n          onChange={handleChange}\n        >\n          {actorNames.map((actor) => (\n            <MenuItem key={actor._id} value={actor._id}>\n              {actor.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Button variant=\"contained\" type=\"submit\">\n        Update Movie\n      </Button>\n    </form>\n  );\n};\n\nexport default EditMovies;"],"mappings":";;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,gBAAgB,MAAM,g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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}