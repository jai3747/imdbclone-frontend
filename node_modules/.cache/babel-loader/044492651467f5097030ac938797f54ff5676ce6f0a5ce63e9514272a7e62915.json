{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const ALLOWED_IMAGE_SOURCES = [\n//   {\n//     domain: 'imgur.com',\n//     example: 'https://i.imgur.com/example.jpg',\n//     description: 'Imgur'\n//   },\n//   {\n//     domain: 'upload.wikimedia.org',\n//     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n//     description: 'Wikimedia Commons'\n//   },\n//   {\n//     domain: 'images.unsplash.com',\n//     example: 'https://images.unsplash.com/photo-example.jpg',\n//     description: 'Unsplash'\n//   },\n//   {\n//     domain: 'res.cloudinary.com',\n//     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n//     description: 'Cloudinary'\n//   },\n//   {\n//     domain: 'drive.google.com',\n//     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n//     description: 'Google Drive (public links only)'\n//   }\n// ];\n\n// // Function to convert Google Drive sharing URL to direct image URL\n// const convertGoogleDriveURL = (url) => {\n//   try {\n//     const urlObj = new URL(url);\n//     if (urlObj.hostname === 'drive.google.com') {\n//       if (url.includes('/file/d/')) {\n//         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n//         if (fileId) {\n//           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n//         }\n//       } else if (url.includes('uc?export=view&id=')) {\n//         return url;\n//       }\n//     }\n//     return url;\n//   } catch {\n//     return url;\n//   }\n// };\n\n// // Function to validate image URL\n// const isValidImageUrl = (url) => {\n//   try {\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     const urlObj = new URL(convertedUrl);\n//     const hostname = urlObj.hostname;\n\n//     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n//       hostname === domain || hostname.endsWith(`.${domain}`)\n//     );\n\n//     const isHttps = urlObj.protocol === 'https:';\n\n//     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n//       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n//       urlObj.hostname.endsWith('cloudinary.com');\n\n//     return isAllowedDomain && isHttps && hasImageExtension;\n//   } catch {\n//     return false;\n//   }\n// };\n\n// // Custom Yup test for image URL validation\n// yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n//   return this.test('test-valid-image-url', errorMessage, function (value) {\n//     const { path, createError } = this;\n//     return !value || isValidImageUrl(value) || createError({\n//       path,\n//       message: errorMessage\n//     });\n//   });\n// });\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n//   const [showImageHelp, setShowImageHelp] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     if (!isValidImageUrl(convertedUrl)) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = convertedUrl;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n\n//         const isImageValid = await validateImageUrl(convertedPosterUrl);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         const submitValues = {\n//           ...values,\n//           poster: convertedPosterUrl\n//         };\n\n//         await api.movies.add(submitValues);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         const convertedUrl = convertGoogleDriveURL(url);\n//         if (isValidImageUrl(convertedUrl)) {\n//           setImageLoading(true);\n//           setPreviewUrl(convertedUrl);\n//           const isValid = await validateImageUrl(convertedUrl);\n//           setImageError(!isValid);\n//         } else {\n//           setPreviewUrl(\"\");\n//           setImageError(false);\n//         }\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a HTTPS URL from one of the allowed sources\"\n//                 }\n//                 InputProps={{\n//                   endAdornment: (\n//                     <Tooltip title=\"Click for allowed image sources\">\n//                       <IconButton \n//                         size=\"small\" \n//                         onClick={() => setShowImageHelp(!showImageHelp)}\n//                       >\n//                         <InfoIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   ),\n//                 }}\n//               />\n//               {showImageHelp && (\n//                 <Paper sx={{ mt: 1, p: 2 }}>\n//                   <Typography variant=\"subtitle2\" gutterBottom>\n//                     Allowed Image Sources:\n//                   </Typography>\n//                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n//                     <Box key={description} sx={{ mb: 1 }}>\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\n//                         {description}:\n//                       </Typography>\n//                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n//                         Example: {example}\n//                       </Typography>\n//                     </Box>\n//                   ))}\n//                 </Paper>\n//               )}\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Alert, Container, Box, Typography, Chip, OutlinedInput, FormHelperText, Paper, IconButton, Tooltip } from \"@mui/material\";\nimport { Info as InfoIcon } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nconst ALLOWED_IMAGE_SOURCES = [{\n  domain: 'imgur.com',\n  example: 'https://i.imgur.com/example.jpg',\n  description: 'Imgur'\n}, {\n  domain: 'upload.wikimedia.org',\n  example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n  description: 'Wikimedia Commons'\n}, {\n  domain: 'images.unsplash.com',\n  example: 'https://images.unsplash.com/photo-example.jpg',\n  description: 'Unsplash'\n}, {\n  domain: 'res.cloudinary.com',\n  example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n  description: 'Cloudinary'\n}, {\n  domain: 'drive.google.com',\n  example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n  description: 'Google Drive (public links only)'\n}];\n\n// Function to convert Google Drive sharing URL to direct image URL\nconst convertGoogleDriveURL = url => {\n  if (!url) return \"\";\n  try {\n    const urlObj = new URL(url);\n    if (urlObj.hostname === 'drive.google.com') {\n      if (url.includes('/file/d/')) {\n        var _url$match;\n        const fileId = (_url$match = url.match(/\\/file\\/d\\/([^/]+)/)) === null || _url$match === void 0 ? void 0 : _url$match[1];\n        if (fileId) {\n          return `https://drive.google.com/uc?export=view&id=${fileId}`;\n        }\n      } else if (url.includes('uc?export=view&id=')) {\n        return url;\n      }\n    }\n    return url;\n  } catch {\n    return url;\n  }\n};\n\n// Function to validate image URL\nconst isValidImageUrl = url => {\n  if (!url) return true; // Empty URL is valid now\n  try {\n    const convertedUrl = convertGoogleDriveURL(url);\n    const urlObj = new URL(convertedUrl);\n    const hostname = urlObj.hostname;\n    const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({\n      domain\n    }) => hostname === domain || hostname.endsWith(`.${domain}`));\n    const isHttps = urlObj.protocol === 'https:';\n    const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) || urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export') || urlObj.hostname.endsWith('cloudinary.com');\n    return isAllowedDomain && isHttps && hasImageExtension;\n  } catch {\n    return false;\n  }\n};\n\n// Modified Yup validation schema\nconst movieValidationSchema = yup.object({\n  name: yup.string().required(\"Movie name is required\").min(3, \"Movie name must be at least 3 characters\").max(100, \"Movie name must not exceed 100 characters\").trim(),\n  desc: yup.string().required(\"Description is required\").min(10, \"Description must be at least 10 characters\").max(2000, \"Description must not exceed 2000 characters\").trim(),\n  director: yup.string().required(\"Director name is required\").min(3, \"Director name must be at least 3 characters\").max(100, \"Director name must not exceed 100 characters\").trim(),\n  poster: yup.string().nullable().transform(value => value || null).test('valid-url', 'Must be a valid HTTPS image URL from an allowed domain', value => {\n    if (!value) return true;\n    return isValidImageUrl(value);\n  }).trim(),\n  yearOfRelease: yup.number().required(\"Release year is required\").min(1888, \"Year must be 1888 or later\").max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup.string().required(\"Producer selection is required\"),\n  actors: yup.array().min(1, \"Please select at least one actor\").max(20, \"Cannot select more than 20 actors\").required(\"Actor selection is required\")\n});\nconst AddMovie = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const [imageError, setImageError] = useState(false);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [showImageHelp, setShowImageHelp] = useState(false);\n  const validateImageUrl = useCallback(async url => {\n    if (!url) return true; // Empty URL is valid\n    const convertedUrl = convertGoogleDriveURL(url);\n    if (!isValidImageUrl(convertedUrl)) return false;\n    setImageLoading(true);\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        setImageLoading(false);\n        resolve(true);\n      };\n      img.onerror = () => {\n        setImageLoading(false);\n        resolve(false);\n      };\n      img.src = convertedUrl;\n    });\n  }, []);\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async values => {\n      try {\n        setLoading(true);\n        setError(null);\n        const convertedPosterUrl = values.poster ? convertGoogleDriveURL(values.poster) : null;\n        if (convertedPosterUrl) {\n          const isImageValid = await validateImageUrl(convertedPosterUrl);\n          if (!isImageValid) {\n            formik.setFieldError('poster', 'Unable to load image from this URL');\n            setLoading(false);\n            return;\n          }\n        }\n        const submitValues = {\n          ...values,\n          poster: convertedPosterUrl\n        };\n        await api.movies.add(submitValues);\n        navigate(\"/\");\n      } catch (err) {\n        var _err$response, _err$response$data;\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  // Rest of the component code remains the same...\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: formik.handleSubmit,\n      sx: {\n        mt: 4,\n        mb: 4\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 713,\n    columnNumber: 5\n  }, this);\n};\n_s(AddMovie, \"g9dMhAYAas8H7LnoSJy36aYTpqk=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = AddMovie;\nexport default AddMovie;\nvar _c;\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useNavigate","api","useFormik","yup","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Alert","Container","Box","Typography","Chip","OutlinedInput","FormHelperText","Paper","IconButton","Tooltip","Info","InfoIcon","jsxDEV","_jsxDEV","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","ALLOWED_IMAGE_SOURCES","domain","example","description","convertGoogleDriveURL","url","urlObj","URL","hostname","includes","_url$match","fileId","match","isValidImageUrl","convertedUrl","isAllowedDomain","some","endsWith","isHttps","protocol","hasImageExtension","test","pathname","searchParams","has","movieValidationSchema","object","name","string","required","min","max","trim","desc","director","poster","nullable","transform","value","yearOfRelease","number","Date","getFullYear","producer","actors","array","AddMovie","_s","navigate","loading","setLoading","initialLoading","setInitialLoading","error","setError","producers","setProducers","setActors","previewUrl","setPreviewUrl","imageError","setImageError","imageLoading","setImageLoading","showImageHelp","setShowImageHelp","validateImageUrl","Promise","resolve","img","Image","onload","onerror","src","formik","initialValues","validationSchema","onSubmit","values","convertedPosterUrl","isImageValid","setFieldError","submitValues","movies","add","err","_err$response","_err$response$data","response","data","message","console","maxWidth","children","component","handleSubmit","sx","mt","mb","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/AddMovie.js"],"sourcesContent":["// import React, { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper,\n//   IconButton,\n//   Tooltip\n// } from \"@mui/material\";\n// import { Info as InfoIcon } from '@mui/icons-material';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const ALLOWED_IMAGE_SOURCES = [\n//   {\n//     domain: 'imgur.com',\n//     example: 'https://i.imgur.com/example.jpg',\n//     description: 'Imgur'\n//   },\n//   {\n//     domain: 'upload.wikimedia.org',\n//     example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n//     description: 'Wikimedia Commons'\n//   },\n//   {\n//     domain: 'images.unsplash.com',\n//     example: 'https://images.unsplash.com/photo-example.jpg',\n//     description: 'Unsplash'\n//   },\n//   {\n//     domain: 'res.cloudinary.com',\n//     example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n//     description: 'Cloudinary'\n//   },\n//   {\n//     domain: 'drive.google.com',\n//     example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n//     description: 'Google Drive (public links only)'\n//   }\n// ];\n\n// // Function to convert Google Drive sharing URL to direct image URL\n// const convertGoogleDriveURL = (url) => {\n//   try {\n//     const urlObj = new URL(url);\n//     if (urlObj.hostname === 'drive.google.com') {\n//       if (url.includes('/file/d/')) {\n//         const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n//         if (fileId) {\n//           return `https://drive.google.com/uc?export=view&id=${fileId}`;\n//         }\n//       } else if (url.includes('uc?export=view&id=')) {\n//         return url;\n//       }\n//     }\n//     return url;\n//   } catch {\n//     return url;\n//   }\n// };\n\n// // Function to validate image URL\n// const isValidImageUrl = (url) => {\n//   try {\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     const urlObj = new URL(convertedUrl);\n//     const hostname = urlObj.hostname;\n    \n//     const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n//       hostname === domain || hostname.endsWith(`.${domain}`)\n//     );\n\n//     const isHttps = urlObj.protocol === 'https:';\n\n//     const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n//       (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n//       urlObj.hostname.endsWith('cloudinary.com');\n\n//     return isAllowedDomain && isHttps && hasImageExtension;\n//   } catch {\n//     return false;\n//   }\n// };\n\n// // Custom Yup test for image URL validation\n// yup.addMethod(yup.string, 'isValidImageUrl', function (errorMessage) {\n//   return this.test('test-valid-image-url', errorMessage, function (value) {\n//     const { path, createError } = this;\n//     return !value || isValidImageUrl(value) || createError({\n//       path,\n//       message: errorMessage\n//     });\n//   });\n// });\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\")\n//     .max(100, \"Movie name must not exceed 100 characters\")\n//     .trim(),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\")\n//     .max(2000, \"Description must not exceed 2000 characters\")\n//     .trim(),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\")\n//     .max(100, \"Director name must not exceed 100 characters\")\n//     .trim(),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\")\n//     .isValidImageUrl(\"Must be a valid HTTPS image URL from an allowed domain\")\n//     .trim(),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .max(20, \"Cannot select more than 20 actors\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const AddMovie = () => {\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(false);\n//   const [initialLoading, setInitialLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n//   const [imageError, setImageError] = useState(false);\n//   const [imageLoading, setImageLoading] = useState(false);\n//   const [showImageHelp, setShowImageHelp] = useState(false);\n\n//   const validateImageUrl = useCallback(async (url) => {\n//     if (!url) return false;\n//     const convertedUrl = convertGoogleDriveURL(url);\n//     if (!isValidImageUrl(convertedUrl)) return false;\n\n//     setImageLoading(true);\n//     return new Promise((resolve) => {\n//       const img = new Image();\n//       img.onload = () => {\n//         setImageLoading(false);\n//         resolve(true);\n//       };\n//       img.onerror = () => {\n//         setImageLoading(false);\n//         resolve(false);\n//       };\n//       img.src = convertedUrl;\n//     });\n//   }, []);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n\n//         const convertedPosterUrl = convertGoogleDriveURL(values.poster);\n        \n//         const isImageValid = await validateImageUrl(convertedPosterUrl);\n//         if (!isImageValid) {\n//           formik.setFieldError('poster', 'Unable to load image from this URL');\n//           setLoading(false);\n//           return;\n//         }\n\n//         const submitValues = {\n//           ...values,\n//           poster: convertedPosterUrl\n//         };\n\n//         await api.movies.add(submitValues);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n//         console.error(\"Add movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     const validateAndSetPreview = async () => {\n//       const url = formik.values.poster;\n//       if (url) {\n//         const convertedUrl = convertGoogleDriveURL(url);\n//         if (isValidImageUrl(convertedUrl)) {\n//           setImageLoading(true);\n//           setPreviewUrl(convertedUrl);\n//           const isValid = await validateImageUrl(convertedUrl);\n//           setImageError(!isValid);\n//         } else {\n//           setPreviewUrl(\"\");\n//           setImageError(false);\n//         }\n//       }\n//     };\n\n//     validateAndSetPreview();\n//   }, [formik.values.poster, validateImageUrl]);\n\n//   const loadInitialData = async () => {\n//     try {\n//       setInitialLoading(true);\n//       const [producersRes, actorsRes] = await Promise.all([\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n//     } catch (err) {\n//       setError(\"Failed to load producers and actors. Please try again later.\");\n//       console.error(\"Load initial data error:\", err);\n//     } finally {\n//       setInitialLoading(false);\n//     }\n//   };\n\n//   if (initialLoading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Add New Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={\n//                   (formik.touched.poster && formik.errors.poster) ||\n//                   \"Enter a HTTPS URL from one of the allowed sources\"\n//                 }\n//                 InputProps={{\n//                   endAdornment: (\n//                     <Tooltip title=\"Click for allowed image sources\">\n//                       <IconButton \n//                         size=\"small\" \n//                         onClick={() => setShowImageHelp(!showImageHelp)}\n//                       >\n//                         <InfoIcon />\n//                       </IconButton>\n//                     </Tooltip>\n//                   ),\n//                 }}\n//               />\n//               {showImageHelp && (\n//                 <Paper sx={{ mt: 1, p: 2 }}>\n//                   <Typography variant=\"subtitle2\" gutterBottom>\n//                     Allowed Image Sources:\n//                   </Typography>\n//                   {ALLOWED_IMAGE_SOURCES.map(({ description, example }) => (\n//                     <Box key={description} sx={{ mb: 1 }}>\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\n//                         {description}:\n//                       </Typography>\n//                       <Typography variant=\"caption\" display=\"block\" sx={{ wordBreak: 'break-all' }}>\n//                         Example: {example}\n//                       </Typography>\n//                     </Box>\n//                   ))}\n//                 </Paper>\n//               )}\n//             </Box>\n//             {(previewUrl || imageLoading) && (\n//               <Paper \n//                 elevation={3} \n//                 sx={{ \n//                   p: 1,\n//                   width: 150,\n//                   height: 200,\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center',\n//                   backgroundColor: '#f5f5f5'\n//                 }}\n//               >\n//                 {imageLoading ? (\n//                   <CircularProgress size={24} />\n//                 ) : imageError ? (\n//                   <Typography variant=\"caption\" color=\"error\" align=\"center\">\n//                     Failed to load image\n//                   </Typography>\n//                 ) : (\n//                   <img\n//                     src={previewUrl}\n//                     alt=\"Poster preview\"\n//                     style={{ \n//                       maxWidth: '100%',\n//                       maxHeight: '100%',\n//                       objectFit: 'contain'\n//                     }}\n//                     onError={() => setImageError(true)}\n//                   />\n//                 )}\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => (\n//                     <Chip\n//                       key={value}\n//                       label={actors.find(actor => actor._id === value)?.name}\n//                       size=\"small\"\n//                     />\n//                   ))}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Button\n//             variant=\"contained\"\n//             type=\"submit\"\n//             disabled={loading}\n//             size=\"large\"\n//             sx={{ mt: 2 }}\n//           >\n//             {loading ? (\n//               <CircularProgress size={24} sx={{ color: 'white' }} />\n//             ) : (\n//               'Add Movie'\n//             )}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default AddMovie;\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  CircularProgress,\n  Alert,\n  Container,\n  Box,\n  Typography,\n  Chip,\n  OutlinedInput,\n  FormHelperText,\n  Paper,\n  IconButton,\n  Tooltip\n} from \"@mui/material\";\nimport { Info as InfoIcon } from '@mui/icons-material';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst ALLOWED_IMAGE_SOURCES = [\n  {\n    domain: 'imgur.com',\n    example: 'https://i.imgur.com/example.jpg',\n    description: 'Imgur'\n  },\n  {\n    domain: 'upload.wikimedia.org',\n    example: 'https://upload.wikimedia.org/wikipedia/commons/example.jpg',\n    description: 'Wikimedia Commons'\n  },\n  {\n    domain: 'images.unsplash.com',\n    example: 'https://images.unsplash.com/photo-example.jpg',\n    description: 'Unsplash'\n  },\n  {\n    domain: 'res.cloudinary.com',\n    example: 'https://res.cloudinary.com/your-cloud-name/image/upload/example.jpg',\n    description: 'Cloudinary'\n  },\n  {\n    domain: 'drive.google.com',\n    example: 'https://drive.google.com/uc?export=view&id=YOUR_FILE_ID',\n    description: 'Google Drive (public links only)'\n  }\n];\n\n// Function to convert Google Drive sharing URL to direct image URL\nconst convertGoogleDriveURL = (url) => {\n  if (!url) return \"\";\n  try {\n    const urlObj = new URL(url);\n    if (urlObj.hostname === 'drive.google.com') {\n      if (url.includes('/file/d/')) {\n        const fileId = url.match(/\\/file\\/d\\/([^/]+)/)?.[1];\n        if (fileId) {\n          return `https://drive.google.com/uc?export=view&id=${fileId}`;\n        }\n      } else if (url.includes('uc?export=view&id=')) {\n        return url;\n      }\n    }\n    return url;\n  } catch {\n    return url;\n  }\n};\n\n// Function to validate image URL\nconst isValidImageUrl = (url) => {\n  if (!url) return true; // Empty URL is valid now\n  try {\n    const convertedUrl = convertGoogleDriveURL(url);\n    const urlObj = new URL(convertedUrl);\n    const hostname = urlObj.hostname;\n    \n    const isAllowedDomain = ALLOWED_IMAGE_SOURCES.some(({ domain }) => \n      hostname === domain || hostname.endsWith(`.${domain}`)\n    );\n\n    const isHttps = urlObj.protocol === 'https:';\n\n    const hasImageExtension = /\\.(jpg|jpeg|png|gif|webp)$/i.test(urlObj.pathname) ||\n      (urlObj.hostname === 'drive.google.com' && urlObj.searchParams.has('export')) ||\n      urlObj.hostname.endsWith('cloudinary.com');\n\n    return isAllowedDomain && isHttps && hasImageExtension;\n  } catch {\n    return false;\n  }\n};\n\n// Modified Yup validation schema\nconst movieValidationSchema = yup.object({\n  name: yup\n    .string()\n    .required(\"Movie name is required\")\n    .min(3, \"Movie name must be at least 3 characters\")\n    .max(100, \"Movie name must not exceed 100 characters\")\n    .trim(),\n  desc: yup\n    .string()\n    .required(\"Description is required\")\n    .min(10, \"Description must be at least 10 characters\")\n    .max(2000, \"Description must not exceed 2000 characters\")\n    .trim(),\n  director: yup\n    .string()\n    .required(\"Director name is required\")\n    .min(3, \"Director name must be at least 3 characters\")\n    .max(100, \"Director name must not exceed 100 characters\")\n    .trim(),\n  poster: yup\n    .string()\n    .nullable()\n    .transform((value) => value || null)\n    .test('valid-url', 'Must be a valid HTTPS image URL from an allowed domain', (value) => {\n      if (!value) return true;\n      return isValidImageUrl(value);\n    })\n    .trim(),\n  yearOfRelease: yup\n    .number()\n    .required(\"Release year is required\")\n    .min(1888, \"Year must be 1888 or later\")\n    .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup\n    .string()\n    .required(\"Producer selection is required\"),\n  actors: yup\n    .array()\n    .min(1, \"Please select at least one actor\")\n    .max(20, \"Cannot select more than 20 actors\")\n    .required(\"Actor selection is required\")\n});\n\nconst AddMovie = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const [imageError, setImageError] = useState(false);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [showImageHelp, setShowImageHelp] = useState(false);\n\n  const validateImageUrl = useCallback(async (url) => {\n    if (!url) return true; // Empty URL is valid\n    const convertedUrl = convertGoogleDriveURL(url);\n    if (!isValidImageUrl(convertedUrl)) return false;\n\n    setImageLoading(true);\n    return new Promise((resolve) => {\n      const img = new Image();\n      img.onload = () => {\n        setImageLoading(false);\n        resolve(true);\n      };\n      img.onerror = () => {\n        setImageLoading(false);\n        resolve(false);\n      };\n      img.src = convertedUrl;\n    });\n  }, []);\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (values) => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const convertedPosterUrl = values.poster ? convertGoogleDriveURL(values.poster) : null;\n        \n        if (convertedPosterUrl) {\n          const isImageValid = await validateImageUrl(convertedPosterUrl);\n          if (!isImageValid) {\n            formik.setFieldError('poster', 'Unable to load image from this URL');\n            setLoading(false);\n            return;\n          }\n        }\n\n        const submitValues = {\n          ...values,\n          poster: convertedPosterUrl\n        };\n\n        await api.movies.add(submitValues);\n        navigate(\"/\");\n      } catch (err) {\n        setError(err.response?.data?.message || \"Failed to add movie. Please try again.\");\n        console.error(\"Add movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  // Rest of the component code remains the same...\n  \n  return (\n    <Container maxWidth=\"md\">\n      <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n        {/* Rest of the JSX remains the same... */}\n      </Box>\n    </Container>\n  );\n};\n\nexport default AddMovie;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,qBAAqB;AACzC,SAASC,SAAS,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}