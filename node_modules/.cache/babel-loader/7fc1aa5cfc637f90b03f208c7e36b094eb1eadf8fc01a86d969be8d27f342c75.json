{"ast":null,"code":"// // // app.js\n\n// import './App.css';\n// import { ThemeProvider } from '@emotion/react';\n// import { \n//   AppBar, \n//   Button, \n//   Paper, \n//   Toolbar, \n//   createTheme,\n//   CircularProgress,\n//   Snackbar,\n//   Alert \n// } from '@mui/material';\n// import { useState, useEffect } from 'react';\n// import { Route, Routes, useNavigate } from 'react-router-dom';\n// import Brightness7Icon from '@mui/icons-material/Brightness7';\n// import Brightness4Icon from '@mui/icons-material/Brightness4';\n// import AddMovie from './AddMovie';\n// import Movie from './Movie';\n// import AddActor from './AddActor';\n// import AddProducer from './AddProducer';\n// import EditMovies from './EditMovies';\n\n// function App() {\n//   const [mode, setMode] = useState(() => localStorage.getItem('theme') || \"dark\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     localStorage.setItem('theme', mode);\n//   }, [mode]);\n\n//   const theme = createTheme({\n//     palette: {\n//       mode: mode,\n//       primary: {\n//         main: mode === 'dark' ? '#90caf9' : '#1976d2',\n//       },\n//       background: {\n//         default: mode === 'dark' ? '#121212' : '#ffffff',\n//         paper: mode === 'dark' ? '#1e1e1e' : '#ffffff',\n//       },\n//     },\n//   });\n\n//   const handleError = (error) => {\n//     console.error('Application error:', error);\n//     setError(error.message || 'An unexpected error occurred');\n//     setLoading(false);\n//   };\n\n//   const handleCloseError = () => {\n//     setError(null);\n//   };\n\n//   const navigationItems = [\n//     { path: \"/\", label: \"All Movies\" },\n//     { path: \"/add-movies\", label: \"Add Movies\" },\n//     { path: \"/add-actor\", label: \"Add Actor\" },\n//     { path: \"/add-producer\", label: \"Add Producer\" },\n//   ];\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Paper \n//         className=\"paper\" \n//         elevation={5} \n//         style={{ \n//           borderRadius: \"0px\", \n//           minHeight: \"100vh\",\n//           position: \"relative\" \n//         }}\n//       >\n//         <AppBar className=\"nav-bar\" position=\"static\">\n//           <Toolbar>\n//             <Button\n//               onClick={() => navigate(\"/\")}\n//               color=\"inherit\"\n//               sx={{ mr: 2 }}\n//             >\n//               <span className='logo'>IMDB</span>\n//             </Button>\n\n//             {navigationItems.map((item) => (\n//               <Button\n//                 key={item.path}\n//                 onClick={() => navigate(item.path)}\n//                 color=\"inherit\"\n//                 sx={{ mr: 1 }}\n//               >\n//                 {item.label}\n//               </Button>\n//             ))}\n\n//             <Button\n//               sx={{ marginLeft: \"auto\" }}\n//               startIcon={mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n//               onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n//               color=\"inherit\"\n//             >\n//               {mode === \"light\" ? \"Dark\" : \"Light\"} Mode\n//             </Button>\n//           </Toolbar>\n//         </AppBar>\n\n//         {loading && (\n//           <div style={{\n//             position: 'fixed',\n//             top: '50%',\n//             left: '50%',\n//             transform: 'translate(-50%, -50%)',\n//             zIndex: 1000\n//           }}>\n//             <CircularProgress />\n//           </div>\n//         )}\n\n//         <Routes>\n//           <Route\n//             path=\"/\"\n//             element={<Movie setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"/add-movies\"\n//             element={<AddMovie setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"/add-actor\"\n//             element={<AddActor setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"/add-producer\"\n//             element={<AddProducer setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"movies/edit/:id\"\n//             element={<EditMovies setLoading={setLoading} onError={handleError} />}\n//           />\n//         </Routes>\n\n//         <Snackbar \n//           open={!!error} \n//           autoHideDuration={6000} \n//           onClose={handleCloseError}\n//           anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//         >\n//           <Alert onClose={handleCloseError} severity=\"error\" variant=\"filled\">\n//             {error}\n//           </Alert>\n//         </Snackbar>\n//       </Paper>\n//     </ThemeProvider>\n//   );\n// }\n\n// export default App;\n\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst morgan = require('morgan');\nconst compression = require('compression');\nconst winston = require('winston');\n\n// Setup Winston logger\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\n  transports: [new winston.transports.File({\n    filename: 'error.log',\n    level: 'error'\n  }), new winston.transports.File({\n    filename: 'combined.log'\n  }), new winston.transports.Console({\n    format: winston.format.combine(winston.format.colorize(), winston.format.simple())\n  })]\n});\n\n// Import routes\nconst movieRouter = require(\"./routes/movie\");\nconst actorRouter = require(\"./routes/actor\");\nconst producerRouter = require(\"./routes/producer\");\n\n// Initialize express\nconst app = express();\n\n// Configuration\nconst config = {\n  port: parseInt(process.env.PORT || '5000', 10),\n  mongoUrl: process.env.MONGO_URL || 'mongodb+srv://JAYACHANDRAN:KQJrxDn44181NsqT@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0',\n  nodeEnv: process.env.NODE_ENV || 'development',\n  buildVersion: process.env.BUILD_VERSION || 'development',\n  corsOrigins: process.env.CORS_ORIGINS ? process.env.CORS_ORIGINS.split(',') : ['http://localhost:3000', 'http://frontend.jayachandran.xyz'],\n  connectionTimeout: parseInt(process.env.CONNECTION_TIMEOUT || '10000', 10),\n  readyStateCheckInterval: parseInt(process.env.READY_STATE_CHECK_INTERVAL || '5000', 10)\n};\n\n// Server state\nlet isShuttingDown = false;\nlet isDbConnected = false;\n\n// Enhanced rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  message: {\n    error: 'Too many requests, please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      connectSrc: [\"'self'\", ...config.corsOrigins]\n    }\n  }\n}));\napp.use(compression());\napp.use(morgan('combined'));\napp.use(limiter);\napp.use(cors({\n  origin: config.corsOrigins,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true,\n  maxAge: 86400\n}));\napp.use(express.json({\n  limit: '10mb'\n}));\napp.use(express.urlencoded({\n  extended: true,\n  limit: '10mb'\n}));\n\n// Request logging middleware\napp.use((req, res, next) => {\n  if (!isShuttingDown) {\n    logger.info(`[${new Date().toISOString()}] ${req.method} ${req.path}`);\n    next();\n  } else {\n    res.status(503).json({\n      error: 'Service is shutting down',\n      retryAfter: 30\n    });\n  }\n});\n\n// Health check endpoints\napp.get('/api/health/live', (req, res) => {\n  res.status(200).json({\n    status: 'OK',\n    timestamp: new Date().toISOString()\n  });\n});\napp.get('/api/health/ready', (req, res) => {\n  if (isDbConnected) {\n    res.status(200).json({\n      status: 'OK',\n      timestamp: new Date().toISOString()\n    });\n  } else {\n    res.status(503).json({\n      status: 'Service Unavailable',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// API Routes\napp.use(\"/api/movies\", movieRouter);\napp.use(\"/api/actors\", actorRouter);\napp.use(\"/api/producers\", producerRouter);\n\n// Enhanced error handling middleware\napp.use((err, req, res, next) => {\n  logger.error('Error:', {\n    error: err,\n    request: {\n      method: req.method,\n      path: req.path,\n      headers: req.headers,\n      body: req.body\n    }\n  });\n  const statusCode = err.status || 500;\n  const errorResponse = {\n    error: err.name || 'Internal Server Error',\n    message: config.nodeEnv === 'development' ? err.message : 'An error occurred',\n    status: statusCode,\n    timestamp: new Date().toISOString(),\n    path: req.path,\n    version: config.buildVersion\n  };\n  if (config.nodeEnv === 'development' && err.stack) {\n    errorResponse.stack = err.stack;\n  }\n  res.status(statusCode).json(errorResponse);\n});\n\n// MongoDB Connection with improved error handling\nconst connectDB = async (retries = 5, delay = 5000) => {\n  while (retries > 0 && !isShuttingDown) {\n    try {\n      logger.info(`Connecting to MongoDB... (${retries} attempts remaining)`);\n      await mongoose.connect(config.mongoUrl, {\n        serverSelectionTimeoutMS: config.connectionTimeout,\n        connectTimeoutMS: config.connectionTimeout,\n        socketTimeoutMS: 45000,\n        retryWrites: true,\n        w: 'majority',\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n      });\n      logger.info('✅ MongoDB connected successfully');\n      isDbConnected = true;\n      return true;\n    } catch (err) {\n      logger.error('❌ MongoDB connection error:', err);\n      retries--;\n      if (retries === 0) {\n        logger.error('❌ Max retries reached');\n        return false;\n      }\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  return false;\n};\n\n// Start Server with enhanced logging\nconst startServer = async () => {\n  try {\n    const isConnected = await connectDB();\n    if (!isConnected) {\n      logger.error('Failed to connect to MongoDB. Exiting...');\n      process.exit(1);\n    }\n    const server = app.listen(config.port, '0.0.0.0', () => {\n      logger.info(`\n🚀 Server is running on port ${config.port}\n📦 Version: ${config.buildVersion}\n🔧 Environment: ${config.nodeEnv}\n🌐 CORS Origins: ${config.corsOrigins.join(', ')}\n🏥 Liveness: http://localhost:${config.port}/api/health/live\n🔍 Readiness: http://localhost:${config.port}/api/health/ready\n            `);\n    });\n\n    // Server error handler\n    server.on('error', err => {\n      logger.error('Server error:', err);\n      process.exit(1);\n    });\n\n    // Enhanced periodic health checks\n    setInterval(() => {\n      if (!isShuttingDown && !isDbConnected) {\n        logger.warn('Database connection check failed, attempting reconnect...');\n        connectDB(3).catch(err => logger.error('Reconnection failed:', err));\n      }\n    }, config.readyStateCheckInterval);\n  } catch (err) {\n    logger.error('Failed to start server:', err);\n    process.exit(1);\n  }\n};\n\n// Start the server\nstartServer();\nmodule.exports = app;","map":{"version":3,"names":["express","require","mongoose","cors","helmet","rateLimit","morgan","compression","winston","logger","createLogger","level","format","combine","timestamp","json","transports","File","filename","Console","colorize","simple","movieRouter","actorRouter","producerRouter","app","config","port","parseInt","process","env","PORT","mongoUrl","MONGO_URL","nodeEnv","NODE_ENV","buildVersion","BUILD_VERSION","corsOrigins","CORS_ORIGINS","split","connectionTimeout","CONNECTION_TIMEOUT","readyStateCheckInterval","READY_STATE_CHECK_INTERVAL","isShuttingDown","isDbConnected","limiter","windowMs","max","message","error","standardHeaders","legacyHeaders","use","contentSecurityPolicy","directives","defaultSrc","connectSrc","origin","methods","allowedHeaders","credentials","maxAge","limit","urlencoded","extended","req","res","next","info","Date","toISOString","method","path","status","retryAfter","get","err","request","headers","body","statusCode","errorResponse","name","version","stack","connectDB","retries","delay","connect","serverSelectionTimeoutMS","connectTimeoutMS","socketTimeoutMS","retryWrites","w","useNewUrlParser","useUnifiedTopology","Promise","resolve","setTimeout","startServer","isConnected","exit","server","listen","join","on","setInterval","warn","catch","module","exports"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/App.js"],"sourcesContent":["// // // app.js\n\n// import './App.css';\n// import { ThemeProvider } from '@emotion/react';\n// import { \n//   AppBar, \n//   Button, \n//   Paper, \n//   Toolbar, \n//   createTheme,\n//   CircularProgress,\n//   Snackbar,\n//   Alert \n// } from '@mui/material';\n// import { useState, useEffect } from 'react';\n// import { Route, Routes, useNavigate } from 'react-router-dom';\n// import Brightness7Icon from '@mui/icons-material/Brightness7';\n// import Brightness4Icon from '@mui/icons-material/Brightness4';\n// import AddMovie from './AddMovie';\n// import Movie from './Movie';\n// import AddActor from './AddActor';\n// import AddProducer from './AddProducer';\n// import EditMovies from './EditMovies';\n\n// function App() {\n//   const [mode, setMode] = useState(() => localStorage.getItem('theme') || \"dark\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     localStorage.setItem('theme', mode);\n//   }, [mode]);\n\n//   const theme = createTheme({\n//     palette: {\n//       mode: mode,\n//       primary: {\n//         main: mode === 'dark' ? '#90caf9' : '#1976d2',\n//       },\n//       background: {\n//         default: mode === 'dark' ? '#121212' : '#ffffff',\n//         paper: mode === 'dark' ? '#1e1e1e' : '#ffffff',\n//       },\n//     },\n//   });\n\n//   const handleError = (error) => {\n//     console.error('Application error:', error);\n//     setError(error.message || 'An unexpected error occurred');\n//     setLoading(false);\n//   };\n\n//   const handleCloseError = () => {\n//     setError(null);\n//   };\n\n//   const navigationItems = [\n//     { path: \"/\", label: \"All Movies\" },\n//     { path: \"/add-movies\", label: \"Add Movies\" },\n//     { path: \"/add-actor\", label: \"Add Actor\" },\n//     { path: \"/add-producer\", label: \"Add Producer\" },\n//   ];\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Paper \n//         className=\"paper\" \n//         elevation={5} \n//         style={{ \n//           borderRadius: \"0px\", \n//           minHeight: \"100vh\",\n//           position: \"relative\" \n//         }}\n//       >\n//         <AppBar className=\"nav-bar\" position=\"static\">\n//           <Toolbar>\n//             <Button\n//               onClick={() => navigate(\"/\")}\n//               color=\"inherit\"\n//               sx={{ mr: 2 }}\n//             >\n//               <span className='logo'>IMDB</span>\n//             </Button>\n\n//             {navigationItems.map((item) => (\n//               <Button\n//                 key={item.path}\n//                 onClick={() => navigate(item.path)}\n//                 color=\"inherit\"\n//                 sx={{ mr: 1 }}\n//               >\n//                 {item.label}\n//               </Button>\n//             ))}\n\n//             <Button\n//               sx={{ marginLeft: \"auto\" }}\n//               startIcon={mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n//               onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n//               color=\"inherit\"\n//             >\n//               {mode === \"light\" ? \"Dark\" : \"Light\"} Mode\n//             </Button>\n//           </Toolbar>\n//         </AppBar>\n\n//         {loading && (\n//           <div style={{\n//             position: 'fixed',\n//             top: '50%',\n//             left: '50%',\n//             transform: 'translate(-50%, -50%)',\n//             zIndex: 1000\n//           }}>\n//             <CircularProgress />\n//           </div>\n//         )}\n\n//         <Routes>\n//           <Route\n//             path=\"/\"\n//             element={<Movie setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"/add-movies\"\n//             element={<AddMovie setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"/add-actor\"\n//             element={<AddActor setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"/add-producer\"\n//             element={<AddProducer setLoading={setLoading} onError={handleError} />}\n//           />\n//           <Route\n//             path=\"movies/edit/:id\"\n//             element={<EditMovies setLoading={setLoading} onError={handleError} />}\n//           />\n//         </Routes>\n\n//         <Snackbar \n//           open={!!error} \n//           autoHideDuration={6000} \n//           onClose={handleCloseError}\n//           anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//         >\n//           <Alert onClose={handleCloseError} severity=\"error\" variant=\"filled\">\n//             {error}\n//           </Alert>\n//         </Snackbar>\n//       </Paper>\n//     </ThemeProvider>\n//   );\n// }\n\n// export default App;\n\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst morgan = require('morgan');\nconst compression = require('compression');\nconst winston = require('winston');\n\n// Setup Winston logger\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\n// Import routes\nconst movieRouter = require(\"./routes/movie\");\nconst actorRouter = require(\"./routes/actor\");\nconst producerRouter = require(\"./routes/producer\");\n\n// Initialize express\nconst app = express();\n\n// Configuration\nconst config = {\n    port: parseInt(process.env.PORT || '5000', 10),\n    mongoUrl: process.env.MONGO_URL || 'mongodb+srv://JAYACHANDRAN:KQJrxDn44181NsqT@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0',\n    nodeEnv: process.env.NODE_ENV || 'development',\n    buildVersion: process.env.BUILD_VERSION || 'development',\n    corsOrigins: process.env.CORS_ORIGINS ? process.env.CORS_ORIGINS.split(',') : ['http://localhost:3000', 'http://frontend.jayachandran.xyz'],\n    connectionTimeout: parseInt(process.env.CONNECTION_TIMEOUT || '10000', 10),\n    readyStateCheckInterval: parseInt(process.env.READY_STATE_CHECK_INTERVAL || '5000', 10)\n};\n\n// Server state\nlet isShuttingDown = false;\nlet isDbConnected = false;\n\n// Enhanced rate limiting\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 100,\n    message: { error: 'Too many requests, please try again later.' },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n\n// Middleware\napp.use(helmet({\n    contentSecurityPolicy: {\n        directives: {\n            defaultSrc: [\"'self'\"],\n            connectSrc: [\"'self'\", ...config.corsOrigins]\n        }\n    }\n}));\napp.use(compression());\napp.use(morgan('combined'));\napp.use(limiter);\napp.use(cors({\n    origin: config.corsOrigins,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    credentials: true,\n    maxAge: 86400\n}));\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Request logging middleware\napp.use((req, res, next) => {\n    if (!isShuttingDown) {\n        logger.info(`[${new Date().toISOString()}] ${req.method} ${req.path}`);\n        next();\n    } else {\n        res.status(503).json({ \n            error: 'Service is shutting down',\n            retryAfter: 30\n        });\n    }\n});\n\n// Health check endpoints\napp.get('/api/health/live', (req, res) => {\n    res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\napp.get('/api/health/ready', (req, res) => {\n    if (isDbConnected) {\n        res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });\n    } else {\n        res.status(503).json({ status: 'Service Unavailable', timestamp: new Date().toISOString() });\n    }\n});\n\n// API Routes\napp.use(\"/api/movies\", movieRouter);\napp.use(\"/api/actors\", actorRouter);\napp.use(\"/api/producers\", producerRouter);\n\n// Enhanced error handling middleware\napp.use((err, req, res, next) => {\n    logger.error('Error:', {\n        error: err,\n        request: {\n            method: req.method,\n            path: req.path,\n            headers: req.headers,\n            body: req.body\n        }\n    });\n\n    const statusCode = err.status || 500;\n    const errorResponse = {\n        error: err.name || 'Internal Server Error',\n        message: config.nodeEnv === 'development' ? err.message : 'An error occurred',\n        status: statusCode,\n        timestamp: new Date().toISOString(),\n        path: req.path,\n        version: config.buildVersion\n    };\n\n    if (config.nodeEnv === 'development' && err.stack) {\n        errorResponse.stack = err.stack;\n    }\n\n    res.status(statusCode).json(errorResponse);\n});\n\n// MongoDB Connection with improved error handling\nconst connectDB = async (retries = 5, delay = 5000) => {\n    while (retries > 0 && !isShuttingDown) {\n        try {\n            logger.info(`Connecting to MongoDB... (${retries} attempts remaining)`);\n            \n            await mongoose.connect(config.mongoUrl, {\n                serverSelectionTimeoutMS: config.connectionTimeout,\n                connectTimeoutMS: config.connectionTimeout,\n                socketTimeoutMS: 45000,\n                retryWrites: true,\n                w: 'majority',\n                useNewUrlParser: true,\n                useUnifiedTopology: true\n            });\n\n            logger.info('✅ MongoDB connected successfully');\n            isDbConnected = true;\n            return true;\n        } catch (err) {\n            logger.error('❌ MongoDB connection error:', err);\n            retries--;\n            \n            if (retries === 0) {\n                logger.error('❌ Max retries reached');\n                return false;\n            }\n\n            await new Promise(resolve => setTimeout(resolve, delay));\n        }\n    }\n    return false;\n};\n\n// Start Server with enhanced logging\nconst startServer = async () => {\n    try {\n        const isConnected = await connectDB();\n        \n        if (!isConnected) {\n            logger.error('Failed to connect to MongoDB. Exiting...');\n            process.exit(1);\n        }\n\n        const server = app.listen(config.port, '0.0.0.0', () => {\n            logger.info(`\n🚀 Server is running on port ${config.port}\n📦 Version: ${config.buildVersion}\n🔧 Environment: ${config.nodeEnv}\n🌐 CORS Origins: ${config.corsOrigins.join(', ')}\n🏥 Liveness: http://localhost:${config.port}/api/health/live\n🔍 Readiness: http://localhost:${config.port}/api/health/ready\n            `);\n        });\n\n        // Server error handler\n        server.on('error', (err) => {\n            logger.error('Server error:', err);\n            process.exit(1);\n        });\n\n        // Enhanced periodic health checks\n        setInterval(() => {\n            if (!isShuttingDown && !isDbConnected) {\n                logger.warn('Database connection check failed, attempting reconnect...');\n                connectDB(3).catch(err => logger.error('Reconnection failed:', err));\n            }\n        }, config.readyStateCheckInterval);\n\n    } catch (err) {\n        logger.error('Failed to start server:', err);\n        process.exit(1);\n    }\n};\n\n// Start the server\nstartServer();\n\nmodule.exports = app;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}