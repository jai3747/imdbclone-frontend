{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/test/imdb-clone-frontend/src/EditMovies.js\",\n  _s = $RefreshSig$();\n// // src/EditMovies.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper\n// } from \"@mui/material\";\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\"),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\"),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\"),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\"),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const EditMovies = () => {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         await api.movies.update(id, values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(\"Failed to update movie. Please try again.\");\n//         console.error(\"Update movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n//       setPreviewUrl(formik.values.poster);\n//     } else {\n//       setPreviewUrl(\"\");\n//     }\n//   }, [formik.values.poster]);\n\n//   const loadData = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n\n//       const [movieRes, producersRes, actorsRes] = await Promise.all([\n//         api.movies.getById(id),\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n\n//       // Set form values from movie data\n//       formik.setValues({\n//         name: movieRes.data.name,\n//         desc: movieRes.data.desc,\n//         director: movieRes.data.director,\n//         poster: movieRes.data.poster,\n//         yearOfRelease: movieRes.data.yearOfRelease,\n//         producer: movieRes.data.producer,\n//         actors: movieRes.data.actors.map(actor => actor._id)\n//       });\n//     } catch (err) {\n//       setError(\"Failed to load movie data. Please try again later.\");\n//       console.error(\"Load data error:\", err);\n//       navigate(\"/\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Edit Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={formik.touched.poster && formik.errors.poster}\n//               />\n//             </Box>\n//             {previewUrl && (\n//               <Paper elevation={3} sx={{ p: 1 }}>\n//                 <img\n//                   src={previewUrl}\n//                   alt=\"Poster preview\"\n//                   style={{ height: 100, objectFit: 'contain' }}\n//                   onError={() => setPreviewUrl(\"\")}\n//                 />\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => {\n//                     const actor = actors.find(a => a._id === value);\n//                     return (\n//                       <Chip\n//                         key={value}\n//                         label={actor ? actor.name : 'Unknown'}\n//                         size=\"small\"\n//                       />\n//                     );\n//                   })}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n//             <Button\n//               variant=\"contained\"\n//               type=\"submit\"\n//               disabled={loading}\n//               size=\"large\"\n//               fullWidth\n//             >\n//               {loading ? (\n//                 <CircularProgress size={24} sx={{ color: 'white' }} />\n//               ) : (\n//                 'Update Movie'\n//               )}\n//             </Button>\n//             <Button\n//               variant=\"outlined\"\n//               size=\"large\"\n//               fullWidth\n//               onClick={() => navigate(\"/\")}\n//             >\n//               Cancel\n//             </Button>\n//           </Box>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default EditMovies;\n// src/EditMovies.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Alert, Container, Box, Typography, Chip, OutlinedInput, FormHelperText, Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\nconst movieValidationSchema = yup.object({\n  name: yup.string().required(\"Movie name is required\").min(3, \"Movie name must be at least 3 characters\"),\n  desc: yup.string().required(\"Description is required\").min(10, \"Description must be at least 10 characters\"),\n  director: yup.string().required(\"Director name is required\").min(3, \"Director name must be at least 3 characters\"),\n  poster: yup.string().required(\"Poster URL is required\").url(\"Must be a valid URL\"),\n  yearOfRelease: yup.number().required(\"Release year is required\").min(1888, \"Year must be 1888 or later\").max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup.string().required(\"Producer selection is required\"),\n  actors: yup.array().min(1, \"Please select at least one actor\").required(\"Actor selection is required\")\n});\nconst EditMovies = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async values => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.update(id, values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(\"Failed to update movie. Please try again.\");\n        console.error(\"Update movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n  useEffect(() => {\n    loadData();\n  }, [id]);\n  useEffect(() => {\n    if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n      setPreviewUrl(formik.values.poster);\n    } else {\n      setPreviewUrl(\"\");\n    }\n  }, [formik.values.poster]);\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const [movieRes, producersRes, actorsRes] = await Promise.all([api.movies.getById(id), api.producers.getAll(), api.actors.getAll()]);\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n\n      // Set form values from movie data\n      formik.setValues({\n        name: movieRes.data.name,\n        desc: movieRes.data.desc,\n        director: movieRes.data.director,\n        poster: movieRes.data.poster,\n        yearOfRelease: movieRes.data.yearOfRelease,\n        producer: movieRes.data.producer._id,\n        actors: movieRes.data.actors.map(actor => actor._id)\n      });\n    } catch (err) {\n      setError(\"Failed to load movie data. Please try again later.\");\n      console.error(\"Load data error:\", err);\n      navigate(\"/\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: formik.handleSubmit,\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Edit Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'grid',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Movie Name\",\n          ...formik.getFieldProps('name'),\n          error: formik.touched.name && Boolean(formik.errors.name),\n          helperText: formik.touched.name && formik.errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          label: \"Description\",\n          ...formik.getFieldProps('desc'),\n          error: formik.touched.desc && Boolean(formik.errors.desc),\n          helperText: formik.touched.desc && formik.errors.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Director\",\n          ...formik.getFieldProps('director'),\n          error: formik.touched.director && Boolean(formik.errors.director),\n          helperText: formik.touched.director && formik.errors.director\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 2,\n            alignItems: 'flex-start'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Poster URL\",\n              ...formik.getFieldProps('poster'),\n              error: formik.touched.poster && Boolean(formik.errors.poster),\n              helperText: formik.touched.poster && formik.errors.poster\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this), previewUrl && /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            sx: {\n              p: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: previewUrl,\n              alt: \"Poster preview\",\n              style: {\n                height: 100,\n                objectFit: 'contain'\n              },\n              onError: () => setPreviewUrl(\"\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          type: \"number\",\n          label: \"Year of Release\",\n          ...formik.getFieldProps('yearOfRelease'),\n          error: formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease),\n          helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.producer && Boolean(formik.errors.producer),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Producer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            ...formik.getFieldProps('producer'),\n            label: \"Producer\",\n            children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: producer._id,\n              children: producer.name\n            }, producer._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }, this), formik.touched.producer && formik.errors.producer && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.producer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: formik.touched.actors && Boolean(formik.errors.actors),\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Actors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            ...formik.getFieldProps('actors'),\n            input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              label: \"Actors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 22\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 0.5\n              },\n              children: selected.map(value => {\n                const actor = actors.find(a => a._id === value);\n                return /*#__PURE__*/_jsxDEV(Chip, {\n                  label: actor ? actor.name : 'Unknown',\n                  size: \"small\"\n                }, value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 571,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 17\n            }, this),\n            MenuProps: MenuProps,\n            children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: actor._id,\n              children: actor.name\n            }, actor._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 13\n          }, this), formik.touched.actors && formik.errors.actors && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: formik.errors.actors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 2,\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            type: \"submit\",\n            disabled: loading,\n            size: \"large\",\n            fullWidth: true,\n            children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24,\n              sx: {\n                color: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 17\n            }, this) : 'Update Movie'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            size: \"large\",\n            fullWidth: true,\n            onClick: () => navigate(\"/\"),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\n_s(EditMovies, \"J2iJRDbqrFcJwR3l50BE3ClKJWA=\", false, function () {\n  return [useParams, useNavigate, useFormik];\n});\n_c = EditMovies;\nexport default EditMovies;\nvar _c;\n$RefreshReg$(_c, \"EditMovies\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","api","useFormik","yup","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Alert","Container","Box","Typography","Chip","OutlinedInput","FormHelperText","Paper","jsxDEV","_jsxDEV","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","movieValidationSchema","object","name","string","required","min","desc","director","poster","url","yearOfRelease","number","max","Date","getFullYear","producer","actors","array","EditMovies","_s","id","navigate","loading","setLoading","error","setError","producers","setProducers","setActors","previewUrl","setPreviewUrl","formik","initialValues","validationSchema","onSubmit","values","movies","update","err","console","loadData","match","movieRes","producersRes","actorsRes","Promise","all","getById","getAll","data","setValues","_id","map","actor","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","component","handleSubmit","sx","mt","mb","variant","gutterBottom","severity","gap","fullWidth","label","getFieldProps","touched","Boolean","errors","helperText","multiline","rows","flex","elevation","p","src","alt","height","objectFit","onError","type","value","multiple","input","renderValue","selected","flexWrap","find","a","size","disabled","color","onClick","_c","$RefreshReg$"],"sources":["/Users/jayachandran/test/imdb-clone-frontend/src/EditMovies.js"],"sourcesContent":["// // src/EditMovies.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { api } from \"./config/api.config\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   CircularProgress,\n//   Alert,\n//   Container,\n//   Box,\n//   Typography,\n//   Chip,\n//   OutlinedInput,\n//   FormHelperText,\n//   Paper\n// } from \"@mui/material\";\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const movieValidationSchema = yup.object({\n//   name: yup\n//     .string()\n//     .required(\"Movie name is required\")\n//     .min(3, \"Movie name must be at least 3 characters\"),\n//   desc: yup\n//     .string()\n//     .required(\"Description is required\")\n//     .min(10, \"Description must be at least 10 characters\"),\n//   director: yup\n//     .string()\n//     .required(\"Director name is required\")\n//     .min(3, \"Director name must be at least 3 characters\"),\n//   poster: yup\n//     .string()\n//     .required(\"Poster URL is required\")\n//     .url(\"Must be a valid URL\"),\n//   yearOfRelease: yup\n//     .number()\n//     .required(\"Release year is required\")\n//     .min(1888, \"Year must be 1888 or later\")\n//     .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n//   producer: yup\n//     .string()\n//     .required(\"Producer selection is required\"),\n//   actors: yup\n//     .array()\n//     .min(1, \"Please select at least one actor\")\n//     .required(\"Actor selection is required\")\n// });\n\n// const EditMovies = () => {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [previewUrl, setPreviewUrl] = useState(\"\");\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: new Date().getFullYear(),\n//       producer: \"\",\n//       actors: []\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         await api.movies.update(id, values);\n//         navigate(\"/\");\n//       } catch (err) {\n//         setError(\"Failed to update movie. Please try again.\");\n//         console.error(\"Update movie error:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   });\n\n//   useEffect(() => {\n//     loadData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n//       setPreviewUrl(formik.values.poster);\n//     } else {\n//       setPreviewUrl(\"\");\n//     }\n//   }, [formik.values.poster]);\n\n//   const loadData = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n      \n//       const [movieRes, producersRes, actorsRes] = await Promise.all([\n//         api.movies.getById(id),\n//         api.producers.getAll(),\n//         api.actors.getAll()\n//       ]);\n\n//       setProducers(producersRes.data);\n//       setActors(actorsRes.data);\n\n//       // Set form values from movie data\n//       formik.setValues({\n//         name: movieRes.data.name,\n//         desc: movieRes.data.desc,\n//         director: movieRes.data.director,\n//         poster: movieRes.data.poster,\n//         yearOfRelease: movieRes.data.yearOfRelease,\n//         producer: movieRes.data.producer,\n//         actors: movieRes.data.actors.map(actor => actor._id)\n//       });\n//     } catch (err) {\n//       setError(\"Failed to load movie data. Please try again later.\");\n//       console.error(\"Load data error:\", err);\n//       navigate(\"/\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"md\">\n//       <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Edit Movie\n//         </Typography>\n\n//         {error && (\n//           <Alert severity=\"error\" sx={{ mb: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n\n//         <Box sx={{ display: 'grid', gap: 2 }}>\n//           <TextField\n//             fullWidth\n//             label=\"Movie Name\"\n//             {...formik.getFieldProps('name')}\n//             error={formik.touched.name && Boolean(formik.errors.name)}\n//             helperText={formik.touched.name && formik.errors.name}\n//           />\n\n//           <TextField\n//             fullWidth\n//             multiline\n//             rows={4}\n//             label=\"Description\"\n//             {...formik.getFieldProps('desc')}\n//             error={formik.touched.desc && Boolean(formik.errors.desc)}\n//             helperText={formik.touched.desc && formik.errors.desc}\n//           />\n\n//           <TextField\n//             fullWidth\n//             label=\"Director\"\n//             {...formik.getFieldProps('director')}\n//             error={formik.touched.director && Boolean(formik.errors.director)}\n//             helperText={formik.touched.director && formik.errors.director}\n//           />\n\n//           <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n//             <Box sx={{ flex: 1 }}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Poster URL\"\n//                 {...formik.getFieldProps('poster')}\n//                 error={formik.touched.poster && Boolean(formik.errors.poster)}\n//                 helperText={formik.touched.poster && formik.errors.poster}\n//               />\n//             </Box>\n//             {previewUrl && (\n//               <Paper elevation={3} sx={{ p: 1 }}>\n//                 <img\n//                   src={previewUrl}\n//                   alt=\"Poster preview\"\n//                   style={{ height: 100, objectFit: 'contain' }}\n//                   onError={() => setPreviewUrl(\"\")}\n//                 />\n//               </Paper>\n//             )}\n//           </Box>\n\n//           <TextField\n//             fullWidth\n//             type=\"number\"\n//             label=\"Year of Release\"\n//             {...formik.getFieldProps('yearOfRelease')}\n//             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           />\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.producer && Boolean(formik.errors.producer)}\n//           >\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               {...formik.getFieldProps('producer')}\n//               label=\"Producer\"\n//             >\n//               {producers.map(producer => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.producer && formik.errors.producer && (\n//               <FormHelperText>{formik.errors.producer}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <FormControl \n//             fullWidth\n//             error={formik.touched.actors && Boolean(formik.errors.actors)}\n//           >\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               {...formik.getFieldProps('actors')}\n//               input={<OutlinedInput label=\"Actors\" />}\n//               renderValue={(selected) => (\n//                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n//                   {selected.map((value) => {\n//                     const actor = actors.find(a => a._id === value);\n//                     return (\n//                       <Chip\n//                         key={value}\n//                         label={actor ? actor.name : 'Unknown'}\n//                         size=\"small\"\n//                       />\n//                     );\n//                   })}\n//                 </Box>\n//               )}\n//               MenuProps={MenuProps}\n//             >\n//               {actors.map(actor => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//             {formik.touched.actors && formik.errors.actors && (\n//               <FormHelperText>{formik.errors.actors}</FormHelperText>\n//             )}\n//           </FormControl>\n\n//           <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n//             <Button\n//               variant=\"contained\"\n//               type=\"submit\"\n//               disabled={loading}\n//               size=\"large\"\n//               fullWidth\n//             >\n//               {loading ? (\n//                 <CircularProgress size={24} sx={{ color: 'white' }} />\n//               ) : (\n//                 'Update Movie'\n//               )}\n//             </Button>\n//             <Button\n//               variant=\"outlined\"\n//               size=\"large\"\n//               fullWidth\n//               onClick={() => navigate(\"/\")}\n//             >\n//               Cancel\n//             </Button>\n//           </Box>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default EditMovies;\n// src/EditMovies.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { api } from \"./config/api.config\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  CircularProgress,\n  Alert,\n  Container,\n  Box,\n  Typography,\n  Chip,\n  OutlinedInput,\n  FormHelperText,\n  Paper\n} from \"@mui/material\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst movieValidationSchema = yup.object({\n  name: yup\n    .string()\n    .required(\"Movie name is required\")\n    .min(3, \"Movie name must be at least 3 characters\"),\n  desc: yup\n    .string()\n    .required(\"Description is required\")\n    .min(10, \"Description must be at least 10 characters\"),\n  director: yup\n    .string()\n    .required(\"Director name is required\")\n    .min(3, \"Director name must be at least 3 characters\"),\n  poster: yup\n    .string()\n    .required(\"Poster URL is required\")\n    .url(\"Must be a valid URL\"),\n  yearOfRelease: yup\n    .number()\n    .required(\"Release year is required\")\n    .min(1888, \"Year must be 1888 or later\")\n    .max(new Date().getFullYear() + 5, \"Year cannot be more than 5 years in the future\"),\n  producer: yup\n    .string()\n    .required(\"Producer selection is required\"),\n  actors: yup\n    .array()\n    .min(1, \"Please select at least one actor\")\n    .required(\"Actor selection is required\")\n});\n\nconst EditMovies = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: new Date().getFullYear(),\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (values) => {\n      try {\n        setLoading(true);\n        setError(null);\n        await api.movies.update(id, values);\n        navigate(\"/\");\n      } catch (err) {\n        setError(\"Failed to update movie. Please try again.\");\n        console.error(\"Update movie error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  });\n\n  useEffect(() => {\n    loadData();\n  }, [id]);\n\n  useEffect(() => {\n    if (formik.values.poster && formik.values.poster.match(/^https?:\\/\\/.+/)) {\n      setPreviewUrl(formik.values.poster);\n    } else {\n      setPreviewUrl(\"\");\n    }\n  }, [formik.values.poster]);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [movieRes, producersRes, actorsRes] = await Promise.all([\n        api.movies.getById(id),\n        api.producers.getAll(),\n        api.actors.getAll()\n      ]);\n\n      setProducers(producersRes.data);\n      setActors(actorsRes.data);\n\n      // Set form values from movie data\n      formik.setValues({\n        name: movieRes.data.name,\n        desc: movieRes.data.desc,\n        director: movieRes.data.director,\n        poster: movieRes.data.poster,\n        yearOfRelease: movieRes.data.yearOfRelease,\n        producer: movieRes.data.producer._id,\n        actors: movieRes.data.actors.map(actor => actor._id)\n      });\n    } catch (err) {\n      setError(\"Failed to load movie data. Please try again later.\");\n      console.error(\"Load data error:\", err);\n      navigate(\"/\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Edit Movie\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Box sx={{ display: 'grid', gap: 2 }}>\n          <TextField\n            fullWidth\n            label=\"Movie Name\"\n            {...formik.getFieldProps('name')}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            label=\"Description\"\n            {...formik.getFieldProps('desc')}\n            error={formik.touched.desc && Boolean(formik.errors.desc)}\n            helperText={formik.touched.desc && formik.errors.desc}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Director\"\n            {...formik.getFieldProps('director')}\n            error={formik.touched.director && Boolean(formik.errors.director)}\n            helperText={formik.touched.director && formik.errors.director}\n          />\n\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>\n            <Box sx={{ flex: 1 }}>\n              <TextField\n                fullWidth\n                label=\"Poster URL\"\n                {...formik.getFieldProps('poster')}\n                error={formik.touched.poster && Boolean(formik.errors.poster)}\n                helperText={formik.touched.poster && formik.errors.poster}\n              />\n            </Box>\n            {previewUrl && (\n              <Paper elevation={3} sx={{ p: 1 }}>\n                <img\n                  src={previewUrl}\n                  alt=\"Poster preview\"\n                  style={{ height: 100, objectFit: 'contain' }}\n                  onError={() => setPreviewUrl(\"\")}\n                />\n              </Paper>\n            )}\n          </Box>\n\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"Year of Release\"\n            {...formik.getFieldProps('yearOfRelease')}\n            error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n            helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n          />\n\n          <FormControl \n            fullWidth\n            error={formik.touched.producer && Boolean(formik.errors.producer)}\n          >\n            <InputLabel>Producer</InputLabel>\n            <Select\n              {...formik.getFieldProps('producer')}\n              label=\"Producer\"\n            >\n              {producers.map(producer => (\n                <MenuItem key={producer._id} value={producer._id}>\n                  {producer.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.producer && formik.errors.producer && (\n              <FormHelperText>{formik.errors.producer}</FormHelperText>\n            )}\n          </FormControl>\n\n          <FormControl \n            fullWidth\n            error={formik.touched.actors && Boolean(formik.errors.actors)}\n          >\n            <InputLabel>Actors</InputLabel>\n            <Select\n              multiple\n              {...formik.getFieldProps('actors')}\n              input={<OutlinedInput label=\"Actors\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => {\n                    const actor = actors.find(a => a._id === value);\n                    return (\n                      <Chip\n                        key={value}\n                        label={actor ? actor.name : 'Unknown'}\n                        size=\"small\"\n                      />\n                    );\n                  })}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >\n              {actors.map(actor => (\n                <MenuItem key={actor._id} value={actor._id}>\n                  {actor.name}\n                </MenuItem>\n              ))}\n            </Select>\n            {formik.touched.actors && formik.errors.actors && (\n              <FormHelperText>{formik.errors.actors}</FormHelperText>\n            )}\n          </FormControl>\n\n          <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={loading}\n              size=\"large\"\n              fullWidth\n            >\n              {loading ? (\n                <CircularProgress size={24} sx={{ color: 'white' }} />\n              ) : (\n                'Update Movie'\n              )}\n            </Button>\n            <Button\n              variant=\"outlined\"\n              size=\"large\"\n              fullWidth\n              onClick={() => navigate(\"/\")}\n            >\n              Cancel\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default EditMovies;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}